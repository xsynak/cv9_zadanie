
i2c_comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  080082f0  080082f0  000182f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008734  08008734  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008734  08008734  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008734  08008734  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008734  08008734  00018734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800873c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200001e0  0800891c  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  0800891c  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad65  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e4  00000000  00000000  0002af75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005a88  00000000  00000000  0002e818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009317  00000000  00000000  000342a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b470  00000000  00000000  0003d5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b8a27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc8  00000000  00000000  000b8a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082d4 	.word	0x080082d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080082d4 	.word	0x080082d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <LL_EXTI_EnableIT_0_31+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40010400 	.word	0x40010400

08000c6c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c76:	6a1a      	ldr	r2, [r3, #32]
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <LL_EXTI_EnableIT_32_63+0x20>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	620b      	str	r3, [r1, #32]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40010400 	.word	0x40010400

08000c90 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4904      	ldr	r1, [pc, #16]	; (8000cb4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40010400 	.word	0x40010400

08000cb8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cc2:	6a1a      	ldr	r2, [r3, #32]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	4904      	ldr	r1, [pc, #16]	; (8000cdc <LL_EXTI_DisableIT_32_63+0x24>)
 8000cca:	4013      	ands	r3, r2
 8000ccc:	620b      	str	r3, [r1, #32]
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400

08000ce0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4904      	ldr	r1, [pc, #16]	; (8000d00 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	604b      	str	r3, [r1, #4]

}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40010400 	.word	0x40010400

08000d04 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d10:	4904      	ldr	r1, [pc, #16]	; (8000d24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40010400 	.word	0x40010400

08000d28 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40010400 	.word	0x40010400

08000d50 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_39
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000d62:	4013      	ands	r3, r2
 8000d64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40010400 	.word	0x40010400

08000d78 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	4904      	ldr	r1, [pc, #16]	; (8000d98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]

}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	40010400 	.word	0x40010400

08000d9c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000da8:	4904      	ldr	r1, [pc, #16]	; (8000dbc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40010400 	.word	0x40010400

08000dc0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4904      	ldr	r1, [pc, #16]	; (8000de4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	608b      	str	r3, [r1, #8]

}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40010400 	.word	0x40010400

08000de8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	43db      	mvns	r3, r3
 8000df8:	4904      	ldr	r1, [pc, #16]	; (8000e0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40010400 	.word	0x40010400

08000e10 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	4904      	ldr	r1, [pc, #16]	; (8000e30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	60cb      	str	r3, [r1, #12]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	40010400 	.word	0x40010400

08000e34 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	4904      	ldr	r1, [pc, #16]	; (8000e54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60cb      	str	r3, [r1, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40010400 	.word	0x40010400

08000e80 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80cd 	beq.w	8001058 <LL_EXTI_Init+0x1b0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d061      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d01c      	beq.n	8000f08 <LL_EXTI_Init+0x60>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	dc25      	bgt.n	8000f1e <LL_EXTI_Init+0x76>
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <LL_EXTI_Init+0x34>
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d00b      	beq.n	8000ef2 <LL_EXTI_Init+0x4a>
 8000eda:	e020      	b.n	8000f1e <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff21 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff feac 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          break;
 8000ef0:	e018      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff feca 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff feed 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f06:	e00d      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fe9b 	bl	8000c48 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fee2 	bl	8000ce0 <LL_EXTI_EnableEvent_0_31>
          break;
 8000f1c:	e002      	b.n	8000f24 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
          break;
 8000f22:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7a9b      	ldrb	r3, [r3, #10]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d02e      	beq.n	8000f8a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7a9b      	ldrb	r3, [r3, #10]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d01c      	beq.n	8000f6e <LL_EXTI_Init+0xc6>
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	dc25      	bgt.n	8000f84 <LL_EXTI_Init+0xdc>
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d002      	beq.n	8000f42 <LL_EXTI_Init+0x9a>
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d00b      	beq.n	8000f58 <LL_EXTI_Init+0xb0>
 8000f40:	e020      	b.n	8000f84 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff86 	bl	8000e58 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff11 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000f56:	e019      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff2f 	bl	8000dc0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff52 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f6c:	e00e      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff00 	bl	8000d78 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff47 	bl	8000e10 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000f82:	e003      	b.n	8000f8c <LL_EXTI_Init+0xe4>
          default:
            status = ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	73fb      	strb	r3, [r7, #15]
            break;
 8000f88:	e000      	b.n	8000f8c <LL_EXTI_Init+0xe4>
        }
      }
 8000f8a:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d076      	beq.n	8001082 <LL_EXTI_Init+0x1da>
    {
      switch (EXTI_InitStruct->Mode)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	7a5b      	ldrb	r3, [r3, #9]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d01c      	beq.n	8000fd6 <LL_EXTI_Init+0x12e>
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	dc25      	bgt.n	8000fec <LL_EXTI_Init+0x144>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <LL_EXTI_Init+0x102>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d00b      	beq.n	8000fc0 <LL_EXTI_Init+0x118>
 8000fa8:	e020      	b.n	8000fec <LL_EXTI_Init+0x144>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fece 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fe57 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          break;
 8000fbe:	e018      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fe77 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fe98 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fd4:	e00d      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe46 	bl	8000c6c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fe8d 	bl	8000d04 <LL_EXTI_EnableEvent_32_63>
          break;
 8000fea:	e002      	b.n	8000ff2 <LL_EXTI_Init+0x14a>
        default:
          status = ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
          break;
 8000ff0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a9b      	ldrb	r3, [r3, #10]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d043      	beq.n	8001082 <LL_EXTI_Init+0x1da>
      {
        switch (EXTI_InitStruct->Trigger)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7a9b      	ldrb	r3, [r3, #10]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d01c      	beq.n	800103c <LL_EXTI_Init+0x194>
 8001002:	2b03      	cmp	r3, #3
 8001004:	dc25      	bgt.n	8001052 <LL_EXTI_Init+0x1aa>
 8001006:	2b01      	cmp	r3, #1
 8001008:	d002      	beq.n	8001010 <LL_EXTI_Init+0x168>
 800100a:	2b02      	cmp	r3, #2
 800100c:	d00b      	beq.n	8001026 <LL_EXTI_Init+0x17e>
 800100e:	e020      	b.n	8001052 <LL_EXTI_Init+0x1aa>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff33 	bl	8000e80 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff febc 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001024:	e02e      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fedc 	bl	8000de8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fefd 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800103a:	e023      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff feab 	bl	8000d9c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fef2 	bl	8000e34 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001050:	e018      	b.n	8001084 <LL_EXTI_Init+0x1dc>
          default:
            status = ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
            break;
 8001056:	e015      	b.n	8001084 <LL_EXTI_Init+0x1dc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe17 	bl	8000c90 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe5e 	bl	8000d28 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fe21 	bl	8000cb8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fe68 	bl	8000d50 <LL_EXTI_DisableEvent_32_63>
 8001080:	e000      	b.n	8001084 <LL_EXTI_Init+0x1dc>
      }
 8001082:	bf00      	nop
#endif
  }
  return status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800108e:	b480      	push	{r7}
 8001090:	b089      	sub	sp, #36	; 0x24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa93 f3a3 	rbit	r3, r3
 80010a8:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	fab3 f383 	clz	r3, r3
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2103      	movs	r1, #3
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	401a      	ands	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fab3 f383 	clz	r3, r3
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	431a      	orrs	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	3724      	adds	r7, #36	; 0x24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	401a      	ands	r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	431a      	orrs	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	605a      	str	r2, [r3, #4]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	613b      	str	r3, [r7, #16]
  return(result);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2103      	movs	r1, #3
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	401a      	ands	r2, r3
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa93 f3a3 	rbit	r3, r3
 8001150:	61bb      	str	r3, [r7, #24]
  return(result);
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	431a      	orrs	r2, r3
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001166:	bf00      	nop
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001172:	b480      	push	{r7}
 8001174:	b089      	sub	sp, #36	; 0x24
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa93 f3a3 	rbit	r3, r3
 800118c:	613b      	str	r3, [r7, #16]
  return(result);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fab3 f383 	clz	r3, r3
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2103      	movs	r1, #3
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	; 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a1a      	ldr	r2, [r3, #32]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	613b      	str	r3, [r7, #16]
  return(result);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	210f      	movs	r1, #15
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	401a      	ands	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	61bb      	str	r3, [r7, #24]
  return(result);
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	fab3 f383 	clz	r3, r3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800121a:	bf00      	nop
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001226:	b480      	push	{r7}
 8001228:	b089      	sub	sp, #36	; 0x24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa93 f3a3 	rbit	r3, r3
 8001242:	613b      	str	r3, [r7, #16]
  return(result);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	210f      	movs	r1, #15
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	401a      	ands	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	61bb      	str	r3, [r7, #24]
  return(result);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001278:	bf00      	nop
 800127a:	3724      	adds	r7, #36	; 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa93 f3a3 	rbit	r3, r3
 80012a2:	613b      	str	r3, [r7, #16]
  return(result);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80012ac:	e048      	b.n	8001340 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2101      	movs	r1, #1
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d03a      	beq.n	800133a <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	461a      	mov	r2, r3
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff fede 	bl	800108e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d003      	beq.n	80012e2 <LL_GPIO_Init+0x5e>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d106      	bne.n	80012f0 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	461a      	mov	r2, r3
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff14 	bl	8001118 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff3a 	bl	8001172 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d119      	bne.n	800133a <LL_GPIO_Init+0xb6>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	60bb      	str	r3, [r7, #8]
  return(result);
 8001312:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	2b07      	cmp	r3, #7
 800131a:	d807      	bhi.n	800132c <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	461a      	mov	r2, r3
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff51 	bl	80011cc <LL_GPIO_SetAFPin_0_7>
 800132a:	e006      	b.n	800133a <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	461a      	mov	r2, r3
 8001332:	69b9      	ldr	r1, [r7, #24]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff76 	bl	8001226 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1af      	bne.n	80012ae <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d003      	beq.n	800135e <LL_GPIO_Init+0xda>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d107      	bne.n	800136e <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6819      	ldr	r1, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	461a      	mov	r2, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff febd 	bl	80010e8 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 0201 	bic.w	r2, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_I2C_ConfigFilters>:
  *         This parameter is used to configure the digital noise filter on SDA and SCL input.
  *         The digital filter will filter spikes with a length of up to DNF[3:0]*ti2cclk.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigFilters(I2C_TypeDef *I2Cx, uint32_t AnalogFilter, uint32_t DigitalFilter)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0219      	lsls	r1, r3, #8
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	430b      	orrs	r3, r1
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	601a      	str	r2, [r3, #0]
}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <LL_I2C_SetOwnAddress1>:
  *         @arg @ref LL_I2C_OWNADDRESS1_7BIT
  *         @arg @ref LL_I2C_OWNADDRESS1_10BIT
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress1(I2C_TypeDef *I2Cx, uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013fa:	f023 0307 	bic.w	r3, r3, #7
 80013fe:	68b9      	ldr	r1, [r7, #8]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	430a      	orrs	r2, r1
 8001404:	431a      	orrs	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	609a      	str	r2, [r3, #8]
}
 800140a:	bf00      	nop
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <LL_I2C_EnableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_EnableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	609a      	str	r2, [r3, #8]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <LL_I2C_DisableOwnAddress1>:
  * @rmtoll OAR1         OA1EN         LL_I2C_DisableOwnAddress1
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress1(I2C_TypeDef *I2Cx)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_I2C_SetTiming>:
  * @param  Timing This parameter must be a value between Min_Data=0 and Max_Data=0xFFFFFFFF.
  * @note   This parameter is computed with the STM32CubeMX Tool.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetTiming(I2C_TypeDef *I2Cx, uint32_t Timing)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	605a      	str	r2, [r3, #4]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff ff65 	bl	8001398 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6899      	ldr	r1, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	461a      	mov	r2, r3
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff6d 	bl	80013b8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ffb6 	bl	8001456 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff44 	bl	8001378 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ffa0 	bl	8001436 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	461a      	mov	r2, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff70 	bl	80013e6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d002      	beq.n	8001514 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff81 	bl	8001416 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa9 	bl	8001472 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	695b      	ldr	r3, [r3, #20]
 8001524:	4619      	mov	r1, r3
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff ffb6 	bl	8001498 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f043 0201 	orr.w	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	615a      	str	r2, [r3, #20]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <LL_TIM_Init+0xd4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d007      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001676:	d003      	beq.n	8001680 <LL_TIM_Init+0x2c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a2c      	ldr	r2, [pc, #176]	; (800172c <LL_TIM_Init+0xd8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d106      	bne.n	800168e <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a25      	ldr	r2, [pc, #148]	; (8001728 <LL_TIM_Init+0xd4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <LL_TIM_Init+0x6a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169c:	d00f      	beq.n	80016be <LL_TIM_Init+0x6a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a22      	ldr	r2, [pc, #136]	; (800172c <LL_TIM_Init+0xd8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d00b      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a21      	ldr	r2, [pc, #132]	; (8001730 <LL_TIM_Init+0xdc>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d007      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a20      	ldr	r2, [pc, #128]	; (8001734 <LL_TIM_Init+0xe0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d003      	beq.n	80016be <LL_TIM_Init+0x6a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a1f      	ldr	r2, [pc, #124]	; (8001738 <LL_TIM_Init+0xe4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d106      	bne.n	80016cc <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4619      	mov	r1, r3
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff3a 	bl	8001552 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff26 	bl	8001536 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <LL_TIM_Init+0xd4>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00b      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <LL_TIM_Init+0xdc>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <LL_TIM_Init+0xb6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <LL_TIM_Init+0xe0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d003      	beq.n	800170a <LL_TIM_Init+0xb6>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <LL_TIM_Init+0xe4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d105      	bne.n	8001716 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	7c1b      	ldrb	r3, [r3, #16]
 800170e:	4619      	mov	r1, r3
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff2c 	bl	800156e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff8b 	bl	8001632 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40012c00 	.word	0x40012c00
 800172c:	40000400 	.word	0x40000400
 8001730:	40014000 	.word	0x40014000
 8001734:	40014400 	.word	0x40014400
 8001738:	40014800 	.word	0x40014800

0800173c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001752:	d045      	beq.n	80017e0 <LL_TIM_OC_Init+0xa4>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800175a:	d848      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d036      	beq.n	80017d2 <LL_TIM_OC_Init+0x96>
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800176a:	d840      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001772:	d027      	beq.n	80017c4 <LL_TIM_OC_Init+0x88>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800177a:	d838      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001782:	d018      	beq.n	80017b6 <LL_TIM_OC_Init+0x7a>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800178a:	d830      	bhi.n	80017ee <LL_TIM_OC_Init+0xb2>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <LL_TIM_OC_Init+0x5e>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b10      	cmp	r3, #16
 8001796:	d007      	beq.n	80017a8 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001798:	e029      	b.n	80017ee <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 f82d 	bl	80017fc <OC1Config>
 80017a2:	4603      	mov	r3, r0
 80017a4:	75fb      	strb	r3, [r7, #23]
      break;
 80017a6:	e023      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f000 f8a6 	bl	80018fc <OC2Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	75fb      	strb	r3, [r7, #23]
      break;
 80017b4:	e01c      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f923 	bl	8001a04 <OC3Config>
 80017be:	4603      	mov	r3, r0
 80017c0:	75fb      	strb	r3, [r7, #23]
      break;
 80017c2:	e015      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9a0 	bl	8001b0c <OC4Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	75fb      	strb	r3, [r7, #23]
      break;
 80017d0:	e00e      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 fa05 	bl	8001be4 <OC5Config>
 80017da:	4603      	mov	r3, r0
 80017dc:	75fb      	strb	r3, [r7, #23]
      break;
 80017de:	e007      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 fa60 	bl	8001ca8 <OC6Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]
      break;
 80017ec:	e000      	b.n	80017f0 <LL_TIM_OC_Init+0xb4>
      break;
 80017ee:	bf00      	nop
  }

  return result;
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f023 0201 	bic.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f023 0303 	bic.w	r3, r3, #3
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f023 0202 	bic.w	r2, r3, #2
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f023 0201 	bic.w	r2, r3, #1
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <OC1Config+0xf0>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d00b      	beq.n	8001886 <OC1Config+0x8a>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1f      	ldr	r2, [pc, #124]	; (80018f0 <OC1Config+0xf4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d007      	beq.n	8001886 <OC1Config+0x8a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <OC1Config+0xf8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d003      	beq.n	8001886 <OC1Config+0x8a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <OC1Config+0xfc>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d11e      	bne.n	80018c4 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f023 0208 	bic.w	r2, r3, #8
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f023 0204 	bic.w	r2, r3, #4
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4313      	orrs	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fe57 	bl	800158a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40012c00 	.word	0x40012c00
 80018f0:	40014000 	.word	0x40014000
 80018f4:	40014400 	.word	0x40014400
 80018f8:	40014800 	.word	0x40014800

080018fc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	f023 0210 	bic.w	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	0212      	lsls	r2, r2, #8
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f023 0220 	bic.w	r2, r3, #32
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f023 0210 	bic.w	r2, r3, #16
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <OC2Config+0xf8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00b      	beq.n	800198c <OC2Config+0x90>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <OC2Config+0xfc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <OC2Config+0x90>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <OC2Config+0x100>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d003      	beq.n	800198c <OC2Config+0x90>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <OC2Config+0x104>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d11f      	bne.n	80019cc <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	019b      	lsls	r3, r3, #6
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	019b      	lsls	r3, r3, #6
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fde1 	bl	80015a6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40012c00 	.word	0x40012c00
 80019f8:	40014000 	.word	0x40014000
 80019fc:	40014400 	.word	0x40014400
 8001a00:	40014800 	.word	0x40014800

08001a04 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f023 0303 	bic.w	r3, r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a21      	ldr	r2, [pc, #132]	; (8001afc <OC3Config+0xf8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00b      	beq.n	8001a92 <OC3Config+0x8e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a20      	ldr	r2, [pc, #128]	; (8001b00 <OC3Config+0xfc>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d007      	beq.n	8001a92 <OC3Config+0x8e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <OC3Config+0x100>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <OC3Config+0x8e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <OC3Config+0x104>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11f      	bne.n	8001ad2 <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	029b      	lsls	r3, r3, #10
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	015b      	lsls	r3, r3, #5
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fd6c 	bl	80015c2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	697a      	ldr	r2, [r7, #20]
 8001aee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40012c00 	.word	0x40012c00
 8001b00:	40014000 	.word	0x40014000
 8001b04:	40014400 	.word	0x40014400
 8001b08:	40014800 	.word	0x40014800

08001b0c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b46:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	0212      	lsls	r2, r2, #8
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	031b      	lsls	r3, r3, #12
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	031b      	lsls	r3, r3, #12
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <OC4Config+0xc8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00b      	beq.n	8001b9c <OC4Config+0x90>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <OC4Config+0xcc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d007      	beq.n	8001b9c <OC4Config+0x90>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a13      	ldr	r2, [pc, #76]	; (8001bdc <OC4Config+0xd0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d003      	beq.n	8001b9c <OC4Config+0x90>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <OC4Config+0xd4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d107      	bne.n	8001bac <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fd0d 	bl	80015de <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40014000 	.word	0x40014000
 8001bdc:	40014400 	.word	0x40014400
 8001be0:	40014800 	.word	0x40014800

08001be4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <OC5Config+0xb4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d00b      	beq.n	8001c60 <OC5Config+0x7c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <OC5Config+0xb8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d007      	beq.n	8001c60 <OC5Config+0x7c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <OC5Config+0xbc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d003      	beq.n	8001c60 <OC5Config+0x7c>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <OC5Config+0xc0>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d109      	bne.n	8001c74 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fcba 	bl	80015fa <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	40014400 	.word	0x40014400
 8001ca4:	40014800 	.word	0x40014800

08001ca8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	0212      	lsls	r2, r2, #8
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	051b      	lsls	r3, r3, #20
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	051b      	lsls	r3, r3, #20
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a14      	ldr	r2, [pc, #80]	; (8001d5c <OC6Config+0xb4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00b      	beq.n	8001d26 <OC6Config+0x7e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a13      	ldr	r2, [pc, #76]	; (8001d60 <OC6Config+0xb8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d007      	beq.n	8001d26 <OC6Config+0x7e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <OC6Config+0xbc>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d003      	beq.n	8001d26 <OC6Config+0x7e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <OC6Config+0xc0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d109      	bne.n	8001d3a <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff fc65 	bl	8001616 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40012c00 	.word	0x40012c00
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	40014800 	.word	0x40014800

08001d6c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <LL_InitTick+0x30>)
 8001d80:	3b01      	subs	r3, #1
 8001d82:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LL_InitTick+0x30>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <LL_InitTick+0x30>)
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001da8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ffdd 	bl	8001d6c <LL_InitTick>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <LL_mDelay+0x48>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001dca:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd2:	d00c      	beq.n	8001dee <LL_mDelay+0x32>
  {
    Delay++;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001dda:	e008      	b.n	8001dee <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <LL_mDelay+0x48>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d002      	beq.n	8001dee <LL_mDelay+0x32>
    {
      Delay--;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f3      	bne.n	8001ddc <LL_mDelay+0x20>
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e010 	.word	0xe000e010

08001e08 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <LL_SetSystemCoreClock+0x1c>)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6013      	str	r3, [r2, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000004 	.word	0x20000004

08001e28 <LL_TIM_ClearFlag_UPDATE>:
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f06f 0201 	mvn.w	r2, #1
 8001e36:	611a      	str	r2, [r3, #16]
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
	...

08001ea4 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb0:	f7ff ffdb 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001eb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ebc:	f7ff ffd5 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	480e      	ldr	r0, [pc, #56]	; (8001efc <resetSegments+0x58>)
 8001ec4:	f7ff ffd1 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001ec8:	2120      	movs	r1, #32
 8001eca:	480c      	ldr	r0, [pc, #48]	; (8001efc <resetSegments+0x58>)
 8001ecc:	f7ff ffcd 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	480a      	ldr	r0, [pc, #40]	; (8001efc <resetSegments+0x58>)
 8001ed4:	f7ff ffc9 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f7ff ffc4 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee8:	f7ff ffbf 	bl	8001e6a <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001eec:	2108      	movs	r1, #8
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef2:	f7ff ffba 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	48000400 	.word	0x48000400

08001f00 <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8001f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f0c:	f7ff ffbb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8001f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f18:	f7ff ffb5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	480e      	ldr	r0, [pc, #56]	; (8001f58 <setSegments+0x58>)
 8001f20:	f7ff ffb1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001f24:	2120      	movs	r1, #32
 8001f26:	480c      	ldr	r0, [pc, #48]	; (8001f58 <setSegments+0x58>)
 8001f28:	f7ff ffad 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	480a      	ldr	r0, [pc, #40]	; (8001f58 <setSegments+0x58>)
 8001f30:	f7ff ffa9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8001f34:	2101      	movs	r1, #1
 8001f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f3a:	f7ff ffa4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8001f3e:	2102      	movs	r1, #2
 8001f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f44:	f7ff ff9f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001f48:	2108      	movs	r1, #8
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4e:	f7ff ff9a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	48000400 	.word	0x48000400

08001f5c <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8001f60:	2104      	movs	r1, #4
 8001f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f66:	f7ff ff8e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	480a      	ldr	r0, [pc, #40]	; (8001f98 <resetDigits+0x3c>)
 8001f6e:	f7ff ff8a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001f72:	2110      	movs	r1, #16
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f78:	f7ff ff85 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_12);
 8001f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f84:	f7ff ff7f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8e:	f7ff ff7a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	48000400 	.word	0x48000400

08001f9c <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <setDigits+0x3c>)
 8001fa4:	f7ff ff61 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8001fa8:	2110      	movs	r1, #16
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fae:	f7ff ff5c 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8001fb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fba:	f7ff ff56 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc4:	f7ff ff51 	bl	8001e6a <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f7ff ff4c 	bl	8001e6a <LL_GPIO_SetOutputPin>
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	48000400 	.word	0x48000400

08001fdc <setDecimalPoint>:

void setDecimalPoint(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4802      	ldr	r0, [pc, #8]	; (8001fec <setDecimalPoint+0x10>)
 8001fe4:	f7ff ff4f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	48000400 	.word	0x48000400

08001ff0 <setOne>:

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffa:	f7ff ff44 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002006:	f7ff ff3e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <setTwo>:

void setTwo(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002014:	2101      	movs	r1, #1
 8002016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201a:	f7ff ff34 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800201e:	2102      	movs	r1, #2
 8002020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002024:	f7ff ff2f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002028:	2110      	movs	r1, #16
 800202a:	4807      	ldr	r0, [pc, #28]	; (8002048 <setTwo+0x38>)
 800202c:	f7ff ff2b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002030:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002038:	f7ff ff25 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800203c:	2120      	movs	r1, #32
 800203e:	4802      	ldr	r0, [pc, #8]	; (8002048 <setTwo+0x38>)
 8002040:	f7ff ff21 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	48000400 	.word	0x48000400

0800204c <setThree>:

void setThree(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002050:	2101      	movs	r1, #1
 8002052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002056:	f7ff ff16 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800205a:	2102      	movs	r1, #2
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f7ff ff11 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002064:	2110      	movs	r1, #16
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <setThree+0x38>)
 8002068:	f7ff ff0d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800206c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002074:	f7ff ff07 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002078:	2120      	movs	r1, #32
 800207a:	4802      	ldr	r0, [pc, #8]	; (8002084 <setThree+0x38>)
 800207c:	f7ff ff03 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	48000400 	.word	0x48000400

08002088 <setFour>:

void setFour(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800208c:	2108      	movs	r1, #8
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002092:	f7ff fef8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002096:	2101      	movs	r1, #1
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f7ff fef3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020a0:	2110      	movs	r1, #16
 80020a2:	4805      	ldr	r0, [pc, #20]	; (80020b8 <setFour+0x30>)
 80020a4:	f7ff feef 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b0:	f7ff fee9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	48000400 	.word	0x48000400

080020bc <setFive>:

void setFive(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020c0:	2108      	movs	r1, #8
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f7ff fede 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80020ca:	2120      	movs	r1, #32
 80020cc:	4809      	ldr	r0, [pc, #36]	; (80020f4 <setFive+0x38>)
 80020ce:	f7ff feda 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80020d2:	2110      	movs	r1, #16
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <setFive+0x38>)
 80020d6:	f7ff fed6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80020da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e2:	f7ff fed0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80020e6:	2102      	movs	r1, #2
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ec:	f7ff fecb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	48000400 	.word	0x48000400

080020f8 <setSix>:

void setSix(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80020fc:	2108      	movs	r1, #8
 80020fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002102:	f7ff fec0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002106:	2120      	movs	r1, #32
 8002108:	480c      	ldr	r0, [pc, #48]	; (800213c <setSix+0x44>)
 800210a:	f7ff febc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800210e:	2110      	movs	r1, #16
 8002110:	480a      	ldr	r0, [pc, #40]	; (800213c <setSix+0x44>)
 8002112:	f7ff feb8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800211a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800211e:	f7ff feb2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002122:	2102      	movs	r1, #2
 8002124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002128:	f7ff fead 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800212c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002134:	f7ff fea7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	48000400 	.word	0x48000400

08002140 <setSeven>:

void setSeven(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002144:	2101      	movs	r1, #1
 8002146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800214a:	f7ff fe9c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800214e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002156:	f7ff fe96 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800215a:	2102      	movs	r1, #2
 800215c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002160:	f7ff fe91 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}

08002168 <setEight>:

void setEight(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800216c:	2108      	movs	r1, #8
 800216e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002172:	f7ff fe88 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002176:	2120      	movs	r1, #32
 8002178:	480f      	ldr	r0, [pc, #60]	; (80021b8 <setEight+0x50>)
 800217a:	f7ff fe84 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800217e:	2110      	movs	r1, #16
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <setEight+0x50>)
 8002182:	f7ff fe80 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800218a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218e:	f7ff fe7a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002192:	2102      	movs	r1, #2
 8002194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002198:	f7ff fe75 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800219c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f7ff fe6f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021a8:	2101      	movs	r1, #1
 80021aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ae:	f7ff fe6a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	48000400 	.word	0x48000400

080021bc <setNine>:

void setNine(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80021c0:	2101      	movs	r1, #1
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c6:	f7ff fe5e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80021ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d2:	f7ff fe58 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80021d6:	2102      	movs	r1, #2
 80021d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021dc:	f7ff fe53 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80021e0:	2110      	movs	r1, #16
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <setNine+0x3c>)
 80021e4:	f7ff fe4f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80021e8:	2108      	movs	r1, #8
 80021ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ee:	f7ff fe4a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	48000400 	.word	0x48000400

080021fc <setZero>:

void setZero(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002200:	2108      	movs	r1, #8
 8002202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002206:	f7ff fe3e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800220a:	2120      	movs	r1, #32
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <setZero+0x48>)
 800220e:	f7ff fe3a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800221a:	f7ff fe34 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800221e:	2102      	movs	r1, #2
 8002220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002224:	f7ff fe2f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800222c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002230:	f7ff fe29 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002234:	2101      	movs	r1, #1
 8002236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800223a:	f7ff fe24 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	48000400 	.word	0x48000400

08002248 <setMinus>:

void setMinus(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800224c:	2110      	movs	r1, #16
 800224e:	4802      	ldr	r0, [pc, #8]	; (8002258 <setMinus+0x10>)
 8002250:	f7ff fe19 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	48000400 	.word	0x48000400

0800225c <setCapital_a>:

void setCapital_a(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
	// A,B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002260:	2108      	movs	r1, #8
 8002262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002266:	f7ff fe0e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800226a:	2110      	movs	r1, #16
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <setCapital_a+0x48>)
 800226e:	f7ff fe0a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f7ff fe04 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800227e:	2102      	movs	r1, #2
 8002280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002284:	f7ff fdff 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002290:	f7ff fdf9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002294:	2101      	movs	r1, #1
 8002296:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229a:	f7ff fdf4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	48000400 	.word	0x48000400

080022a8 <setSmall_a>:

void setSmall_a(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	// A,B,C,E,D,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80022ac:	2120      	movs	r1, #32
 80022ae:	480f      	ldr	r0, [pc, #60]	; (80022ec <setSmall_a+0x44>)
 80022b0:	f7ff fde9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80022b4:	2110      	movs	r1, #16
 80022b6:	480d      	ldr	r0, [pc, #52]	; (80022ec <setSmall_a+0x44>)
 80022b8:	f7ff fde5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80022bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c4:	f7ff fddf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80022c8:	2102      	movs	r1, #2
 80022ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ce:	f7ff fdda 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80022d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022da:	f7ff fdd4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80022de:	2101      	movs	r1, #1
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e4:	f7ff fdcf 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	48000400 	.word	0x48000400

080022f0 <setSmall_b>:

void setSmall_b(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	// C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80022f4:	2108      	movs	r1, #8
 80022f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022fa:	f7ff fdc4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80022fe:	2110      	movs	r1, #16
 8002300:	480a      	ldr	r0, [pc, #40]	; (800232c <setSmall_b+0x3c>)
 8002302:	f7ff fdc0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800230e:	f7ff fdba 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002312:	2120      	movs	r1, #32
 8002314:	4805      	ldr	r0, [pc, #20]	; (800232c <setSmall_b+0x3c>)
 8002316:	f7ff fdb6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800231a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002322:	f7ff fdb0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	48000400 	.word	0x48000400

08002330 <setCapital_c>:

void setCapital_c(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	// A,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002334:	2108      	movs	r1, #8
 8002336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800233a:	f7ff fda4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800233e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002346:	f7ff fd9e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800234a:	2102      	movs	r1, #2
 800234c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002350:	f7ff fd99 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002354:	2120      	movs	r1, #32
 8002356:	4802      	ldr	r0, [pc, #8]	; (8002360 <setCapital_c+0x30>)
 8002358:	f7ff fd95 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	48000400 	.word	0x48000400

08002364 <setSmall_c>:

void setSmall_c(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	// D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002368:	2120      	movs	r1, #32
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <setSmall_c+0x24>)
 800236c:	f7ff fd8b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002370:	2110      	movs	r1, #16
 8002372:	4805      	ldr	r0, [pc, #20]	; (8002388 <setSmall_c+0x24>)
 8002374:	f7ff fd87 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002378:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f7ff fd81 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	48000400 	.word	0x48000400

0800238c <setSmall_d>:

void setSmall_d(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	// B,C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002390:	2120      	movs	r1, #32
 8002392:	480d      	ldr	r0, [pc, #52]	; (80023c8 <setSmall_d+0x3c>)
 8002394:	f7ff fd77 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002398:	2110      	movs	r1, #16
 800239a:	480b      	ldr	r0, [pc, #44]	; (80023c8 <setSmall_d+0x3c>)
 800239c:	f7ff fd73 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80023a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023a8:	f7ff fd6d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b4:	f7ff fd67 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80023b8:	2101      	movs	r1, #1
 80023ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023be:	f7ff fd62 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	48000400 	.word	0x48000400

080023cc <setCapital_e>:

void setCapital_e(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	// A,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80023d0:	2108      	movs	r1, #8
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d6:	f7ff fd56 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80023da:	2110      	movs	r1, #16
 80023dc:	4809      	ldr	r0, [pc, #36]	; (8002404 <setCapital_e+0x38>)
 80023de:	f7ff fd52 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80023e2:	2120      	movs	r1, #32
 80023e4:	4807      	ldr	r0, [pc, #28]	; (8002404 <setCapital_e+0x38>)
 80023e6:	f7ff fd4e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80023ea:	2102      	movs	r1, #2
 80023ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023f0:	f7ff fd49 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80023f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023fc:	f7ff fd43 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	48000400 	.word	0x48000400

08002408 <setCapital_f>:

void setCapital_f(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
	// A,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800240c:	2108      	movs	r1, #8
 800240e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002412:	f7ff fd38 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002416:	2110      	movs	r1, #16
 8002418:	4807      	ldr	r0, [pc, #28]	; (8002438 <setCapital_f+0x30>)
 800241a:	f7ff fd34 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800241e:	2102      	movs	r1, #2
 8002420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002424:	f7ff fd2f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002430:	f7ff fd29 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	48000400 	.word	0x48000400

0800243c <setCapital_g>:

void setCapital_g(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	// A,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002440:	2108      	movs	r1, #8
 8002442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002446:	f7ff fd1e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800244a:	2120      	movs	r1, #32
 800244c:	480a      	ldr	r0, [pc, #40]	; (8002478 <setCapital_g+0x3c>)
 800244e:	f7ff fd1a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002456:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245a:	f7ff fd14 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800245e:	2102      	movs	r1, #2
 8002460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002464:	f7ff fd0f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002468:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800246c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002470:	f7ff fd09 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}
 8002478:	48000400 	.word	0x48000400

0800247c <setCapital_h>:

void setCapital_h(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002480:	2108      	movs	r1, #8
 8002482:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002486:	f7ff fcfe 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800248a:	2110      	movs	r1, #16
 800248c:	480a      	ldr	r0, [pc, #40]	; (80024b8 <setCapital_h+0x3c>)
 800248e:	f7ff fcfa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800249a:	f7ff fcf4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800249e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a6:	f7ff fcee 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80024aa:	2101      	movs	r1, #1
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f7ff fce9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	48000400 	.word	0x48000400

080024bc <setSmall_h>:

void setSmall_h(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	// C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80024c0:	2108      	movs	r1, #8
 80024c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c6:	f7ff fcde 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80024ca:	2110      	movs	r1, #16
 80024cc:	4808      	ldr	r0, [pc, #32]	; (80024f0 <setSmall_h+0x34>)
 80024ce:	f7ff fcda 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80024d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024da:	f7ff fcd4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80024de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e6:	f7ff fcce 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	48000400 	.word	0x48000400

080024f4 <setCapital_i>:

void setCapital_i(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
	// E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80024f8:	2108      	movs	r1, #8
 80024fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024fe:	f7ff fcc2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250a:	f7ff fcbc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <setCapital_j>:

void setCapital_j(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	// B,C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002518:	2120      	movs	r1, #32
 800251a:	480b      	ldr	r0, [pc, #44]	; (8002548 <setCapital_j+0x34>)
 800251c:	f7ff fcb3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002528:	f7ff fcad 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800252c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f7ff fca7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002538:	2101      	movs	r1, #1
 800253a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253e:	f7ff fca2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	48000400 	.word	0x48000400

0800254c <setCapital_l>:

void setCapital_l(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
	// D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002550:	2108      	movs	r1, #8
 8002552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002556:	f7ff fc96 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800255a:	2120      	movs	r1, #32
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <setCapital_l+0x28>)
 800255e:	f7ff fc92 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002562:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256a:	f7ff fc8c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	48000400 	.word	0x48000400

08002578 <setSmall_n>:

void setSmall_n(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
	// C,E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800257c:	2110      	movs	r1, #16
 800257e:	4808      	ldr	r0, [pc, #32]	; (80025a0 <setSmall_n+0x28>)
 8002580:	f7ff fc81 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258c:	f7ff fc7b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002598:	f7ff fc75 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	48000400 	.word	0x48000400

080025a4 <setCapital_o>:

void setCapital_o(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80025a8:	2108      	movs	r1, #8
 80025aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ae:	f7ff fc6a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025b2:	2120      	movs	r1, #32
 80025b4:	480d      	ldr	r0, [pc, #52]	; (80025ec <setCapital_o+0x48>)
 80025b6:	f7ff fc66 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80025ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c2:	f7ff fc60 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80025c6:	2102      	movs	r1, #2
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025cc:	f7ff fc5b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80025d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d8:	f7ff fc55 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80025dc:	2101      	movs	r1, #1
 80025de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e2:	f7ff fc50 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	48000400 	.word	0x48000400

080025f0 <setSmall_o>:

void setSmall_o(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
	// C,D,E,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80025f4:	2120      	movs	r1, #32
 80025f6:	480a      	ldr	r0, [pc, #40]	; (8002620 <setSmall_o+0x30>)
 80025f8:	f7ff fc45 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80025fc:	2110      	movs	r1, #16
 80025fe:	4808      	ldr	r0, [pc, #32]	; (8002620 <setSmall_o+0x30>)
 8002600:	f7ff fc41 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f7ff fc3b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002618:	f7ff fc35 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	48000400 	.word	0x48000400

08002624 <setCapital_p>:

void setCapital_p(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	// A,B,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002628:	2108      	movs	r1, #8
 800262a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262e:	f7ff fc2a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002632:	2110      	movs	r1, #16
 8002634:	480a      	ldr	r0, [pc, #40]	; (8002660 <setCapital_p+0x3c>)
 8002636:	f7ff fc26 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800263a:	2102      	movs	r1, #2
 800263c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002640:	f7ff fc21 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f7ff fc1b 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002650:	2101      	movs	r1, #1
 8002652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002656:	f7ff fc16 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	48000400 	.word	0x48000400

08002664 <setSmall_q>:

void setSmall_q(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	// A,B,C,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002668:	2108      	movs	r1, #8
 800266a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800266e:	f7ff fc0a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002672:	2110      	movs	r1, #16
 8002674:	480a      	ldr	r0, [pc, #40]	; (80026a0 <setSmall_q+0x3c>)
 8002676:	f7ff fc06 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800267a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800267e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002682:	f7ff fc00 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002686:	2102      	movs	r1, #2
 8002688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268c:	f7ff fbfb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002690:	2101      	movs	r1, #1
 8002692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002696:	f7ff fbf6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	48000400 	.word	0x48000400

080026a4 <setSmall_r>:

void setSmall_r(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	// E,G
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80026a8:	2110      	movs	r1, #16
 80026aa:	4805      	ldr	r0, [pc, #20]	; (80026c0 <setSmall_r+0x1c>)
 80026ac:	f7ff fbeb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80026b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026b8:	f7ff fbe5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	48000400 	.word	0x48000400

080026c4 <setCapital_s>:

void setCapital_s(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	// A,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80026c8:	2108      	movs	r1, #8
 80026ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ce:	f7ff fbda 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80026d2:	2110      	movs	r1, #16
 80026d4:	4809      	ldr	r0, [pc, #36]	; (80026fc <setCapital_s+0x38>)
 80026d6:	f7ff fbd6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80026da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e2:	f7ff fbd0 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80026e6:	2102      	movs	r1, #2
 80026e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ec:	f7ff fbcb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80026f0:	2120      	movs	r1, #32
 80026f2:	4802      	ldr	r0, [pc, #8]	; (80026fc <setCapital_s+0x38>)
 80026f4:	f7ff fbc7 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	48000400 	.word	0x48000400

08002700 <setSmall_t>:

void setSmall_t(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	// D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002704:	2108      	movs	r1, #8
 8002706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270a:	f7ff fbbc 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800270e:	2110      	movs	r1, #16
 8002710:	4807      	ldr	r0, [pc, #28]	; (8002730 <setSmall_t+0x30>)
 8002712:	f7ff fbb8 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002716:	2120      	movs	r1, #32
 8002718:	4805      	ldr	r0, [pc, #20]	; (8002730 <setSmall_t+0x30>)
 800271a:	f7ff fbb4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800271e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002726:	f7ff fbae 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	48000400 	.word	0x48000400

08002734 <setCapital_u>:

void setCapital_u(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	// B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002738:	2108      	movs	r1, #8
 800273a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273e:	f7ff fba2 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002742:	2120      	movs	r1, #32
 8002744:	480a      	ldr	r0, [pc, #40]	; (8002770 <setCapital_u+0x3c>)
 8002746:	f7ff fb9e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800274a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800274e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002752:	f7ff fb98 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002756:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800275a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800275e:	f7ff fb92 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002762:	2101      	movs	r1, #1
 8002764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002768:	f7ff fb8d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	48000400 	.word	0x48000400

08002774 <setSmall_u>:

void setSmall_u(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	// C,D,E
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002778:	2120      	movs	r1, #32
 800277a:	4808      	ldr	r0, [pc, #32]	; (800279c <setSmall_u+0x28>)
 800277c:	f7ff fb83 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002780:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002788:	f7ff fb7d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800278c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002794:	f7ff fb77 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	48000400 	.word	0x48000400

080027a0 <setSmall_y>:

void setSmall_y(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
	// B,C,D,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80027a4:	2108      	movs	r1, #8
 80027a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027aa:	f7ff fb6c 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80027ae:	2110      	movs	r1, #16
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <setSmall_y+0x38>)
 80027b2:	f7ff fb68 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80027b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027be:	f7ff fb62 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80027c2:	2120      	movs	r1, #32
 80027c4:	4804      	ldr	r0, [pc, #16]	; (80027d8 <setSmall_y+0x38>)
 80027c6:	f7ff fb5e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80027ca:	2101      	movs	r1, #1
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f7ff fb59 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	48000400 	.word	0x48000400

080027dc <setCapital_k>:

void setCapital_k(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	// A,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80027e0:	2108      	movs	r1, #8
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027e6:	f7ff fb4e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80027ea:	2110      	movs	r1, #16
 80027ec:	480a      	ldr	r0, [pc, #40]	; (8002818 <setCapital_k+0x3c>)
 80027ee:	f7ff fb4a 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80027f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fa:	f7ff fb44 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80027fe:	2102      	movs	r1, #2
 8002800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002804:	f7ff fb3f 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002808:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800280c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002810:	f7ff fb39 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	48000400 	.word	0x48000400

0800281c <setCapital_m>:

void setCapital_m(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
	// A,E,C
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8002820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f7ff fb2d 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800282c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002834:	f7ff fb27 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8002838:	2102      	movs	r1, #2
 800283a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283e:	f7ff fb22 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <setCapital_v>:

void setCapital_v(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
	// D,C,B,F
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800284c:	2120      	movs	r1, #32
 800284e:	480a      	ldr	r0, [pc, #40]	; (8002878 <setCapital_v+0x30>)
 8002850:	f7ff fb19 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8002854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800285c:	f7ff fb13 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002860:	2101      	movs	r1, #1
 8002862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002866:	f7ff fb0e 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800286a:	2108      	movs	r1, #8
 800286c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002870:	f7ff fb09 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	48000400 	.word	0x48000400

0800287c <setCapital_w>:

void setCapital_w(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
	// D,F,B
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002880:	2120      	movs	r1, #32
 8002882:	4807      	ldr	r0, [pc, #28]	; (80028a0 <setCapital_w+0x24>)
 8002884:	f7ff faff 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8002888:	2108      	movs	r1, #8
 800288a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288e:	f7ff fafa 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8002892:	2101      	movs	r1, #1
 8002894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002898:	f7ff faf5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800289c:	bf00      	nop
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	48000400 	.word	0x48000400

080028a4 <setCapital_x>:

void setCapital_x(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	// B,C,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80028a8:	2101      	movs	r1, #1
 80028aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ae:	f7ff faea 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80028b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ba:	f7ff fae4 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80028be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c6:	f7ff fade 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80028ca:	2108      	movs	r1, #8
 80028cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d0:	f7ff fad9 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80028d4:	2110      	movs	r1, #16
 80028d6:	4802      	ldr	r0, [pc, #8]	; (80028e0 <setCapital_x+0x3c>)
 80028d8:	f7ff fad5 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	48000400 	.word	0x48000400

080028e4 <setCapital_z>:

void setCapital_z(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	// A,B,D,G
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80028e8:	2120      	movs	r1, #32
 80028ea:	4809      	ldr	r0, [pc, #36]	; (8002910 <setCapital_z+0x2c>)
 80028ec:	f7ff facb 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80028f0:	2102      	movs	r1, #2
 80028f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f6:	f7ff fac6 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80028fa:	2101      	movs	r1, #1
 80028fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002900:	f7ff fac1 	bl	8001e86 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8002904:	2110      	movs	r1, #16
 8002906:	4802      	ldr	r0, [pc, #8]	; (8002910 <setCapital_z+0x2c>)
 8002908:	f7ff fabd 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	48000400 	.word	0x48000400

08002914 <setUnderline>:


void setUnderline(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
	// D
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8002918:	2120      	movs	r1, #32
 800291a:	4802      	ldr	r0, [pc, #8]	; (8002924 <setUnderline+0x10>)
 800291c:	f7ff fab3 	bl	8001e86 <LL_GPIO_ResetOutputPin>
}
 8002920:	bf00      	nop
 8002922:	bd80      	pop	{r7, pc}
 8002924:	48000400 	.word	0x48000400

08002928 <displayName>:
/**
 * Pre-process number before it is displayed. Extract digits of the number
 */
void displayName(char *message,int dot_pos)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	dDisplayData.digit_num = 4;
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <displayName+0x54>)
 8002934:	2204      	movs	r2, #4
 8002936:	711a      	strb	r2, [r3, #4]
	dDisplayData.negative = 0;
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <displayName+0x54>)
 800293a:	2200      	movs	r2, #0
 800293c:	715a      	strb	r2, [r3, #5]
	dDisplayData.resolution = dot_pos;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	b2da      	uxtb	r2, r3
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <displayName+0x54>)
 8002944:	719a      	strb	r2, [r3, #6]

	for (int i = 0; i < 4; i++) {
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e00c      	b.n	8002966 <displayName+0x3e>
		dDisplayData.digit[i] = *message;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7819      	ldrb	r1, [r3, #0]
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <displayName+0x54>)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4413      	add	r3, r2
 8002956:	460a      	mov	r2, r1
 8002958:	701a      	strb	r2, [r3, #0]
		*message++;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3301      	adds	r3, #1
 800295e:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	3301      	adds	r3, #1
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b03      	cmp	r3, #3
 800296a:	ddef      	ble.n	800294c <displayName+0x24>
	}
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200001fc 	.word	0x200001fc

08002980 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d823      	bhi.n	80029d8 <setDigit+0x58>
 8002990:	a201      	add	r2, pc, #4	; (adr r2, 8002998 <setDigit+0x18>)
 8002992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002996:	bf00      	nop
 8002998:	080029a9 	.word	0x080029a9
 800299c:	080029b3 	.word	0x080029b3
 80029a0:	080029bf 	.word	0x080029bf
 80029a4:	080029cd 	.word	0x080029cd
	{
		case 0:
			DIGIT_1_ON;
 80029a8:	2101      	movs	r1, #1
 80029aa:	480d      	ldr	r0, [pc, #52]	; (80029e0 <setDigit+0x60>)
 80029ac:	f7ff fa5d 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029b0:	e012      	b.n	80029d8 <setDigit+0x58>
		case 1:
			DIGIT_2_ON;
 80029b2:	2110      	movs	r1, #16
 80029b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029b8:	f7ff fa57 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029bc:	e00c      	b.n	80029d8 <setDigit+0x58>
		case 2:
			DIGIT_3_ON;
 80029be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029c6:	f7ff fa50 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029ca:	e005      	b.n	80029d8 <setDigit+0x58>
		case 3:
			DIGIT_4_ON;
 80029cc:	2104      	movs	r1, #4
 80029ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029d2:	f7ff fa4a 	bl	8001e6a <LL_GPIO_SetOutputPin>
			break;
 80029d6:	bf00      	nop
	}
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	48000400 	.word	0x48000400

080029e4 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 80029e4:	b5b0      	push	{r4, r5, r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	71fb      	strb	r3, [r7, #7]
 80029ee:	e1f5      	b.n	8002ddc <updateDisplay+0x3f8>
	{
		switch(dDisplayData.digit[i])
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	4ad3      	ldr	r2, [pc, #844]	; (8002d40 <updateDisplay+0x35c>)
 80029f4:	5cd3      	ldrb	r3, [r2, r3]
 80029f6:	3b2d      	subs	r3, #45	; 0x2d
 80029f8:	2b4c      	cmp	r3, #76	; 0x4c
 80029fa:	f200 81cd 	bhi.w	8002d98 <updateDisplay+0x3b4>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <updateDisplay+0x20>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002bc5 	.word	0x08002bc5
 8002a08:	08002d99 	.word	0x08002d99
 8002a0c:	08002d99 	.word	0x08002d99
 8002a10:	08002b39 	.word	0x08002b39
 8002a14:	08002b47 	.word	0x08002b47
 8002a18:	08002b55 	.word	0x08002b55
 8002a1c:	08002b63 	.word	0x08002b63
 8002a20:	08002b71 	.word	0x08002b71
 8002a24:	08002b7f 	.word	0x08002b7f
 8002a28:	08002b8d 	.word	0x08002b8d
 8002a2c:	08002b9b 	.word	0x08002b9b
 8002a30:	08002ba9 	.word	0x08002ba9
 8002a34:	08002bb7 	.word	0x08002bb7
 8002a38:	08002d99 	.word	0x08002d99
 8002a3c:	08002d99 	.word	0x08002d99
 8002a40:	08002d99 	.word	0x08002d99
 8002a44:	08002d99 	.word	0x08002d99
 8002a48:	08002d99 	.word	0x08002d99
 8002a4c:	08002d99 	.word	0x08002d99
 8002a50:	08002d99 	.word	0x08002d99
 8002a54:	08002bd3 	.word	0x08002bd3
 8002a58:	08002d99 	.word	0x08002d99
 8002a5c:	08002bfd 	.word	0x08002bfd
 8002a60:	08002d99 	.word	0x08002d99
 8002a64:	08002c27 	.word	0x08002c27
 8002a68:	08002c35 	.word	0x08002c35
 8002a6c:	08002c43 	.word	0x08002c43
 8002a70:	08002c51 	.word	0x08002c51
 8002a74:	08002c6d 	.word	0x08002c6d
 8002a78:	08002c7b 	.word	0x08002c7b
 8002a7c:	08002d31 	.word	0x08002d31
 8002a80:	08002c89 	.word	0x08002c89
 8002a84:	08002d45 	.word	0x08002d45
 8002a88:	08002d99 	.word	0x08002d99
 8002a8c:	08002ca5 	.word	0x08002ca5
 8002a90:	08002cc1 	.word	0x08002cc1
 8002a94:	08002d99 	.word	0x08002d99
 8002a98:	08002d99 	.word	0x08002d99
 8002a9c:	08002ceb 	.word	0x08002ceb
 8002aa0:	08002d99 	.word	0x08002d99
 8002aa4:	08002d07 	.word	0x08002d07
 8002aa8:	08002d53 	.word	0x08002d53
 8002aac:	08002d61 	.word	0x08002d61
 8002ab0:	08002d6f 	.word	0x08002d6f
 8002ab4:	08002d99 	.word	0x08002d99
 8002ab8:	08002d7d 	.word	0x08002d7d
 8002abc:	08002d99 	.word	0x08002d99
 8002ac0:	08002d99 	.word	0x08002d99
 8002ac4:	08002d99 	.word	0x08002d99
 8002ac8:	08002d99 	.word	0x08002d99
 8002acc:	08002d8b 	.word	0x08002d8b
 8002ad0:	08002d99 	.word	0x08002d99
 8002ad4:	08002be1 	.word	0x08002be1
 8002ad8:	08002bef 	.word	0x08002bef
 8002adc:	08002c0b 	.word	0x08002c0b
 8002ae0:	08002c19 	.word	0x08002c19
 8002ae4:	08002d99 	.word	0x08002d99
 8002ae8:	08002d99 	.word	0x08002d99
 8002aec:	08002d99 	.word	0x08002d99
 8002af0:	08002c5f 	.word	0x08002c5f
 8002af4:	08002d99 	.word	0x08002d99
 8002af8:	08002d99 	.word	0x08002d99
 8002afc:	08002d99 	.word	0x08002d99
 8002b00:	08002d99 	.word	0x08002d99
 8002b04:	08002d99 	.word	0x08002d99
 8002b08:	08002c97 	.word	0x08002c97
 8002b0c:	08002cb3 	.word	0x08002cb3
 8002b10:	08002d99 	.word	0x08002d99
 8002b14:	08002ccf 	.word	0x08002ccf
 8002b18:	08002cdd 	.word	0x08002cdd
 8002b1c:	08002d99 	.word	0x08002d99
 8002b20:	08002cf9 	.word	0x08002cf9
 8002b24:	08002d15 	.word	0x08002d15
 8002b28:	08002d99 	.word	0x08002d99
 8002b2c:	08002d99 	.word	0x08002d99
 8002b30:	08002d99 	.word	0x08002d99
 8002b34:	08002d23 	.word	0x08002d23
		{
			case '0':
			  setDigit(i);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff20 	bl	8002980 <setDigit>
			  setZero();
 8002b40:	f7ff fb5c 	bl	80021fc <setZero>
			  break;
 8002b44:	e128      	b.n	8002d98 <updateDisplay+0x3b4>
			case '1':
			  setDigit(i);
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff19 	bl	8002980 <setDigit>
			  setOne();
 8002b4e:	f7ff fa4f 	bl	8001ff0 <setOne>
			  break;
 8002b52:	e121      	b.n	8002d98 <updateDisplay+0x3b4>
			case '2':
			  setDigit(i);
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff ff12 	bl	8002980 <setDigit>
			  setTwo();
 8002b5c:	f7ff fa58 	bl	8002010 <setTwo>
			  break;
 8002b60:	e11a      	b.n	8002d98 <updateDisplay+0x3b4>
			case '3':
			  setDigit(i);
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff0b 	bl	8002980 <setDigit>
			  setThree();
 8002b6a:	f7ff fa6f 	bl	800204c <setThree>
			  break;
 8002b6e:	e113      	b.n	8002d98 <updateDisplay+0x3b4>
			case '4':
			  setDigit(i);
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff ff04 	bl	8002980 <setDigit>
			  setFour();
 8002b78:	f7ff fa86 	bl	8002088 <setFour>
			  break;
 8002b7c:	e10c      	b.n	8002d98 <updateDisplay+0x3b4>
			case '5':
			  setDigit(i);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fefd 	bl	8002980 <setDigit>
			  setFive();
 8002b86:	f7ff fa99 	bl	80020bc <setFive>
			  break;
 8002b8a:	e105      	b.n	8002d98 <updateDisplay+0x3b4>
			case '6':
			  setDigit(i);
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fef6 	bl	8002980 <setDigit>
			  setSix();
 8002b94:	f7ff fab0 	bl	80020f8 <setSix>
			  break;
 8002b98:	e0fe      	b.n	8002d98 <updateDisplay+0x3b4>
			case '7':
			  setDigit(i);
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff feef 	bl	8002980 <setDigit>
			  setSeven();
 8002ba2:	f7ff facd 	bl	8002140 <setSeven>
			  break;
 8002ba6:	e0f7      	b.n	8002d98 <updateDisplay+0x3b4>
			case '8':
			  setDigit(i);
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fee8 	bl	8002980 <setDigit>
			  setEight();
 8002bb0:	f7ff fada 	bl	8002168 <setEight>
			  break;
 8002bb4:	e0f0      	b.n	8002d98 <updateDisplay+0x3b4>
			case '9':
			  setDigit(i);
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fee1 	bl	8002980 <setDigit>
			  setNine();
 8002bbe:	f7ff fafd 	bl	80021bc <setNine>
			  break;
 8002bc2:	e0e9      	b.n	8002d98 <updateDisplay+0x3b4>
			case '-':
			  setDigit(i);
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff feda 	bl	8002980 <setDigit>
			  setMinus();
 8002bcc:	f7ff fb3c 	bl	8002248 <setMinus>
			  break;
 8002bd0:	e0e2      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'A':
			  setDigit(i);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fed3 	bl	8002980 <setDigit>
			  setCapital_a();
 8002bda:	f7ff fb3f 	bl	800225c <setCapital_a>
			  break;
 8002bde:	e0db      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'a':
			  setDigit(i);
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fecc 	bl	8002980 <setDigit>
			  setSmall_a();
 8002be8:	f7ff fb5e 	bl	80022a8 <setSmall_a>
			  break;
 8002bec:	e0d4      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'b':
			  setDigit(i);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fec5 	bl	8002980 <setDigit>
			  setSmall_b();
 8002bf6:	f7ff fb7b 	bl	80022f0 <setSmall_b>
			  break;
 8002bfa:	e0cd      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'C':
			  setDigit(i);
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff febe 	bl	8002980 <setDigit>
			  setCapital_c();
 8002c04:	f7ff fb94 	bl	8002330 <setCapital_c>
			  break;
 8002c08:	e0c6      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'c':
			  setDigit(i);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff feb7 	bl	8002980 <setDigit>
			  setSmall_c();
 8002c12:	f7ff fba7 	bl	8002364 <setSmall_c>
			  break;
 8002c16:	e0bf      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'd':
			  setDigit(i);
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff feb0 	bl	8002980 <setDigit>
			  setSmall_d();
 8002c20:	f7ff fbb4 	bl	800238c <setSmall_d>
			  break;
 8002c24:	e0b8      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'E':
			  setDigit(i);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fea9 	bl	8002980 <setDigit>
			  setCapital_e();
 8002c2e:	f7ff fbcd 	bl	80023cc <setCapital_e>
			  break;
 8002c32:	e0b1      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'F':
			  setDigit(i);
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fea2 	bl	8002980 <setDigit>
			  setCapital_f();
 8002c3c:	f7ff fbe4 	bl	8002408 <setCapital_f>
			  break;
 8002c40:	e0aa      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'G':
			  setDigit(i);
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fe9b 	bl	8002980 <setDigit>
			  setCapital_g();
 8002c4a:	f7ff fbf7 	bl	800243c <setCapital_g>
			  break;
 8002c4e:	e0a3      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'H':
			  setDigit(i);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fe94 	bl	8002980 <setDigit>
			  setCapital_h();
 8002c58:	f7ff fc10 	bl	800247c <setCapital_h>
			  break;
 8002c5c:	e09c      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'h':
			  setDigit(i);
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fe8d 	bl	8002980 <setDigit>
			  setSmall_h();
 8002c66:	f7ff fc29 	bl	80024bc <setSmall_h>
			  break;
 8002c6a:	e095      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'I':
			  setDigit(i);
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fe86 	bl	8002980 <setDigit>
			  setCapital_i();
 8002c74:	f7ff fc3e 	bl	80024f4 <setCapital_i>
			  break;
 8002c78:	e08e      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'J':
			  setDigit(i);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fe7f 	bl	8002980 <setDigit>
			  setCapital_j();
 8002c82:	f7ff fc47 	bl	8002514 <setCapital_j>
			  break;
 8002c86:	e087      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'L':
			  setDigit(i);
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fe78 	bl	8002980 <setDigit>
			  setCapital_l();
 8002c90:	f7ff fc5c 	bl	800254c <setCapital_l>
			  break;
 8002c94:	e080      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'n':
			  setDigit(i);
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fe71 	bl	8002980 <setDigit>
			  setSmall_n();
 8002c9e:	f7ff fc6b 	bl	8002578 <setSmall_n>
			  break;
 8002ca2:	e079      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'O':
			  setDigit(i);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fe6a 	bl	8002980 <setDigit>
			  setCapital_o();
 8002cac:	f7ff fc7a 	bl	80025a4 <setCapital_o>
			  break;
 8002cb0:	e072      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'o':
			  setDigit(i);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fe63 	bl	8002980 <setDigit>
			  setSmall_o();
 8002cba:	f7ff fc99 	bl	80025f0 <setSmall_o>
			  break;
 8002cbe:	e06b      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'P':
			  setDigit(i);
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fe5c 	bl	8002980 <setDigit>
			  setCapital_p();
 8002cc8:	f7ff fcac 	bl	8002624 <setCapital_p>
			  break;
 8002ccc:	e064      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'q':
			  setDigit(i);
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fe55 	bl	8002980 <setDigit>
			  setSmall_q();
 8002cd6:	f7ff fcc5 	bl	8002664 <setSmall_q>
			  break;
 8002cda:	e05d      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'r':
			  setDigit(i);
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fe4e 	bl	8002980 <setDigit>
			  setSmall_r();
 8002ce4:	f7ff fcde 	bl	80026a4 <setSmall_r>
			  break;
 8002ce8:	e056      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'S':
			  setDigit(i);
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe47 	bl	8002980 <setDigit>
			  setCapital_s();
 8002cf2:	f7ff fce7 	bl	80026c4 <setCapital_s>
			  break;
 8002cf6:	e04f      	b.n	8002d98 <updateDisplay+0x3b4>
			case 't':
			  setDigit(i);
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fe40 	bl	8002980 <setDigit>
			  setSmall_t();
 8002d00:	f7ff fcfe 	bl	8002700 <setSmall_t>
			  break;
 8002d04:	e048      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'U':
			  setDigit(i);
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fe39 	bl	8002980 <setDigit>
			  setCapital_u();
 8002d0e:	f7ff fd11 	bl	8002734 <setCapital_u>
			  break;
 8002d12:	e041      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'u':
			  setDigit(i);
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fe32 	bl	8002980 <setDigit>
			  setSmall_u();
 8002d1c:	f7ff fd2a 	bl	8002774 <setSmall_u>
			  break;
 8002d20:	e03a      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'y':
			  setDigit(i);
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fe2b 	bl	8002980 <setDigit>
			  setSmall_y();
 8002d2a:	f7ff fd39 	bl	80027a0 <setSmall_y>
			  break;
 8002d2e:	e033      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'K':
			  setDigit(i);
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fe24 	bl	8002980 <setDigit>
			  setCapital_k();
 8002d38:	f7ff fd50 	bl	80027dc <setCapital_k>
			  break;
 8002d3c:	e02c      	b.n	8002d98 <updateDisplay+0x3b4>
 8002d3e:	bf00      	nop
 8002d40:	200001fc 	.word	0x200001fc
			case 'M':
			  setDigit(i);
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fe1a 	bl	8002980 <setDigit>
			  setCapital_m();
 8002d4c:	f7ff fd66 	bl	800281c <setCapital_m>
			  break;
 8002d50:	e022      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'V':
			  setDigit(i);
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fe13 	bl	8002980 <setDigit>
			  setCapital_v();
 8002d5a:	f7ff fd75 	bl	8002848 <setCapital_v>
			  break;
 8002d5e:	e01b      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'W':
			  setDigit(i);
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fe0c 	bl	8002980 <setDigit>
			  setCapital_w();
 8002d68:	f7ff fd88 	bl	800287c <setCapital_w>
			  break;
 8002d6c:	e014      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'X':
			  setDigit(i);
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fe05 	bl	8002980 <setDigit>
			  setCapital_x();
 8002d76:	f7ff fd95 	bl	80028a4 <setCapital_x>
			  break;
 8002d7a:	e00d      	b.n	8002d98 <updateDisplay+0x3b4>
			case 'Z':
			  setDigit(i);
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fdfe 	bl	8002980 <setDigit>
			  setCapital_z();
 8002d84:	f7ff fdae 	bl	80028e4 <setCapital_z>
			  break;
 8002d88:	e006      	b.n	8002d98 <updateDisplay+0x3b4>
			case '_':
			  setDigit(i);
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fdf7 	bl	8002980 <setDigit>
			  setUnderline();
 8002d92:	f7ff fdbf 	bl	8002914 <setUnderline>
			  break;
 8002d96:	bf00      	nop

		}

		if(dDisplayData.resolution == i)
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <updateDisplay+0x40c>)
 8002d9a:	799b      	ldrb	r3, [r3, #6]
 8002d9c:	79fa      	ldrb	r2, [r7, #7]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d101      	bne.n	8002da6 <updateDisplay+0x3c2>
		{
			setDecimalPoint();
 8002da2:	f7ff f91b 	bl	8001fdc <setDecimalPoint>
		}

		disp_time_saved = disp_time;
 8002da6:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <updateDisplay+0x410>)
 8002da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dac:	4912      	ldr	r1, [pc, #72]	; (8002df8 <updateDisplay+0x414>)
 8002dae:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8002db2:	bf00      	nop
 8002db4:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <updateDisplay+0x414>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	1c94      	adds	r4, r2, #2
 8002dbc:	f143 0500 	adc.w	r5, r3, #0
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <updateDisplay+0x410>)
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	42ab      	cmp	r3, r5
 8002dc8:	bf08      	it	eq
 8002dca:	42a2      	cmpeq	r2, r4
 8002dcc:	d3f2      	bcc.n	8002db4 <updateDisplay+0x3d0>

		resetDigits();
 8002dce:	f7ff f8c5 	bl	8001f5c <resetDigits>
		resetSegments();
 8002dd2:	f7ff f867 	bl	8001ea4 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	71fb      	strb	r3, [r7, #7]
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	f67f ae06 	bls.w	80029f0 <updateDisplay+0xc>
	}
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bdb0      	pop	{r4, r5, r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200001fc 	.word	0x200001fc
 8002df4:	20000208 	.word	0x20000208
 8002df8:	20000210 	.word	0x20000210

08002dfc <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8002e00:	4806      	ldr	r0, [pc, #24]	; (8002e1c <TIM3_IRQHandler+0x20>)
 8002e02:	f7ff f81f 	bl	8001e44 <LL_TIM_IsActiveFlag_UPDATE>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8002e0c:	f7ff fdea 	bl	80029e4 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <TIM3_IRQHandler+0x20>)
 8002e12:	f7ff f809 	bl	8001e28 <LL_TIM_ClearFlag_UPDATE>
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40000400 	.word	0x40000400

08002e20 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <NVIC_GetPriorityGrouping+0x18>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	f003 0307 	and.w	r3, r3, #7
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4907      	ldr	r1, [pc, #28]	; (8002e6c <NVIC_EnableIRQ+0x30>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e100 	.word	0xe000e100

08002e70 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	6039      	str	r1, [r7, #0]
 8002e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da0b      	bge.n	8002e9c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	490c      	ldr	r1, [pc, #48]	; (8002ebc <NVIC_SetPriority+0x4c>)
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	3b04      	subs	r3, #4
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	440b      	add	r3, r1
 8002e98:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e9a:	e009      	b.n	8002eb0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4907      	ldr	r1, [pc, #28]	; (8002ec0 <NVIC_SetPriority+0x50>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	e000ed00 	.word	0xe000ed00
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f1c3 0307 	rsb	r3, r3, #7
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf28      	it	cs
 8002ee2:	2304      	movcs	r3, #4
 8002ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d902      	bls.n	8002ef4 <NVIC_EncodePriority+0x30>
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3b03      	subs	r3, #3
 8002ef2:	e000      	b.n	8002ef6 <NVIC_EncodePriority+0x32>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43da      	mvns	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	401a      	ands	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa01 f303 	lsl.w	r3, r1, r3
 8002f16:	43d9      	mvns	r1, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	4313      	orrs	r3, r2
         );
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
	...

08002f2c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	4907      	ldr	r1, [pc, #28]	; (8002f58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	40021000 	.word	0x40021000

08002f5c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002f66:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <LL_SYSCFG_SetEXTISource+0x54>)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	43db      	mvns	r3, r3
 8002f78:	ea02 0103 	and.w	r1, r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	fa93 f3a3 	rbit	r3, r3
 8002f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	fab3 f383 	clz	r3, r3
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	409a      	lsls	r2, r3
 8002f94:	4806      	ldr	r0, [pc, #24]	; (8002fb0 <LL_SYSCFG_SetEXTISource+0x54>)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	3302      	adds	r3, #2
 8002f9e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010000 	.word	0x40010000

08002fb4 <LL_GPIO_SetPinMode>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	; 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	613b      	str	r3, [r7, #16]
  return(result);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2103      	movs	r1, #3
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_GPIO_SetPinPull>:
{
 800300e:	b480      	push	{r7}
 8003010:	b089      	sub	sp, #36	; 0x24
 8003012:	af00      	add	r7, sp, #0
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fa93 f3a3 	rbit	r3, r3
 8003028:	613b      	str	r3, [r7, #16]
  return(result);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2103      	movs	r1, #3
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	401a      	ands	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	61bb      	str	r3, [r7, #24]
  return(result);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	60da      	str	r2, [r3, #12]
}
 800305c:	bf00      	nop
 800305e:	3724      	adds	r7, #36	; 0x24
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_GPIO_ResetOutputPin>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308a:	f107 0310 	add.w	r3, r7, #16
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
 8003098:	611a      	str	r2, [r3, #16]
 800309a:	615a      	str	r2, [r3, #20]
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800309c:	1d3b      	adds	r3, r7, #4
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	605a      	str	r2, [r3, #4]
 80030a4:	609a      	str	r2, [r3, #8]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80030a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80030aa:	f7ff ff3f 	bl	8002f2c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80030ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80030b2:	f7ff ff3b 	bl	8002f2c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 80030b6:	f641 119f 	movw	r1, #6559	; 0x199f
 80030ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030be:	f7ff ffd3 	bl	8003068 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_7|LL_GPIO_PIN_12);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0);
 80030c2:	2133      	movs	r1, #51	; 0x33
 80030c4:	482a      	ldr	r0, [pc, #168]	; (8003170 <MX_GPIO_Init+0xec>)
 80030c6:	f7ff ffcf 	bl	8003068 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 80030ca:	f641 139f 	movw	r3, #6559	; 0x199f
 80030ce:	613b      	str	r3, [r7, #16]
          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_7|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030d0:	2301      	movs	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030dc:	2300      	movs	r3, #0
 80030de:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ea:	f7fe f8cb 	bl	8001284 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_0;
 80030ee:	2333      	movs	r3, #51	; 0x33
 80030f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80030f2:	2301      	movs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	4619      	mov	r1, r3
 8003108:	4819      	ldr	r0, [pc, #100]	; (8003170 <MX_GPIO_Init+0xec>)
 800310a:	f7fe f8bb 	bl	8001284 <LL_GPIO_Init>

  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE3);
 800310e:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8003112:	2001      	movs	r0, #1
 8003114:	f7ff ff22 	bl	8002f5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_PULL_UP);
 8003118:	2201      	movs	r2, #1
 800311a:	2108      	movs	r1, #8
 800311c:	4814      	ldr	r0, [pc, #80]	; (8003170 <MX_GPIO_Init+0xec>)
 800311e:	f7ff ff76 	bl	800300e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BUTTON_GPIO_Port, BUTTON_Pin, LL_GPIO_MODE_INPUT);
 8003122:	2200      	movs	r2, #0
 8003124:	2108      	movs	r1, #8
 8003126:	4812      	ldr	r0, [pc, #72]	; (8003170 <MX_GPIO_Init+0xec>)
 8003128:	f7ff ff44 	bl	8002fb4 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800312c:	2308      	movs	r3, #8
 800312e:	607b      	str	r3, [r7, #4]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003134:	2301      	movs	r3, #1
 8003136:	733b      	strb	r3, [r7, #12]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003138:	2300      	movs	r3, #0
 800313a:	737b      	strb	r3, [r7, #13]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800313c:	2301      	movs	r3, #1
 800313e:	73bb      	strb	r3, [r7, #14]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003140:	1d3b      	adds	r3, r7, #4
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd feb0 	bl	8000ea8 <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003148:	f7ff fe6a 	bl	8002e20 <NVIC_GetPriorityGrouping>
 800314c:	4603      	mov	r3, r0
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff feb6 	bl	8002ec4 <NVIC_EncodePriority>
 8003158:	4603      	mov	r3, r0
 800315a:	4619      	mov	r1, r3
 800315c:	2009      	movs	r0, #9
 800315e:	f7ff fe87 	bl	8002e70 <NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8003162:	2009      	movs	r0, #9
 8003164:	f7ff fe6a 	bl	8002e3c <NVIC_EnableIRQ>

}
 8003168:	bf00      	nop
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	48000400 	.word	0x48000400

08003174 <NVIC_GetPriorityGrouping>:
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <NVIC_GetPriorityGrouping+0x18>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f003 0307 	and.w	r3, r3, #7
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <NVIC_EnableIRQ>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	f003 021f 	and.w	r2, r3, #31
 80031a0:	4907      	ldr	r1, [pc, #28]	; (80031c0 <NVIC_EnableIRQ+0x30>)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	2001      	movs	r0, #1
 80031aa:	fa00 f202 	lsl.w	r2, r0, r2
 80031ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	e000e100 	.word	0xe000e100

080031c4 <NVIC_SetPriority>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80031d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	da0b      	bge.n	80031f0 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	490c      	ldr	r1, [pc, #48]	; (8003210 <NVIC_SetPriority+0x4c>)
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	3b04      	subs	r3, #4
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	440b      	add	r3, r1
 80031ec:	761a      	strb	r2, [r3, #24]
}
 80031ee:	e009      	b.n	8003204 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4907      	ldr	r1, [pc, #28]	; (8003214 <NVIC_SetPriority+0x50>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00
 8003214:	e000e100 	.word	0xe000e100

08003218 <NVIC_EncodePriority>:
{
 8003218:	b480      	push	{r7}
 800321a:	b089      	sub	sp, #36	; 0x24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f1c3 0307 	rsb	r3, r3, #7
 8003232:	2b04      	cmp	r3, #4
 8003234:	bf28      	it	cs
 8003236:	2304      	movcs	r3, #4
 8003238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3304      	adds	r3, #4
 800323e:	2b06      	cmp	r3, #6
 8003240:	d902      	bls.n	8003248 <NVIC_EncodePriority+0x30>
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3b03      	subs	r3, #3
 8003246:	e000      	b.n	800324a <NVIC_EncodePriority+0x32>
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 32ff 	mov.w	r2, #4294967295
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	401a      	ands	r2, r3
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003260:	f04f 31ff 	mov.w	r1, #4294967295
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	fa01 f303 	lsl.w	r3, r1, r3
 800326a:	43d9      	mvns	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003270:	4313      	orrs	r3, r2
}
 8003272:	4618      	mov	r0, r3
 8003274:	3724      	adds	r7, #36	; 0x24
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <LL_AHB1_GRP1_EnableClock>:
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4313      	orrs	r3, r2
 8003292:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800329e:	68fb      	ldr	r3, [r7, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40021000 	.word	0x40021000

080032b0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80032b8:	4b08      	ldr	r3, [pc, #32]	; (80032dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	4907      	ldr	r1, [pc, #28]	; (80032dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80032c6:	69da      	ldr	r2, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032ce:	68fb      	ldr	r3, [r7, #12]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40021000 	.word	0x40021000

080032e0 <LL_I2C_Enable>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f043 0201 	orr.w	r2, r3, #1
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_I2C_EnableClockStretching>:
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	601a      	str	r2, [r3, #0]
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_I2C_DisableGeneralCall>:
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <LL_I2C_SetOwnAddress2>:
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003354:	f023 0306 	bic.w	r3, r3, #6
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	430a      	orrs	r2, r1
 800335e:	431a      	orrs	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	60da      	str	r2, [r3, #12]
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_I2C_DisableOwnAddress2>:
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_I2C_EnableIT_RX>:
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	601a      	str	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_I2C_DisableIT_RX>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 0204 	bic.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	601a      	str	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_I2C_IsActiveFlag_TXIS>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <LL_I2C_IsActiveFlag_RXNE>:
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b04      	cmp	r3, #4
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_I2C_IsActiveFlag_STOP>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
}
 8003436:	4618      	mov	r0, r3
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_I2C_ClearFlag_STOP>:
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	f043 0220 	orr.w	r2, r3, #32
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	61da      	str	r2, [r3, #28]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <LL_I2C_EnableAutoEndMode>:
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	605a      	str	r2, [r3, #4]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	0d5b      	lsrs	r3, r3, #21
 800349a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <LL_I2C_HandleTransfer+0x48>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4319      	orrs	r1, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	4319      	orrs	r1, r3
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4319      	orrs	r1, r3
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | TransferSize << I2C_CR2_NBYTES_Pos | EndMode | Request);
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	03ff7bff 	.word	0x03ff7bff

080034d0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	b2db      	uxtb	r3, r3
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08e      	sub	sp, #56	; 0x38
 800350c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800350e:	f107 031c 	add.w	r3, r7, #28
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	609a      	str	r2, [r3, #8]
 800351a:	60da      	str	r2, [r3, #12]
 800351c:	611a      	str	r2, [r3, #16]
 800351e:	615a      	str	r2, [r3, #20]
 8003520:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
 8003530:	615a      	str	r2, [r3, #20]
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003532:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003536:	f7ff fea3 	bl	8003280 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800353a:	23c0      	movs	r3, #192	; 0xc0
 800353c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800353e:	2302      	movs	r3, #2
 8003540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003542:	2303      	movs	r3, #3
 8003544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8003546:	2301      	movs	r3, #1
 8003548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800354e:	2304      	movs	r3, #4
 8003550:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4821      	ldr	r0, [pc, #132]	; (80035dc <MX_I2C1_Init+0xd4>)
 8003558:	f7fd fe94 	bl	8001284 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800355c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003560:	f7ff fea6 	bl	80032b0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003564:	f7ff fe06 	bl	8003174 <NVIC_GetPriorityGrouping>
 8003568:	4603      	mov	r3, r0
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fe52 	bl	8003218 <NVIC_EncodePriority>
 8003574:	4603      	mov	r3, r0
 8003576:	4619      	mov	r1, r3
 8003578:	201f      	movs	r0, #31
 800357a:	f7ff fe23 	bl	80031c4 <NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800357e:	201f      	movs	r0, #31
 8003580:	f7ff fe06 	bl	8003190 <NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8003584:	4816      	ldr	r0, [pc, #88]	; (80035e0 <MX_I2C1_Init+0xd8>)
 8003586:	f7ff ff6c 	bl	8003462 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800358a:	4815      	ldr	r0, [pc, #84]	; (80035e0 <MX_I2C1_Init+0xd8>)
 800358c:	f7ff fef0 	bl	8003370 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8003590:	4813      	ldr	r0, [pc, #76]	; (80035e0 <MX_I2C1_Init+0xd8>)
 8003592:	f7ff fec5 	bl	8003320 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8003596:	4812      	ldr	r0, [pc, #72]	; (80035e0 <MX_I2C1_Init+0xd8>)
 8003598:	f7ff feb2 	bl	8003300 <LL_I2C_EnableClockStretching>

  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80035a0:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <MX_I2C1_Init+0xdc>)
 80035a2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80035ac:	2302      	movs	r3, #2
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80035b4:	2300      	movs	r3, #0
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80035b8:	f107 031c 	add.w	r3, r7, #28
 80035bc:	4619      	mov	r1, r3
 80035be:	4808      	ldr	r0, [pc, #32]	; (80035e0 <MX_I2C1_Init+0xd8>)
 80035c0:	f7fd ff7d 	bl	80014be <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80035c4:	2200      	movs	r2, #0
 80035c6:	2100      	movs	r1, #0
 80035c8:	4805      	ldr	r0, [pc, #20]	; (80035e0 <MX_I2C1_Init+0xd8>)
 80035ca:	f7ff feb9 	bl	8003340 <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 80035ce:	4804      	ldr	r0, [pc, #16]	; (80035e0 <MX_I2C1_Init+0xd8>)
 80035d0:	f7ff fe86 	bl	80032e0 <LL_I2C_Enable>
}
 80035d4:	bf00      	nop
 80035d6:	3738      	adds	r7, #56	; 0x38
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	48000400 	.word	0x48000400
 80035e0:	40005400 	.word	0x40005400
 80035e4:	2000090e 	.word	0x2000090e

080035e8 <i2c_master_write>:


void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	4604      	mov	r4, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	4611      	mov	r1, r2
 80035f4:	461a      	mov	r2, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	71fb      	strb	r3, [r7, #7]
 80035fa:	4603      	mov	r3, r0
 80035fc:	71bb      	strb	r3, [r7, #6]
 80035fe:	460b      	mov	r3, r1
 8003600:	717b      	strb	r3, [r7, #5]
 8003602:	4613      	mov	r3, r2
 8003604:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8003606:	793b      	ldrb	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 800360c:	79bb      	ldrb	r3, [r7, #6]
 800360e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003612:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8003614:	7979      	ldrb	r1, [r7, #5]
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <i2c_master_write+0x80>)
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	2302      	movs	r3, #2
 8003622:	2200      	movs	r2, #0
 8003624:	4811      	ldr	r0, [pc, #68]	; (800366c <i2c_master_write+0x84>)
 8003626:	f7ff ff2d 	bl	8003484 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 800362a:	79bb      	ldrb	r3, [r7, #6]
 800362c:	4619      	mov	r1, r3
 800362e:	480f      	ldr	r0, [pc, #60]	; (800366c <i2c_master_write+0x84>)
 8003630:	f7ff ff5b 	bl	80034ea <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8003634:	e00a      	b.n	800364c <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8003636:	480d      	ldr	r0, [pc, #52]	; (800366c <i2c_master_write+0x84>)
 8003638:	f7ff feca 	bl	80033d0 <LL_I2C_IsActiveFlag_TXIS>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	4619      	mov	r1, r3
 8003646:	4809      	ldr	r0, [pc, #36]	; (800366c <i2c_master_write+0x84>)
 8003648:	f7ff ff4f 	bl	80034ea <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800364c:	4807      	ldr	r0, [pc, #28]	; (800366c <i2c_master_write+0x84>)
 800364e:	f7ff fee5 	bl	800341c <LL_I2C_IsActiveFlag_STOP>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ee      	beq.n	8003636 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8003658:	4804      	ldr	r0, [pc, #16]	; (800366c <i2c_master_write+0x84>)
 800365a:	f7ff fef2 	bl	8003442 <LL_I2C_ClearFlag_STOP>
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bd90      	pop	{r4, r7, pc}
 8003666:	bf00      	nop
 8003668:	80002000 	.word	0x80002000
 800366c:	40005400 	.word	0x40005400

08003670 <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af02      	add	r7, sp, #8
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	4608      	mov	r0, r1
 800367a:	4611      	mov	r1, r2
 800367c:	461a      	mov	r2, r3
 800367e:	4603      	mov	r3, r0
 8003680:	70fb      	strb	r3, [r7, #3]
 8003682:	460b      	mov	r3, r1
 8003684:	70bb      	strb	r3, [r7, #2]
 8003686:	4613      	mov	r3, r2
 8003688:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 800368a:	4a30      	ldr	r2, [pc, #192]	; (800374c <i2c_master_read+0xdc>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6013      	str	r3, [r2, #0]

	if(read_flag)
 8003690:	7c3b      	ldrb	r3, [r7, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8003696:	78bb      	ldrb	r3, [r7, #2]
 8003698:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800369c:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800369e:	4b2c      	ldr	r3, [pc, #176]	; (8003750 <i2c_master_read+0xe0>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80036a4:	482b      	ldr	r0, [pc, #172]	; (8003754 <i2c_master_read+0xe4>)
 80036a6:	f7ff fe73 	bl	8003390 <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80036aa:	7879      	ldrb	r1, [r7, #1]
 80036ac:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <i2c_master_read+0xe8>)
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2301      	movs	r3, #1
 80036b8:	2200      	movs	r2, #0
 80036ba:	4826      	ldr	r0, [pc, #152]	; (8003754 <i2c_master_read+0xe4>)
 80036bc:	f7ff fee2 	bl	8003484 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80036c0:	e00a      	b.n	80036d8 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80036c2:	4824      	ldr	r0, [pc, #144]	; (8003754 <i2c_master_read+0xe4>)
 80036c4:	f7ff fe84 	bl	80033d0 <LL_I2C_IsActiveFlag_TXIS>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d004      	beq.n	80036d8 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80036ce:	78bb      	ldrb	r3, [r7, #2]
 80036d0:	4619      	mov	r1, r3
 80036d2:	4820      	ldr	r0, [pc, #128]	; (8003754 <i2c_master_read+0xe4>)
 80036d4:	f7ff ff09 	bl	80034ea <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80036d8:	481e      	ldr	r0, [pc, #120]	; (8003754 <i2c_master_read+0xe4>)
 80036da:	f7ff fe9f 	bl	800341c <LL_I2C_IsActiveFlag_STOP>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80036e4:	481b      	ldr	r0, [pc, #108]	; (8003754 <i2c_master_read+0xe4>)
 80036e6:	f7ff feac 	bl	8003442 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80036ea:	bf00      	nop
 80036ec:	4819      	ldr	r0, [pc, #100]	; (8003754 <i2c_master_read+0xe4>)
 80036ee:	f7ff fe95 	bl	800341c <LL_I2C_IsActiveFlag_STOP>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f9      	bne.n	80036ec <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80036f8:	7879      	ldrb	r1, [r7, #1]
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <i2c_master_read+0xec>)
 80036fe:	9201      	str	r2, [sp, #4]
 8003700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003704:	9200      	str	r2, [sp, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	4812      	ldr	r0, [pc, #72]	; (8003754 <i2c_master_read+0xe4>)
 800370a:	f7ff febb 	bl	8003484 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800370e:	bf00      	nop
 8003710:	4810      	ldr	r0, [pc, #64]	; (8003754 <i2c_master_read+0xe4>)
 8003712:	f7ff fe83 	bl	800341c <LL_I2C_IsActiveFlag_STOP>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f9      	beq.n	8003710 <i2c_master_read+0xa0>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800371c:	480d      	ldr	r0, [pc, #52]	; (8003754 <i2c_master_read+0xe4>)
 800371e:	f7ff fe90 	bl	8003442 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8003722:	480c      	ldr	r0, [pc, #48]	; (8003754 <i2c_master_read+0xe4>)
 8003724:	f7ff fe44 	bl	80033b0 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <i2c_master_read+0xe4>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4a09      	ldr	r2, [pc, #36]	; (8003754 <i2c_master_read+0xe4>)
 800372e:	f043 0310 	orr.w	r3, r3, #16
 8003732:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <i2c_master_read+0xf0>)
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <i2c_master_read+0xe0>)
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <i2c_master_read+0xdc>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	2000024c 	.word	0x2000024c
 8003750:	20000218 	.word	0x20000218
 8003754:	40005400 	.word	0x40005400
 8003758:	80002000 	.word	0x80002000
 800375c:	80002400 	.word	0x80002400
 8003760:	20000219 	.word	0x20000219

08003764 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8003764:	b598      	push	{r3, r4, r7, lr}
 8003766:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8003768:	4812      	ldr	r0, [pc, #72]	; (80037b4 <I2C1_EV_IRQHandler+0x50>)
 800376a:	f7ff fe44 	bl	80033f6 <LL_I2C_IsActiveFlag_RXNE>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <I2C1_EV_IRQHandler+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <I2C1_EV_IRQHandler+0x54>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <I2C1_EV_IRQHandler+0x58>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	1c59      	adds	r1, r3, #1
 8003780:	b2c8      	uxtb	r0, r1
 8003782:	490e      	ldr	r1, [pc, #56]	; (80037bc <I2C1_EV_IRQHandler+0x58>)
 8003784:	7008      	strb	r0, [r1, #0]
 8003786:	18d4      	adds	r4, r2, r3
 8003788:	480a      	ldr	r0, [pc, #40]	; (80037b4 <I2C1_EV_IRQHandler+0x50>)
 800378a:	f7ff fea1 	bl	80034d0 <LL_I2C_ReceiveData8>
 800378e:	4603      	mov	r3, r0
 8003790:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <I2C1_EV_IRQHandler+0x58>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b13      	cmp	r3, #19
 800379a:	d903      	bls.n	80037a4 <I2C1_EV_IRQHandler+0x40>
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <I2C1_EV_IRQHandler+0x58>)
 800379e:	2200      	movs	r2, #0
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e001      	b.n	80037a8 <I2C1_EV_IRQHandler+0x44>
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <I2C1_EV_IRQHandler+0x58>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <I2C1_EV_IRQHandler+0x5c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
	}
}
 80037ae:	bf00      	nop
 80037b0:	bd98      	pop	{r3, r4, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40005400 	.word	0x40005400
 80037b8:	2000024c 	.word	0x2000024c
 80037bc:	20000219 	.word	0x20000219
 80037c0:	20000218 	.word	0x20000218

080037c4 <NVIC_SetPriorityGrouping>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037d4:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <NVIC_SetPriorityGrouping+0x44>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e0:	4013      	ands	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037f6:	4a04      	ldr	r2, [pc, #16]	; (8003808 <NVIC_SetPriorityGrouping+0x44>)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	60d3      	str	r3, [r2, #12]
}
 80037fc:	bf00      	nop
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <LL_RCC_HSI_Enable+0x1c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <LL_RCC_HSI_Enable+0x1c>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6013      	str	r3, [r2, #0]
}
 800381c:	bf00      	nop
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <LL_RCC_HSI_IsReady+0x20>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b02      	cmp	r3, #2
 800383a:	bf0c      	ite	eq
 800383c:	2301      	moveq	r3, #1
 800383e:	2300      	movne	r3, #0
 8003840:	b2db      	uxtb	r3, r3
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40021000 	.word	0x40021000

08003850 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8003858:	4b07      	ldr	r3, [pc, #28]	; (8003878 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4904      	ldr	r1, [pc, #16]	; (8003878 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <LL_RCC_SetSysClkSource+0x24>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 0203 	bic.w	r2, r3, #3
 800388c:	4904      	ldr	r1, [pc, #16]	; (80038a0 <LL_RCC_SetSysClkSource+0x24>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40021000 	.word	0x40021000

080038a4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <LL_RCC_GetSysClkSource+0x18>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 030c 	and.w	r3, r3, #12
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40021000 	.word	0x40021000

080038c0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d0:	4904      	ldr	r1, [pc, #16]	; (80038e4 <LL_RCC_SetAHBPrescaler+0x24>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40021000 	.word	0x40021000

080038e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <LL_RCC_SetAPB1Prescaler+0x24>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f8:	4904      	ldr	r1, [pc, #16]	; (800390c <LL_RCC_SetAPB1Prescaler+0x24>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40021000 	.word	0x40021000

08003910 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <LL_RCC_SetAPB2Prescaler+0x24>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003920:	4904      	ldr	r1, [pc, #16]	; (8003934 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40021000 	.word	0x40021000

08003938 <LL_APB1_GRP1_EnableClock>:
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	4907      	ldr	r1, [pc, #28]	; (8003964 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4313      	orrs	r3, r2
 800394a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <LL_APB1_GRP1_EnableClock+0x2c>)
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4013      	ands	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003956:	68fb      	ldr	r3, [r7, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40021000 	.word	0x40021000

08003968 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003970:	4b08      	ldr	r3, [pc, #32]	; (8003994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	4907      	ldr	r1, [pc, #28]	; (8003994 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4313      	orrs	r3, r2
 800397a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <LL_APB2_GRP1_EnableClock+0x2c>)
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4013      	ands	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003986:	68fb      	ldr	r3, [r7, #12]
}
 8003988:	bf00      	nop
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40021000 	.word	0x40021000

08003998 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <LL_FLASH_SetLatency+0x24>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0207 	bic.w	r2, r3, #7
 80039a8:	4904      	ldr	r1, [pc, #16]	; (80039bc <LL_FLASH_SetLatency+0x24>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40022000 	.word	0x40022000

080039c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <LL_FLASH_GetLatency+0x18>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40022000 	.word	0x40022000

080039dc <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d106      	bne.n	80039f8 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80039ea:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <LL_SYSTICK_SetClkSource+0x34>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <LL_SYSTICK_SetClkSource+0x34>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 80039f6:	e005      	b.n	8003a04 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <LL_SYSTICK_SetClkSource+0x34>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a04      	ldr	r2, [pc, #16]	; (8003a10 <LL_SYSTICK_SetClkSource+0x34>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6013      	str	r3, [r2, #0]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e010 	.word	0xe000e010

08003a14 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <LL_SYSTICK_EnableIT+0x1c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <LL_SYSTICK_EnableIT+0x1c>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	e000e010 	.word	0xe000e010
 8003a34:	00000000 	.word	0x00000000

08003a38 <main>:
float temperature_out = 0, pressure_out = 0, altitude_out = 0;

char *cutDot(char *string);

int main(void)
{
 8003a38:	b5b0      	push	{r4, r5, r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af02      	add	r7, sp, #8

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7ff ff92 	bl	8003968 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003a44:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003a48:	f7ff ff76 	bl	8003938 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a4c:	2003      	movs	r0, #3
 8003a4e:	f7ff feb9 	bl	80037c4 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8003a52:	f000 f9c9 	bl	8003de8 <SystemClock_Config>

  MX_GPIO_Init();
 8003a56:	f7ff fb15 	bl	8003084 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003a5a:	f7ff fd55 	bl	8003508 <MX_I2C1_Init>

  setSegments();
 8003a5e:	f7fe fa4f 	bl	8001f00 <setSegments>
  setDigits();
 8003a62:	f7fe fa9b 	bl	8001f9c <setDigits>

  LL_mDelay(2000);
 8003a66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a6a:	f7fe f9a7 	bl	8001dbc <LL_mDelay>

  resetDigits();
 8003a6e:	f7fe fa75 	bl	8001f5c <resetDigits>
  resetSegments();
 8003a72:	f7fe fa17 	bl	8001ea4 <resetSegments>

  while(!lsm6ds0_init());
 8003a76:	bf00      	nop
 8003a78:	f000 fdf2 	bl	8004660 <lsm6ds0_init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0fa      	beq.n	8003a78 <main+0x40>
  while(!lps25hb_init());
 8003a82:	bf00      	nop
 8003a84:	f000 fecc 	bl	8004820 <lps25hb_init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0fa      	beq.n	8003a84 <main+0x4c>
  while(!hts221_init());
 8003a8e:	bf00      	nop
 8003a90:	f001 f8e2 	bl	8004c58 <hts221_init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0fa      	beq.n	8003a90 <main+0x58>
  while(!lis3mdl_init());
 8003a9a:	bf00      	nop
 8003a9c:	f000 ff24 	bl	80048e8 <lis3mdl_init>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0fa      	beq.n	8003a9c <main+0x64>

  MX_TIM3_Init();
 8003aa6:	f000 fd1f 	bl	80044e8 <MX_TIM3_Init>

  while (1)
  {

	  switch(state)
 8003aaa:	4b9d      	ldr	r3, [pc, #628]	; (8003d20 <main+0x2e8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f200 809c 	bhi.w	8003bec <main+0x1b4>
 8003ab4:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <main+0x84>)
 8003ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aba:	bf00      	nop
 8003abc:	08003acd 	.word	0x08003acd
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003b13 	.word	0x08003b13
 8003ac8:	08003b3f 	.word	0x08003b3f
	  {
	  	  case 0:
	  		  temperature_out = hts221_get_temp();
 8003acc:	f000 ff9c 	bl	8004a08 <hts221_get_temp>
 8003ad0:	eef0 7a40 	vmov.f32	s15, s0
 8003ad4:	4b93      	ldr	r3, [pc, #588]	; (8003d24 <main+0x2ec>)
 8003ad6:	edc3 7a00 	vstr	s15, [r3]
	  		  snprintf(info, sizeof(info), "tEMP_%2.1f", temperature_out);
 8003ada:	4b92      	ldr	r3, [pc, #584]	; (8003d24 <main+0x2ec>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fd32 	bl	8000548 <__aeabi_f2d>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	e9cd 2300 	strd	r2, r3, [sp]
 8003aec:	4a8e      	ldr	r2, [pc, #568]	; (8003d28 <main+0x2f0>)
 8003aee:	210c      	movs	r1, #12
 8003af0:	488e      	ldr	r0, [pc, #568]	; (8003d2c <main+0x2f4>)
 8003af2:	f001 fd6b 	bl	80055cc <sniprintf>
	  		  break;
 8003af6:	e079      	b.n	8003bec <main+0x1b4>
	  	  case 1:
	  		  humidity_out = hts221_get_humid();
 8003af8:	f001 f826 	bl	8004b48 <hts221_get_humid>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4a8c      	ldr	r2, [pc, #560]	; (8003d30 <main+0x2f8>)
 8003b00:	6013      	str	r3, [r2, #0]
	  		  snprintf(info, sizeof(info), "HUM_%d", humidity_out);
 8003b02:	4b8b      	ldr	r3, [pc, #556]	; (8003d30 <main+0x2f8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a8b      	ldr	r2, [pc, #556]	; (8003d34 <main+0x2fc>)
 8003b08:	210c      	movs	r1, #12
 8003b0a:	4888      	ldr	r0, [pc, #544]	; (8003d2c <main+0x2f4>)
 8003b0c:	f001 fd5e 	bl	80055cc <sniprintf>
	  		  break;
 8003b10:	e06c      	b.n	8003bec <main+0x1b4>
	  	  case 2:
	  		  pressure_out = lps25hb_get_pressure();
 8003b12:	f000 fe53 	bl	80047bc <lps25hb_get_pressure>
 8003b16:	eef0 7a40 	vmov.f32	s15, s0
 8003b1a:	4b87      	ldr	r3, [pc, #540]	; (8003d38 <main+0x300>)
 8003b1c:	edc3 7a00 	vstr	s15, [r3]
	  		  snprintf(info, sizeof(info), "bAr_%4.2f", pressure_out);
 8003b20:	4b85      	ldr	r3, [pc, #532]	; (8003d38 <main+0x300>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fd0f 	bl	8000548 <__aeabi_f2d>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8003b32:	4a82      	ldr	r2, [pc, #520]	; (8003d3c <main+0x304>)
 8003b34:	210c      	movs	r1, #12
 8003b36:	487d      	ldr	r0, [pc, #500]	; (8003d2c <main+0x2f4>)
 8003b38:	f001 fd48 	bl	80055cc <sniprintf>
	  		  break;
 8003b3c:	e056      	b.n	8003bec <main+0x1b4>
	  	  case 3:
	  		  pressure_out = lps25hb_get_pressure();
 8003b3e:	f000 fe3d 	bl	80047bc <lps25hb_get_pressure>
 8003b42:	eef0 7a40 	vmov.f32	s15, s0
 8003b46:	4b7c      	ldr	r3, [pc, #496]	; (8003d38 <main+0x300>)
 8003b48:	edc3 7a00 	vstr	s15, [r3]
	  		  temperature_out = lps25hb_get_temp();
 8003b4c:	f000 fe02 	bl	8004754 <lps25hb_get_temp>
 8003b50:	eef0 7a40 	vmov.f32	s15, s0
 8003b54:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <main+0x2ec>)
 8003b56:	edc3 7a00 	vstr	s15, [r3]
	  		  altitude_out = ((powf((1013.25/pressure_out),1/5.257)-1)*(temperature_out+273.15))/0.0065;
 8003b5a:	4b77      	ldr	r3, [pc, #476]	; (8003d38 <main+0x300>)
 8003b5c:	edd3 7a00 	vldr	s15, [r3]
 8003b60:	eddf 6a77 	vldr	s13, [pc, #476]	; 8003d40 <main+0x308>
 8003b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b68:	eddf 0a76 	vldr	s1, [pc, #472]	; 8003d44 <main+0x30c>
 8003b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8003b70:	f003 ff6c 	bl	8007a4c <powf>
 8003b74:	eef0 7a40 	vmov.f32	s15, s0
 8003b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b80:	ee17 0a90 	vmov	r0, s15
 8003b84:	f7fc fce0 	bl	8000548 <__aeabi_f2d>
 8003b88:	4604      	mov	r4, r0
 8003b8a:	460d      	mov	r5, r1
 8003b8c:	4b65      	ldr	r3, [pc, #404]	; (8003d24 <main+0x2ec>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fcd9 	bl	8000548 <__aeabi_f2d>
 8003b96:	a35e      	add	r3, pc, #376	; (adr r3, 8003d10 <main+0x2d8>)
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f7fc fb76 	bl	800028c <__adddf3>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f7fc fd26 	bl	80005f8 <__aeabi_dmul>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	a358      	add	r3, pc, #352	; (adr r3, 8003d18 <main+0x2e0>)
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f7fc fe47 	bl	800084c <__aeabi_ddiv>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fc ffef 	bl	8000ba8 <__aeabi_d2f>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4a5e      	ldr	r2, [pc, #376]	; (8003d48 <main+0x310>)
 8003bce:	6013      	str	r3, [r2, #0]
	  		  snprintf(info, sizeof(info), "ALt_%4.1f", altitude_out);
 8003bd0:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <main+0x310>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7fc fcb7 	bl	8000548 <__aeabi_f2d>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	e9cd 2300 	strd	r2, r3, [sp]
 8003be2:	4a5a      	ldr	r2, [pc, #360]	; (8003d4c <main+0x314>)
 8003be4:	210c      	movs	r1, #12
 8003be6:	4851      	ldr	r0, [pc, #324]	; (8003d2c <main+0x2f4>)
 8003be8:	f001 fcf0 	bl	80055cc <sniprintf>
	  }

	  dot_found = 0;
 8003bec:	4b58      	ldr	r3, [pc, #352]	; (8003d50 <main+0x318>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

	  for(int i = 0; i <= strlen(info); i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e046      	b.n	8003c86 <main+0x24e>
	  	{
	  		if(info[i] == '.')
 8003bf8:	4a4c      	ldr	r2, [pc, #304]	; (8003d2c <main+0x2f4>)
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b2e      	cmp	r3, #46	; 0x2e
 8003c02:	d130      	bne.n	8003c66 <main+0x22e>
	  		{
	  			dot_pos = i;
 8003c04:	4a53      	ldr	r2, [pc, #332]	; (8003d54 <main+0x31c>)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	6013      	str	r3, [r2, #0]
	  			for(int j = 0; j<i; j++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	e00b      	b.n	8003c28 <main+0x1f0>
	  			{
	  				newstring[j] = info[j];
 8003c10:	4a46      	ldr	r2, [pc, #280]	; (8003d2c <main+0x2f4>)
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	7819      	ldrb	r1, [r3, #0]
 8003c18:	4a4f      	ldr	r2, [pc, #316]	; (8003d58 <main+0x320>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	460a      	mov	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]
	  			for(int j = 0; j<i; j++)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	3301      	adds	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dbef      	blt.n	8003c10 <main+0x1d8>
	  			}

	  			for(int k = i; k < (strlen(info) - 1); k++)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	e00b      	b.n	8003c4e <main+0x216>
	  			{
	  				newstring[k] = info[k+1];
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <main+0x2f4>)
 8003c3c:	5cd1      	ldrb	r1, [r2, r3]
 8003c3e:	4a46      	ldr	r2, [pc, #280]	; (8003d58 <main+0x320>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	460a      	mov	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
	  			for(int k = i; k < (strlen(info) - 1); k++)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4837      	ldr	r0, [pc, #220]	; (8003d2c <main+0x2f4>)
 8003c50:	f7fc fabe 	bl	80001d0 <strlen>
 8003c54:	4603      	mov	r3, r0
 8003c56:	1e5a      	subs	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d8eb      	bhi.n	8003c36 <main+0x1fe>
	  			}

	  			dot_found = 1;
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	; (8003d50 <main+0x318>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e00c      	b.n	8003c80 <main+0x248>
	  		}
	  		else if(dot_found == 0)
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <main+0x318>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <main+0x248>
	  		{
	  			newstring[i] = info[i];
 8003c6e:	4a2f      	ldr	r2, [pc, #188]	; (8003d2c <main+0x2f4>)
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4413      	add	r3, r2
 8003c74:	7819      	ldrb	r1, [r3, #0]
 8003c76:	4a38      	ldr	r2, [pc, #224]	; (8003d58 <main+0x320>)
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i <= strlen(info); i++)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	3301      	adds	r3, #1
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	4829      	ldr	r0, [pc, #164]	; (8003d2c <main+0x2f4>)
 8003c88:	f7fc faa2 	bl	80001d0 <strlen>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d2b1      	bcs.n	8003bf8 <main+0x1c0>
	  		}

	  	}


	  if(left_to_right==1){
 8003c94:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <main+0x324>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d12f      	bne.n	8003cfc <main+0x2c4>
		  for(int i=0; i<=3;i++){
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	e00d      	b.n	8003cbe <main+0x286>
			  display[i]=newstring[position+i];
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <main+0x328>)
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4413      	add	r3, r2
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <main+0x320>)
 8003cac:	5cd1      	ldrb	r1, [r2, r3]
 8003cae:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <main+0x32c>)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	460a      	mov	r2, r1
 8003cb6:	701a      	strb	r2, [r3, #0]
		  for(int i=0; i<=3;i++){
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	ddee      	ble.n	8003ca2 <main+0x26a>
		  }
		  dyn_pos = dot_pos - (position + 3) + 2;
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <main+0x31c>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <main+0x328>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3303      	adds	r3, #3
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	4a25      	ldr	r2, [pc, #148]	; (8003d68 <main+0x330>)
 8003cd4:	6013      	str	r3, [r2, #0]
		  position=position+1;
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <main+0x328>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <main+0x328>)
 8003cde:	6013      	str	r3, [r2, #0]
		  if(position+4 >= (strlen(newstring)/sizeof(char))){
 8003ce0:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <main+0x328>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	461c      	mov	r4, r3
 8003ce8:	481b      	ldr	r0, [pc, #108]	; (8003d58 <main+0x320>)
 8003cea:	f7fc fa71 	bl	80001d0 <strlen>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	429c      	cmp	r4, r3
 8003cf2:	d361      	bcc.n	8003db8 <main+0x380>
			  left_to_right=0;
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <main+0x324>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	e05d      	b.n	8003db8 <main+0x380>
		  }
	  }
	  else if(left_to_right==0){
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <main+0x324>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d159      	bne.n	8003db8 <main+0x380>
		  for(int i=3; i>=0;i--){
 8003d04:	2303      	movs	r3, #3
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	e03e      	b.n	8003d88 <main+0x350>
 8003d0a:	bf00      	nop
 8003d0c:	f3af 8000 	nop.w
 8003d10:	66666666 	.word	0x66666666
 8003d14:	40711266 	.word	0x40711266
 8003d18:	76c8b439 	.word	0x76c8b439
 8003d1c:	3f7a9fbe 	.word	0x3f7a9fbe
 8003d20:	2000021c 	.word	0x2000021c
 8003d24:	20000234 	.word	0x20000234
 8003d28:	080082f0 	.word	0x080082f0
 8003d2c:	20000250 	.word	0x20000250
 8003d30:	20000230 	.word	0x20000230
 8003d34:	080082fc 	.word	0x080082fc
 8003d38:	20000238 	.word	0x20000238
 8003d3c:	08008304 	.word	0x08008304
 8003d40:	447d5000 	.word	0x447d5000
 8003d44:	3e42c9b4 	.word	0x3e42c9b4
 8003d48:	2000023c 	.word	0x2000023c
 8003d4c:	08008310 	.word	0x08008310
 8003d50:	20000224 	.word	0x20000224
 8003d54:	20000220 	.word	0x20000220
 8003d58:	20000268 	.word	0x20000268
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000228 	.word	0x20000228
 8003d64:	2000025c 	.word	0x2000025c
 8003d68:	2000022c 	.word	0x2000022c
			  display[i]=newstring[position+i];
 8003d6c:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <main+0x398>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <main+0x39c>)
 8003d76:	5cd1      	ldrb	r1, [r2, r3]
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <main+0x3a0>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	460a      	mov	r2, r1
 8003d80:	701a      	strb	r2, [r3, #0]
		  for(int i=3; i>=0;i--){
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	daee      	bge.n	8003d6c <main+0x334>
		  }
		  dyn_pos = dot_pos - (position + 3) + 2;
 8003d8e:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <main+0x3a4>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b0f      	ldr	r3, [pc, #60]	; (8003dd0 <main+0x398>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3303      	adds	r3, #3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <main+0x3a8>)
 8003d9e:	6013      	str	r3, [r2, #0]
		  position=position-1;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <main+0x398>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <main+0x398>)
 8003da8:	6013      	str	r3, [r2, #0]
		  if(position == 0){
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <main+0x398>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <main+0x380>
			  left_to_right=1;
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <main+0x3ac>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
		  }
	  }

	  displayName(display,dyn_pos);
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <main+0x3a8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4806      	ldr	r0, [pc, #24]	; (8003dd8 <main+0x3a0>)
 8003dc0:	f7fe fdb2 	bl	8002928 <displayName>
	  LL_mDelay(500);
 8003dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003dc8:	f7fd fff8 	bl	8001dbc <LL_mDelay>
	  switch(state)
 8003dcc:	e66d      	b.n	8003aaa <main+0x72>
 8003dce:	bf00      	nop
 8003dd0:	20000228 	.word	0x20000228
 8003dd4:	20000268 	.word	0x20000268
 8003dd8:	2000025c 	.word	0x2000025c
 8003ddc:	20000220 	.word	0x20000220
 8003de0:	2000022c 	.word	0x2000022c
 8003de4:	20000000 	.word	0x20000000

08003de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7ff fdd3 	bl	8003998 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003df2:	f7ff fde5 	bl	80039c0 <LL_FLASH_GetLatency>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8003dfc:	f000 f846 	bl	8003e8c <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8003e00:	f7ff fd04 	bl	800380c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003e04:	bf00      	nop
 8003e06:	f7ff fd11 	bl	800382c <LL_RCC_HSI_IsReady>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d1fa      	bne.n	8003e06 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003e10:	2010      	movs	r0, #16
 8003e12:	f7ff fd1d 	bl	8003850 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7ff fd52 	bl	80038c0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f7ff fd63 	bl	80038e8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003e22:	2000      	movs	r0, #0
 8003e24:	f7ff fd74 	bl	8003910 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003e28:	2000      	movs	r0, #0
 8003e2a:	f7ff fd27 	bl	800387c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003e2e:	bf00      	nop
 8003e30:	f7ff fd38 	bl	80038a4 <LL_RCC_GetSysClkSource>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1fa      	bne.n	8003e30 <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 8003e3a:	4806      	ldr	r0, [pc, #24]	; (8003e54 <SystemClock_Config+0x6c>)
 8003e3c:	f7fd ffb0 	bl	8001da0 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003e40:	2004      	movs	r0, #4
 8003e42:	f7ff fdcb 	bl	80039dc <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8003e46:	f7ff fde5 	bl	8003a14 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 8003e4a:	4802      	ldr	r0, [pc, #8]	; (8003e54 <SystemClock_Config+0x6c>)
 8003e4c:	f7fd ffdc 	bl	8001e08 <LL_SetSystemCoreClock>
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	007a1200 	.word	0x007a1200

08003e58 <setState>:




int setState(int new_state)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	state = new_state;
 8003e60:	4a07      	ldr	r2, [pc, #28]	; (8003e80 <setState+0x28>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6013      	str	r3, [r2, #0]
	left_to_right = 1;
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <setState+0x2c>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
	position = 0;
 8003e6c:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <setState+0x30>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
}
 8003e72:	bf00      	nop
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	2000021c 	.word	0x2000021c
 8003e84:	20000000 	.word	0x20000000
 8003e88:	20000228 	.word	0x20000228

08003e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2301      	moveq	r3, #1
 8003eb4:	2300      	movne	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003ed0:	4a04      	ldr	r2, [pc, #16]	; (8003ee4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6153      	str	r3, [r2, #20]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010400 	.word	0x40010400

08003ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003efa:	e7fe      	b.n	8003efa <HardFault_Handler+0x4>

08003efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f00:	e7fe      	b.n	8003f00 <MemManage_Handler+0x4>

08003f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f06:	e7fe      	b.n	8003f06 <BusFault_Handler+0x4>

08003f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <UsageFault_Handler+0x4>

08003f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <SysTick_Handler+0x20>)
 8003f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f42:	1c50      	adds	r0, r2, #1
 8003f44:	f143 0100 	adc.w	r1, r3, #0
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <SysTick_Handler+0x20>)
 8003f4a:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	20000208 	.word	0x20000208

08003f5c <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8003f62:	2314      	movs	r3, #20
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	231e      	movs	r3, #30
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	4811      	ldr	r0, [pc, #68]	; (8003fb4 <EXTI3_IRQHandler+0x58>)
 8003f6e:	f000 f825 	bl	8003fbc <checkButtonState>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d011      	beq.n	8003f9c <EXTI3_IRQHandler+0x40>
						GPIO_PIN_BUTTON,
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		if(state > 2)
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <EXTI3_IRQHandler+0x5c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	dd03      	ble.n	8003f88 <EXTI3_IRQHandler+0x2c>
		{
			setState(0);
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7ff ff69 	bl	8003e58 <setState>
 8003f86:	e009      	b.n	8003f9c <EXTI3_IRQHandler+0x40>
		}
		else
		{
			setState(++state);
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <EXTI3_IRQHandler+0x5c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <EXTI3_IRQHandler+0x5c>)
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <EXTI3_IRQHandler+0x5c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff5e 	bl	8003e58 <setState>
	}

	/* Clear EXTI3 pending register flag */

		//type your code for pending register flag clear here:
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8003f9c:	2008      	movs	r0, #8
 8003f9e:	f7ff ff7d 	bl	8003e9c <LL_EXTI_IsActiveFlag_0_31>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <EXTI3_IRQHandler+0x52>
	{
		LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 8003fa8:	2008      	movs	r0, #8
 8003faa:	f7ff ff8d 	bl	8003ec8 <LL_EXTI_ClearFlag_0_31>
	}
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	48000400 	.word	0x48000400
 8003fb8:	2000021c 	.word	0x2000021c

08003fbc <checkButtonState>:

uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	70fb      	strb	r3, [r7, #3]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	70bb      	strb	r3, [r7, #2]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	707b      	strb	r3, [r7, #1]
		else
		{
			return 0;
		} */

	uint8_t button_state = 0, it = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73bb      	strb	r3, [r7, #14]

	    while(it < samples_window)
 8003fde:	e01b      	b.n	8004018 <checkButtonState+0x5c>
	    {
	        if((!(PORT->IDR & (1 << PIN)) == edge) /*LL_GPIO_IsInputPinSet(PORT, PIN)*/)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf0c      	ite	eq
 8003ff2:	2301      	moveq	r3, #1
 8003ff4:	2300      	movne	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	78bb      	ldrb	r3, [r7, #2]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d103      	bne.n	8004008 <checkButtonState+0x4c>
	        {
	            button_state += 1;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	3301      	adds	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	e001      	b.n	800400c <checkButtonState+0x50>
	        }
	        else
	        {
	            button_state = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
	        }

	        it++;
 800400c:	7bbb      	ldrb	r3, [r7, #14]
 800400e:	3301      	adds	r3, #1
 8004010:	73bb      	strb	r3, [r7, #14]
	        LL_mDelay(1);
 8004012:	2001      	movs	r0, #1
 8004014:	f7fd fed2 	bl	8001dbc <LL_mDelay>
	    while(it < samples_window)
 8004018:	7bba      	ldrb	r2, [r7, #14]
 800401a:	787b      	ldrb	r3, [r7, #1]
 800401c:	429a      	cmp	r2, r3
 800401e:	d3df      	bcc.n	8003fe0 <checkButtonState+0x24>
	    }

	    if(button_state >= samples_required)
 8004020:	7bfa      	ldrb	r2, [r7, #15]
 8004022:	7e3b      	ldrb	r3, [r7, #24]
 8004024:	429a      	cmp	r2, r3
 8004026:	d301      	bcc.n	800402c <checkButtonState+0x70>
	    {
	        return 1;
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <checkButtonState+0x72>
	    }

	    else
	    {
	        return 0;
 800402c:	2300      	movs	r3, #0
	    }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
	return 1;
 800403a:	2301      	movs	r3, #1
}
 800403c:	4618      	mov	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <_kill>:

int _kill(int pid, int sig)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004050:	f000 fe20 	bl	8004c94 <__errno>
 8004054:	4603      	mov	r3, r0
 8004056:	2216      	movs	r2, #22
 8004058:	601a      	str	r2, [r3, #0]
	return -1;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <_exit>:

void _exit (int status)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b082      	sub	sp, #8
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800406e:	f04f 31ff 	mov.w	r1, #4294967295
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ffe7 	bl	8004046 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004078:	e7fe      	b.n	8004078 <_exit+0x12>

0800407a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b086      	sub	sp, #24
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e00a      	b.n	80040a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800408c:	f3af 8000 	nop.w
 8004090:	4601      	mov	r1, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	60ba      	str	r2, [r7, #8]
 8004098:	b2ca      	uxtb	r2, r1
 800409a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3301      	adds	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	dbf0      	blt.n	800408c <_read+0x12>
	}

return len;
 80040aa:	687b      	ldr	r3, [r7, #4]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	e009      	b.n	80040da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	60ba      	str	r2, [r7, #8]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3301      	adds	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	429a      	cmp	r2, r3
 80040e0:	dbf1      	blt.n	80040c6 <_write+0x12>
	}
	return len;
 80040e2:	687b      	ldr	r3, [r7, #4]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <_close>:

int _close(int file)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	return -1;
 80040f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004114:	605a      	str	r2, [r3, #4]
	return 0;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <_isatty>:

int _isatty(int file)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	return 1;
 800412c:	2301      	movs	r3, #1
}
 800412e:	4618      	mov	r0, r3
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
	return 0;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <_sbrk+0x50>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <_sbrk+0x16>
		heap_end = &end;
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <_sbrk+0x50>)
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <_sbrk+0x54>)
 8004168:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800416a:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <_sbrk+0x50>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004170:	4b0c      	ldr	r3, [pc, #48]	; (80041a4 <_sbrk+0x50>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	466a      	mov	r2, sp
 800417a:	4293      	cmp	r3, r2
 800417c:	d907      	bls.n	800418e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800417e:	f000 fd89 	bl	8004c94 <__errno>
 8004182:	4603      	mov	r3, r0
 8004184:	220c      	movs	r2, #12
 8004186:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004188:	f04f 33ff 	mov.w	r3, #4294967295
 800418c:	e006      	b.n	800419c <_sbrk+0x48>
	}

	heap_end += incr;
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <_sbrk+0x50>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	4a03      	ldr	r2, [pc, #12]	; (80041a4 <_sbrk+0x50>)
 8004198:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800419a:	68fb      	ldr	r3, [r7, #12]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000240 	.word	0x20000240
 80041a8:	20000288 	.word	0x20000288

080041ac <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041b0:	4b1f      	ldr	r3, [pc, #124]	; (8004230 <SystemInit+0x84>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b6:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <SystemInit+0x84>)
 80041b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80041c0:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <SystemInit+0x88>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <SystemInit+0x88>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <SystemInit+0x88>)
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	4918      	ldr	r1, [pc, #96]	; (8004234 <SystemInit+0x88>)
 80041d2:	4b19      	ldr	r3, [pc, #100]	; (8004238 <SystemInit+0x8c>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80041d8:	4b16      	ldr	r3, [pc, #88]	; (8004234 <SystemInit+0x88>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <SystemInit+0x88>)
 80041de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <SystemInit+0x88>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a11      	ldr	r2, [pc, #68]	; (8004234 <SystemInit+0x88>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80041f4:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <SystemInit+0x88>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	4a0e      	ldr	r2, [pc, #56]	; (8004234 <SystemInit+0x88>)
 80041fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80041fe:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <SystemInit+0x88>)
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	4a0b      	ldr	r2, [pc, #44]	; (8004234 <SystemInit+0x88>)
 8004206:	f023 030f 	bic.w	r3, r3, #15
 800420a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <SystemInit+0x88>)
 800420e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004210:	4908      	ldr	r1, [pc, #32]	; (8004234 <SystemInit+0x88>)
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <SystemInit+0x90>)
 8004214:	4013      	ands	r3, r2
 8004216:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <SystemInit+0x88>)
 800421a:	2200      	movs	r2, #0
 800421c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800421e:	4b04      	ldr	r3, [pc, #16]	; (8004230 <SystemInit+0x84>)
 8004220:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004224:	609a      	str	r2, [r3, #8]
#endif
}
 8004226:	bf00      	nop
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00
 8004234:	40021000 	.word	0x40021000
 8004238:	f87fc00c 	.word	0xf87fc00c
 800423c:	ff00fccc 	.word	0xff00fccc

08004240 <NVIC_GetPriorityGrouping>:
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <NVIC_GetPriorityGrouping+0x18>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	0a1b      	lsrs	r3, r3, #8
 800424a:	f003 0307 	and.w	r3, r3, #7
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <NVIC_EnableIRQ>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004266:	79fb      	ldrb	r3, [r7, #7]
 8004268:	f003 021f 	and.w	r2, r3, #31
 800426c:	4907      	ldr	r1, [pc, #28]	; (800428c <NVIC_EnableIRQ+0x30>)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2001      	movs	r0, #1
 8004276:	fa00 f202 	lsl.w	r2, r0, r2
 800427a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	e000e100 	.word	0xe000e100

08004290 <NVIC_SetPriority>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800429c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	da0b      	bge.n	80042bc <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	490c      	ldr	r1, [pc, #48]	; (80042dc <NVIC_SetPriority+0x4c>)
 80042aa:	79fb      	ldrb	r3, [r7, #7]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	3b04      	subs	r3, #4
 80042b2:	0112      	lsls	r2, r2, #4
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	440b      	add	r3, r1
 80042b8:	761a      	strb	r2, [r3, #24]
}
 80042ba:	e009      	b.n	80042d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	4907      	ldr	r1, [pc, #28]	; (80042e0 <NVIC_SetPriority+0x50>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000ed00 	.word	0xe000ed00
 80042e0:	e000e100 	.word	0xe000e100

080042e4 <NVIC_EncodePriority>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	b089      	sub	sp, #36	; 0x24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f1c3 0307 	rsb	r3, r3, #7
 80042fe:	2b04      	cmp	r3, #4
 8004300:	bf28      	it	cs
 8004302:	2304      	movcs	r3, #4
 8004304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	3304      	adds	r3, #4
 800430a:	2b06      	cmp	r3, #6
 800430c:	d902      	bls.n	8004314 <NVIC_EncodePriority+0x30>
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3b03      	subs	r3, #3
 8004312:	e000      	b.n	8004316 <NVIC_EncodePriority+0x32>
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	f04f 32ff 	mov.w	r2, #4294967295
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43da      	mvns	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	401a      	ands	r2, r3
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800432c:	f04f 31ff 	mov.w	r1, #4294967295
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	43d9      	mvns	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800433c:	4313      	orrs	r3, r2
}
 800433e:	4618      	mov	r0, r3
 8004340:	3724      	adds	r7, #36	; 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <LL_APB1_GRP1_EnableClock>:
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004354:	4b08      	ldr	r3, [pc, #32]	; (8004378 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	4907      	ldr	r1, [pc, #28]	; (8004378 <LL_APB1_GRP1_EnableClock+0x2c>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4313      	orrs	r3, r2
 800435e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004360:	4b05      	ldr	r3, [pc, #20]	; (8004378 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40021000 	.word	0x40021000

0800437c <LL_TIM_EnableCounter>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	601a      	str	r2, [r3, #0]
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_TIM_EnableARRPreload>:
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_TIM_OC_DisableFast>:
{
 80043bc:	b4b0      	push	{r4, r5, r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d028      	beq.n	800441e <LL_TIM_OC_DisableFast+0x62>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d023      	beq.n	800441a <LL_TIM_OC_DisableFast+0x5e>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d01e      	beq.n	8004416 <LL_TIM_OC_DisableFast+0x5a>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b40      	cmp	r3, #64	; 0x40
 80043dc:	d019      	beq.n	8004412 <LL_TIM_OC_DisableFast+0x56>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e4:	d013      	beq.n	800440e <LL_TIM_OC_DisableFast+0x52>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d00d      	beq.n	800440a <LL_TIM_OC_DisableFast+0x4e>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	d007      	beq.n	8004406 <LL_TIM_OC_DisableFast+0x4a>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d101      	bne.n	8004402 <LL_TIM_OC_DisableFast+0x46>
 80043fe:	2307      	movs	r3, #7
 8004400:	e00e      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 8004402:	2308      	movs	r3, #8
 8004404:	e00c      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 8004406:	2306      	movs	r3, #6
 8004408:	e00a      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 800440a:	2305      	movs	r3, #5
 800440c:	e008      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 800440e:	2304      	movs	r3, #4
 8004410:	e006      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 8004412:	2303      	movs	r3, #3
 8004414:	e004      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 8004416:	2302      	movs	r3, #2
 8004418:	e002      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_TIM_OC_DisableFast+0x64>
 800441e:	2300      	movs	r3, #0
 8004420:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3318      	adds	r3, #24
 8004426:	461a      	mov	r2, r3
 8004428:	4629      	mov	r1, r5
 800442a:	4b09      	ldr	r3, [pc, #36]	; (8004450 <LL_TIM_OC_DisableFast+0x94>)
 800442c:	5c5b      	ldrb	r3, [r3, r1]
 800442e:	4413      	add	r3, r2
 8004430:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	4629      	mov	r1, r5
 8004436:	4b07      	ldr	r3, [pc, #28]	; (8004454 <LL_TIM_OC_DisableFast+0x98>)
 8004438:	5c5b      	ldrb	r3, [r3, r1]
 800443a:	4619      	mov	r1, r3
 800443c:	2304      	movs	r3, #4
 800443e:	408b      	lsls	r3, r1
 8004440:	43db      	mvns	r3, r3
 8004442:	4013      	ands	r3, r2
 8004444:	6023      	str	r3, [r4, #0]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bcb0      	pop	{r4, r5, r7}
 800444e:	4770      	bx	lr
 8004450:	0800831c 	.word	0x0800831c
 8004454:	08008328 	.word	0x08008328

08004458 <LL_TIM_SetClockSource>:
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <LL_TIM_SetTriggerOutput>:
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	605a      	str	r2, [r3, #4]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_TIM_DisableMasterSlaveMode>:
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_TIM_EnableIT_UPDATE>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	60da      	str	r2, [r3, #12]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08e      	sub	sp, #56	; 0x38
 80044ec:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80044ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	605a      	str	r2, [r3, #4]
 80044f8:	609a      	str	r2, [r3, #8]
 80044fa:	60da      	str	r2, [r3, #12]
 80044fc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80044fe:	1d3b      	adds	r3, r7, #4
 8004500:	2220      	movs	r2, #32
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fbef 	bl	8004ce8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800450a:	2002      	movs	r0, #2
 800450c:	f7ff ff1e 	bl	800434c <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 8004510:	f7ff fe96 	bl	8004240 <NVIC_GetPriorityGrouping>
 8004514:	4603      	mov	r3, r0
 8004516:	2202      	movs	r2, #2
 8004518:	2102      	movs	r1, #2
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fee2 	bl	80042e4 <NVIC_EncodePriority>
 8004520:	4603      	mov	r3, r0
 8004522:	4619      	mov	r1, r3
 8004524:	201d      	movs	r0, #29
 8004526:	f7ff feb3 	bl	8004290 <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800452a:	201d      	movs	r0, #29
 800452c:	f7ff fe96 	bl	800425c <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 8004530:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8004534:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004536:	2300      	movs	r3, #0
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 800453a:	2313      	movs	r3, #19
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800453e:	2300      	movs	r3, #0
 8004540:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8004542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004546:	4619      	mov	r1, r3
 8004548:	4817      	ldr	r0, [pc, #92]	; (80045a8 <MX_TIM3_Init+0xc0>)
 800454a:	f7fd f883 	bl	8001654 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 800454e:	4816      	ldr	r0, [pc, #88]	; (80045a8 <MX_TIM3_Init+0xc0>)
 8004550:	f7ff ff24 	bl	800439c <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004554:	2100      	movs	r1, #0
 8004556:	4814      	ldr	r0, [pc, #80]	; (80045a8 <MX_TIM3_Init+0xc0>)
 8004558:	f7ff ff7e 	bl	8004458 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800455c:	2310      	movs	r3, #16
 800455e:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004560:	2300      	movs	r3, #0
 8004562:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004570:	1d3b      	adds	r3, r7, #4
 8004572:	461a      	mov	r2, r3
 8004574:	2101      	movs	r1, #1
 8004576:	480c      	ldr	r0, [pc, #48]	; (80045a8 <MX_TIM3_Init+0xc0>)
 8004578:	f7fd f8e0 	bl	800173c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800457c:	2101      	movs	r1, #1
 800457e:	480a      	ldr	r0, [pc, #40]	; (80045a8 <MX_TIM3_Init+0xc0>)
 8004580:	f7ff ff1c 	bl	80043bc <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004584:	2100      	movs	r1, #0
 8004586:	4808      	ldr	r0, [pc, #32]	; (80045a8 <MX_TIM3_Init+0xc0>)
 8004588:	f7ff ff7b 	bl	8004482 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 800458c:	4806      	ldr	r0, [pc, #24]	; (80045a8 <MX_TIM3_Init+0xc0>)
 800458e:	f7ff ff8b 	bl	80044a8 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 8004592:	4805      	ldr	r0, [pc, #20]	; (80045a8 <MX_TIM3_Init+0xc0>)
 8004594:	f7ff ff98 	bl	80044c8 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 8004598:	4803      	ldr	r0, [pc, #12]	; (80045a8 <MX_TIM3_Init+0xc0>)
 800459a:	f7ff feef 	bl	800437c <LL_TIM_EnableCounter>

}
 800459e:	bf00      	nop
 80045a0:	3738      	adds	r7, #56	; 0x38
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40000400 	.word	0x40000400

080045ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80045b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80045b2:	e003      	b.n	80045bc <LoopCopyDataInit>

080045b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80045b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80045b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80045ba:	3104      	adds	r1, #4

080045bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80045bc:	480b      	ldr	r0, [pc, #44]	; (80045ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80045c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80045c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80045c4:	d3f6      	bcc.n	80045b4 <CopyDataInit>
	ldr	r2, =_sbss
 80045c6:	4a0b      	ldr	r2, [pc, #44]	; (80045f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80045c8:	e002      	b.n	80045d0 <LoopFillZerobss>

080045ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80045ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80045cc:	f842 3b04 	str.w	r3, [r2], #4

080045d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <LoopForever+0x16>)
	cmp	r2, r3
 80045d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80045d4:	d3f9      	bcc.n	80045ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80045d6:	f7ff fde9 	bl	80041ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045da:	f000 fb61 	bl	8004ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045de:	f7ff fa2b 	bl	8003a38 <main>

080045e2 <LoopForever>:

LoopForever:
    b LoopForever
 80045e2:	e7fe      	b.n	80045e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80045e4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80045e8:	0800873c 	.word	0x0800873c
	ldr	r0, =_sdata
 80045ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80045f0:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 80045f4:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 80045f8:	20000284 	.word	0x20000284

080045fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045fc:	e7fe      	b.n	80045fc <ADC1_2_IRQHandler>
	...

08004600 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af02      	add	r7, sp, #8
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <lsm6ds0_read_byte+0x30>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	f107 000f 	add.w	r0, r7, #15
 8004618:	2100      	movs	r1, #0
 800461a:	9100      	str	r1, [sp, #0]
 800461c:	2101      	movs	r1, #1
 800461e:	f7ff f827 	bl	8003670 <i2c_master_read>
 8004622:	4603      	mov	r3, r0
 8004624:	781b      	ldrb	r3, [r3, #0]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20000008 	.word	0x20000008

08004634 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	460a      	mov	r2, r1
 800463e:	71fb      	strb	r3, [r7, #7]
 8004640:	4613      	mov	r3, r2
 8004642:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <lsm6ds0_write_byte+0x28>)
 8004646:	781a      	ldrb	r2, [r3, #0]
 8004648:	79f9      	ldrb	r1, [r7, #7]
 800464a:	79b8      	ldrb	r0, [r7, #6]
 800464c:	2300      	movs	r3, #0
 800464e:	f7fe ffcb 	bl	80035e8 <i2c_master_write>
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000008 	.word	0x20000008

08004660 <lsm6ds0_init>:
	*z = (zz >> 4) / 1000.0f;
}


uint8_t lsm6ds0_init(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004666:	2301      	movs	r3, #1
 8004668:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 800466a:	2064      	movs	r0, #100	; 0x64
 800466c:	f7fd fba6 	bl	8001dbc <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8004670:	200f      	movs	r0, #15
 8004672:	f7ff ffc5 	bl	8004600 <lsm6ds0_read_byte>
 8004676:	4603      	mov	r3, r0
 8004678:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 800467a:	79bb      	ldrb	r3, [r7, #6]
 800467c:	2b68      	cmp	r3, #104	; 0x68
 800467e:	d102      	bne.n	8004686 <lsm6ds0_init+0x26>
	{
		status = 1;
 8004680:	2301      	movs	r3, #1
 8004682:	71fb      	strb	r3, [r7, #7]
 8004684:	e00f      	b.n	80046a6 <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <lsm6ds0_init+0x60>)
 8004688:	22d6      	movs	r2, #214	; 0xd6
 800468a:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 800468c:	200f      	movs	r0, #15
 800468e:	f7ff ffb7 	bl	8004600 <lsm6ds0_read_byte>
 8004692:	4603      	mov	r3, r0
 8004694:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 8004696:	79bb      	ldrb	r3, [r7, #6]
 8004698:	2b68      	cmp	r3, #104	; 0x68
 800469a:	d102      	bne.n	80046a2 <lsm6ds0_init+0x42>
		{
			status = 1;
 800469c:	2301      	movs	r3, #1
 800469e:	71fb      	strb	r3, [r7, #7]
 80046a0:	e001      	b.n	80046a6 <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 80046aa:	797b      	ldrb	r3, [r7, #5]
 80046ac:	4619      	mov	r1, r3
 80046ae:	2010      	movs	r0, #16
 80046b0:	f7ff ffc0 	bl	8004634 <lsm6ds0_write_byte>

	return status;
 80046b4:	79fb      	ldrb	r3, [r7, #7]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000008 	.word	0x20000008

080046c4 <lps25hb_read_byte>:
#include "lps25hb.h"

uint8_t address_bar = LPS25HB_DEVICE_ADDRESS_0;

uint8_t lps25hb_read_byte(uint8_t reg_addr)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af02      	add	r7, sp, #8
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_bar, 0));
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <lps25hb_read_byte+0x30>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	79fa      	ldrb	r2, [r7, #7]
 80046d8:	f107 000f 	add.w	r0, r7, #15
 80046dc:	2100      	movs	r1, #0
 80046de:	9100      	str	r1, [sp, #0]
 80046e0:	2101      	movs	r1, #1
 80046e2:	f7fe ffc5 	bl	8003670 <i2c_master_read>
 80046e6:	4603      	mov	r3, r0
 80046e8:	781b      	ldrb	r3, [r3, #0]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20000009 	.word	0x20000009

080046f8 <lps25hb_write_byte>:


void lps25hb_write_byte(uint8_t reg_addr, uint8_t value)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	460a      	mov	r2, r1
 8004702:	71fb      	strb	r3, [r7, #7]
 8004704:	4613      	mov	r3, r2
 8004706:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_bar, 0);
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <lps25hb_write_byte+0x28>)
 800470a:	781a      	ldrb	r2, [r3, #0]
 800470c:	79f9      	ldrb	r1, [r7, #7]
 800470e:	79b8      	ldrb	r0, [r7, #6]
 8004710:	2300      	movs	r3, #0
 8004712:	f7fe ff69 	bl	80035e8 <i2c_master_write>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000009 	.word	0x20000009

08004724 <lps25hb_readArray>:


void lps25hb_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af02      	add	r7, sp, #8
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	460b      	mov	r3, r1
 800472e:	70fb      	strb	r3, [r7, #3]
 8004730:	4613      	mov	r3, r2
 8004732:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_bar, 1);
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <lps25hb_readArray+0x2c>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	78b9      	ldrb	r1, [r7, #2]
 800473c:	2001      	movs	r0, #1
 800473e:	9000      	str	r0, [sp, #0]
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fe ff95 	bl	8003670 <i2c_master_read>
}
 8004746:	bf00      	nop
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000009 	.word	0x20000009

08004754 <lps25hb_get_temp>:


float lps25hb_get_temp()
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
	uint8_t data[2];
	int16_t temperature;

	lps25hb_readArray(data, LPS25HB_ADDRESS_TEMP, 2);
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	2202      	movs	r2, #2
 800475e:	212b      	movs	r1, #43	; 0x2b
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ffdf 	bl	8004724 <lps25hb_readArray>

	temperature = ((int16_t)((data[1] << 8) | data[0]));
 8004766:	797b      	ldrb	r3, [r7, #5]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	b21a      	sxth	r2, r3
 800476c:	793b      	ldrb	r3, [r7, #4]
 800476e:	b21b      	sxth	r3, r3
 8004770:	4313      	orrs	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]

    return (42.5 + (temperature/480));
 8004774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004778:	4a0e      	ldr	r2, [pc, #56]	; (80047b4 <lps25hb_get_temp+0x60>)
 800477a:	fb82 1203 	smull	r1, r2, r2, r3
 800477e:	441a      	add	r2, r3
 8004780:	1212      	asrs	r2, r2, #8
 8004782:	17db      	asrs	r3, r3, #31
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	b21b      	sxth	r3, r3
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fecb 	bl	8000524 <__aeabi_i2d>
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <lps25hb_get_temp+0x64>)
 8004794:	f7fb fd7a 	bl	800028c <__adddf3>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	f7fc fa02 	bl	8000ba8 <__aeabi_d2f>
 80047a4:	4603      	mov	r3, r0
 80047a6:	ee07 3a90 	vmov	s15, r3
}
 80047aa:	eeb0 0a67 	vmov.f32	s0, s15
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	88888889 	.word	0x88888889
 80047b8:	40454000 	.word	0x40454000

080047bc <lps25hb_get_pressure>:


float lps25hb_get_pressure()
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0

	uint32_t pressure;
    uint8_t pressOut_XL, pressOut_L, pressOut_H;


	lps25hb_readArray(data, LPS25HB_ADDRESS_PRESS, 3);
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	2203      	movs	r2, #3
 80047c6:	2128      	movs	r1, #40	; 0x28
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ffab 	bl	8004724 <lps25hb_readArray>

	pressOut_XL = data[0];
 80047ce:	793b      	ldrb	r3, [r7, #4]
 80047d0:	73fb      	strb	r3, [r7, #15]
	pressOut_L = data[1];
 80047d2:	797b      	ldrb	r3, [r7, #5]
 80047d4:	73bb      	strb	r3, [r7, #14]
    pressOut_H = data[2];
 80047d6:	79bb      	ldrb	r3, [r7, #6]
 80047d8:	737b      	strb	r3, [r7, #13]
	pressure = (uint32_t)pressOut_L << 8 | pressOut_XL;
 80047da:	7bbb      	ldrb	r3, [r7, #14]
 80047dc:	021a      	lsls	r2, r3, #8
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
	pressure = (uint32_t)pressOut_H << 16 | pressure;
 80047e4:	7b7b      	ldrb	r3, [r7, #13]
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	60bb      	str	r3, [r7, #8]

	return (pressure/4096.0);
 80047ee:	68b8      	ldr	r0, [r7, #8]
 80047f0:	f7fb fe88 	bl	8000504 <__aeabi_ui2d>
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <lps25hb_get_pressure+0x60>)
 80047fa:	f7fc f827 	bl	800084c <__aeabi_ddiv>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	f7fc f9cf 	bl	8000ba8 <__aeabi_d2f>
 800480a:	4603      	mov	r3, r0
 800480c:	ee07 3a90 	vmov	s15, r3
}
 8004810:	eeb0 0a67 	vmov.f32	s0, s15
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40b00000 	.word	0x40b00000

08004820 <lps25hb_init>:


uint8_t lps25hb_init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	71fb      	strb	r3, [r7, #7]


	LL_mDelay(100);
 800482a:	2064      	movs	r0, #100	; 0x64
 800482c:	f7fd fac6 	bl	8001dbc <LL_mDelay>

	uint8_t val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 8004830:	200f      	movs	r0, #15
 8004832:	f7ff ff47 	bl	80046c4 <lps25hb_read_byte>
 8004836:	4603      	mov	r3, r0
 8004838:	71bb      	strb	r3, [r7, #6]

	if(val == LPS25HB_WHO_AM_I_VALUE)
 800483a:	79bb      	ldrb	r3, [r7, #6]
 800483c:	2bbd      	cmp	r3, #189	; 0xbd
 800483e:	d102      	bne.n	8004846 <lps25hb_init+0x26>
	{
		status = 1;
 8004840:	2301      	movs	r3, #1
 8004842:	71fb      	strb	r3, [r7, #7]
 8004844:	e011      	b.n	800486a <lps25hb_init+0x4a>
	}
	else
	{
		address_bar = LPS25HB_DEVICE_ADDRESS_1;
 8004846:	4b0f      	ldr	r3, [pc, #60]	; (8004884 <lps25hb_init+0x64>)
 8004848:	22ba      	movs	r2, #186	; 0xba
 800484a:	701a      	strb	r2, [r3, #0]
		val = lps25hb_read_byte(LPS25HB_WHO_AM_I_ADDRES);
 800484c:	200f      	movs	r0, #15
 800484e:	f7ff ff39 	bl	80046c4 <lps25hb_read_byte>
 8004852:	4603      	mov	r3, r0
 8004854:	71bb      	strb	r3, [r7, #6]
		if(val == LPS25HB_WHO_AM_I_VALUE)
 8004856:	79bb      	ldrb	r3, [r7, #6]
 8004858:	2bbd      	cmp	r3, #189	; 0xbd
 800485a:	d102      	bne.n	8004862 <lps25hb_init+0x42>
		{
			status = 1;
 800485c:	2301      	movs	r3, #1
 800485e:	71fb      	strb	r3, [r7, #7]
 8004860:	e003      	b.n	800486a <lps25hb_init+0x4a>
		}
		else
		{
			status = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	71fb      	strb	r3, [r7, #7]
			return status;
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	e007      	b.n	800487a <lps25hb_init+0x5a>
		}
	}


	uint8_t ctrl1 = 0b11000000;
 800486a:	23c0      	movs	r3, #192	; 0xc0
 800486c:	717b      	strb	r3, [r7, #5]
	lps25hb_write_byte(LPS25HB_ADDRESS_CTRL1, ctrl1);
 800486e:	797b      	ldrb	r3, [r7, #5]
 8004870:	4619      	mov	r1, r3
 8004872:	2020      	movs	r0, #32
 8004874:	f7ff ff40 	bl	80046f8 <lps25hb_write_byte>

	return status;
 8004878:	79fb      	ldrb	r3, [r7, #7]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000009 	.word	0x20000009

08004888 <lis3mdl_read_byte>:
static uint8_t sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS;

uint64_t lastMovementTick = 0;

uint8_t lis3mdl_read_byte(uint8_t reg_addr)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, sLIS3MDLI2Caddress, 0));
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <lis3mdl_read_byte+0x30>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	79fa      	ldrb	r2, [r7, #7]
 800489c:	f107 000f 	add.w	r0, r7, #15
 80048a0:	2100      	movs	r1, #0
 80048a2:	9100      	str	r1, [sp, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	f7fe fee3 	bl	8003670 <i2c_master_read>
 80048aa:	4603      	mov	r3, r0
 80048ac:	781b      	ldrb	r3, [r3, #0]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	2000000a 	.word	0x2000000a

080048bc <lis3mdl_write_byte>:

void lis3mdl_write_byte(uint8_t reg_addr, uint8_t value)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	460a      	mov	r2, r1
 80048c6:	71fb      	strb	r3, [r7, #7]
 80048c8:	4613      	mov	r3, r2
 80048ca:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, sLIS3MDLI2Caddress, 0);
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <lis3mdl_write_byte+0x28>)
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	79f9      	ldrb	r1, [r7, #7]
 80048d2:	79b8      	ldrb	r0, [r7, #6]
 80048d4:	2300      	movs	r3, #0
 80048d6:	f7fe fe87 	bl	80035e8 <i2c_master_write>
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000000a 	.word	0x2000000a

080048e8 <lis3mdl_init>:
	*z = (float)(zz/range_scale);
}


uint8_t lis3mdl_init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 80048f2:	2064      	movs	r0, #100	; 0x64
 80048f4:	f7fd fa62 	bl	8001dbc <LL_mDelay>

	uint8_t val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 80048f8:	200f      	movs	r0, #15
 80048fa:	f7ff ffc5 	bl	8004888 <lis3mdl_read_byte>
 80048fe:	4603      	mov	r3, r0
 8004900:	71bb      	strb	r3, [r7, #6]

	if(val == LIS3MDL_WHO_AM_I_VALUE)
 8004902:	79bb      	ldrb	r3, [r7, #6]
 8004904:	2b3d      	cmp	r3, #61	; 0x3d
 8004906:	d102      	bne.n	800490e <lis3mdl_init+0x26>
	{
		status = 1;
 8004908:	2301      	movs	r3, #1
 800490a:	71fb      	strb	r3, [r7, #7]
 800490c:	e011      	b.n	8004932 <lis3mdl_init+0x4a>
	}
	else			//if the device is not found on one address, try another one
	{
		sLIS3MDLI2Caddress = LIS3MDL_DEVICE_ADDRESS_ALTERNATIVE;
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <lis3mdl_init+0x8c>)
 8004910:	223c      	movs	r2, #60	; 0x3c
 8004912:	701a      	strb	r2, [r3, #0]
		val = lis3mdl_read_byte(LIS3MDL_WHO_AM_I_ADDRES);
 8004914:	200f      	movs	r0, #15
 8004916:	f7ff ffb7 	bl	8004888 <lis3mdl_read_byte>
 800491a:	4603      	mov	r3, r0
 800491c:	71bb      	strb	r3, [r7, #6]
		if(val == LIS3MDL_WHO_AM_I_VALUE)
 800491e:	79bb      	ldrb	r3, [r7, #6]
 8004920:	2b3d      	cmp	r3, #61	; 0x3d
 8004922:	d102      	bne.n	800492a <lis3mdl_init+0x42>
		{
			status = 1;
 8004924:	2301      	movs	r3, #1
 8004926:	71fb      	strb	r3, [r7, #7]
 8004928:	e003      	b.n	8004932 <lis3mdl_init+0x4a>
		}
		else
		{
			status = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	71fb      	strb	r3, [r7, #7]
			return status;
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	e01c      	b.n	800496c <lis3mdl_init+0x84>
		}
	}

	//acc device init

	uint8_t ctrl1 = LIS3MDL_CTRL1_OM_UHP | LIS3MDL_CTRL1_DO_80HZ | (1 << 7);
 8004932:	23fc      	movs	r3, #252	; 0xfc
 8004934:	717b      	strb	r3, [r7, #5]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL1, ctrl1);
 8004936:	797b      	ldrb	r3, [r7, #5]
 8004938:	4619      	mov	r1, r3
 800493a:	2020      	movs	r0, #32
 800493c:	f7ff ffbe 	bl	80048bc <lis3mdl_write_byte>

	uint8_t ctrl2 = LIS3MDL_CTRL2_FS_4GAUS;
 8004940:	2300      	movs	r3, #0
 8004942:	713b      	strb	r3, [r7, #4]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL2, ctrl2);
 8004944:	793b      	ldrb	r3, [r7, #4]
 8004946:	4619      	mov	r1, r3
 8004948:	2021      	movs	r0, #33	; 0x21
 800494a:	f7ff ffb7 	bl	80048bc <lis3mdl_write_byte>

	uint8_t ctrl3 = LIS3MDL_CTRL3_MD_CONTINUES;
 800494e:	2300      	movs	r3, #0
 8004950:	70fb      	strb	r3, [r7, #3]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL3, ctrl3);
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	4619      	mov	r1, r3
 8004956:	2022      	movs	r0, #34	; 0x22
 8004958:	f7ff ffb0 	bl	80048bc <lis3mdl_write_byte>

	uint8_t ctrl4 = LIS3MDL_CTRL4_OMZ_UHP;
 800495c:	230c      	movs	r3, #12
 800495e:	70bb      	strb	r3, [r7, #2]
	lis3mdl_write_byte(LIS3MDL_ADDRESS_CTRL4, ctrl4);
 8004960:	78bb      	ldrb	r3, [r7, #2]
 8004962:	4619      	mov	r1, r3
 8004964:	2023      	movs	r0, #35	; 0x23
 8004966:	f7ff ffa9 	bl	80048bc <lis3mdl_write_byte>

	return status;
 800496a:	79fb      	ldrb	r3, [r7, #7]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	2000000a 	.word	0x2000000a

08004978 <hts221_read_byte>:
#include "hts221.h"

uint8_t address_hyg = HTS221_DEVICE_ADDRESS_0;

uint8_t hts221_read_byte(uint8_t reg_addr)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af02      	add	r7, sp, #8
 800497e:	4603      	mov	r3, r0
 8004980:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, address_hyg, 0));
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <hts221_read_byte+0x30>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	79fa      	ldrb	r2, [r7, #7]
 800498c:	f107 000f 	add.w	r0, r7, #15
 8004990:	2100      	movs	r1, #0
 8004992:	9100      	str	r1, [sp, #0]
 8004994:	2101      	movs	r1, #1
 8004996:	f7fe fe6b 	bl	8003670 <i2c_master_read>
 800499a:	4603      	mov	r3, r0
 800499c:	781b      	ldrb	r3, [r3, #0]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000000b 	.word	0x2000000b

080049ac <hts221_write_byte>:


void hts221_write_byte(uint8_t reg_addr, uint8_t value)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	4603      	mov	r3, r0
 80049b4:	460a      	mov	r2, r1
 80049b6:	71fb      	strb	r3, [r7, #7]
 80049b8:	4613      	mov	r3, r2
 80049ba:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, address_hyg, 0);
 80049bc:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <hts221_write_byte+0x28>)
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	79f9      	ldrb	r1, [r7, #7]
 80049c2:	79b8      	ldrb	r0, [r7, #6]
 80049c4:	2300      	movs	r3, #0
 80049c6:	f7fe fe0f 	bl	80035e8 <i2c_master_write>
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	2000000b 	.word	0x2000000b

080049d8 <hts221_readArray>:


void hts221_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af02      	add	r7, sp, #8
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
 80049e4:	4613      	mov	r3, r2
 80049e6:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, address_hyg, 1);
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <hts221_readArray+0x2c>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	78b9      	ldrb	r1, [r7, #2]
 80049f0:	2001      	movs	r0, #1
 80049f2:	9000      	str	r0, [sp, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fe fe3b 	bl	8003670 <i2c_master_read>
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	2000000b 	.word	0x2000000b

08004a08 <hts221_get_temp>:


float hts221_get_temp()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
	int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16, T0_degC, T1_degC;
	uint8_t buffer[4], tmp;
	float value;

	hts221_readArray(buffer, 0x32, 2);
 8004a0e:	463b      	mov	r3, r7
 8004a10:	2202      	movs	r2, #2
 8004a12:	2132      	movs	r1, #50	; 0x32
 8004a14:	4618      	mov	r0, r3
 8004a16:	f7ff ffdf 	bl	80049d8 <hts221_readArray>

	tmp = hts221_read_byte(0x35);
 8004a1a:	2035      	movs	r0, #53	; 0x35
 8004a1c:	f7ff ffac 	bl	8004978 <hts221_read_byte>
 8004a20:	4603      	mov	r3, r0
 8004a22:	74fb      	strb	r3, [r7, #19]

	T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	b21b      	sxth	r3, r3
 8004a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2e:	b21a      	sxth	r2, r3
 8004a30:	783b      	ldrb	r3, [r7, #0]
 8004a32:	b21b      	sxth	r3, r3
 8004a34:	4313      	orrs	r3, r2
 8004a36:	823b      	strh	r3, [r7, #16]
	T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	019b      	lsls	r3, r3, #6
 8004a3c:	b21b      	sxth	r3, r3
 8004a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a42:	b21a      	sxth	r2, r3
 8004a44:	787b      	ldrb	r3, [r7, #1]
 8004a46:	b21b      	sxth	r3, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	81fb      	strh	r3, [r7, #14]
	T0_degC = T0_degC_x8_u16>>3;
 8004a4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004a50:	10db      	asrs	r3, r3, #3
 8004a52:	81bb      	strh	r3, [r7, #12]
	T1_degC = T1_degC_x8_u16>>3;
 8004a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004a58:	10db      	asrs	r3, r3, #3
 8004a5a:	817b      	strh	r3, [r7, #10]

	hts221_readArray(buffer, 0x3C, 4);
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	2204      	movs	r2, #4
 8004a60:	213c      	movs	r1, #60	; 0x3c
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ffb8 	bl	80049d8 <hts221_readArray>

	T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8004a68:	787b      	ldrb	r3, [r7, #1]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	b21a      	sxth	r2, r3
 8004a6e:	783b      	ldrb	r3, [r7, #0]
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	4313      	orrs	r3, r2
 8004a74:	813b      	strh	r3, [r7, #8]
	T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	021b      	lsls	r3, r3, #8
 8004a7a:	b21a      	sxth	r2, r3
 8004a7c:	78bb      	ldrb	r3, [r7, #2]
 8004a7e:	b21b      	sxth	r3, r3
 8004a80:	4313      	orrs	r3, r2
 8004a82:	80fb      	strh	r3, [r7, #6]

	hts221_readArray(buffer, 0x2A, 2);
 8004a84:	463b      	mov	r3, r7
 8004a86:	2202      	movs	r2, #2
 8004a88:	212a      	movs	r1, #42	; 0x2a
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff ffa4 	bl	80049d8 <hts221_readArray>
	T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8004a90:	787b      	ldrb	r3, [r7, #1]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	b21a      	sxth	r2, r3
 8004a96:	783b      	ldrb	r3, [r7, #0]
 8004a98:	b21b      	sxth	r3, r3
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	80bb      	strh	r3, [r7, #4]

	value = (float)((((int32_t)(T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10)) /(T1_out - T0_out) + T0_degC*10)*0.10000f;
 8004a9e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004aa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004aac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004ab0:	1a8a      	subs	r2, r1, r2
 8004ab2:	fb02 f203 	mul.w	r2, r2, r3
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	4619      	mov	r1, r3
 8004ac0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ac4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	fb91 f1f3 	sdiv	r1, r1, r3
 8004ace:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	440b      	add	r3, r1
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ae4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004b30 <hts221_get_temp+0x128>
 8004ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004aec:	edc7 7a05 	vstr	s15, [r7, #20]

	if(value>=100)
 8004af0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004af4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004b34 <hts221_get_temp+0x12c>
 8004af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b00:	db02      	blt.n	8004b08 <hts221_get_temp+0x100>
	{
		value=99.9f;
 8004b02:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <hts221_get_temp+0x130>)
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e00a      	b.n	8004b1e <hts221_get_temp+0x116>
	}
	else if(value<=-100)
 8004b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b0c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004b3c <hts221_get_temp+0x134>
 8004b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b18:	d801      	bhi.n	8004b1e <hts221_get_temp+0x116>
	{
		value=-99.9f;
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <hts221_get_temp+0x138>)
 8004b1c:	617b      	str	r3, [r7, #20]
	}

	return value;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	ee07 3a90 	vmov	s15, r3
}
 8004b24:	eeb0 0a67 	vmov.f32	s0, s15
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	3dcccccd 	.word	0x3dcccccd
 8004b34:	42c80000 	.word	0x42c80000
 8004b38:	42c7cccd 	.word	0x42c7cccd
 8004b3c:	c2c80000 	.word	0xc2c80000
 8004b40:	c2c7cccd 	.word	0xc2c7cccd
 8004b44:	00000000 	.word	0x00000000

08004b48 <hts221_get_humid>:


int hts221_get_humid()
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
	int16_t H0_T0_out, H1_T0_out, H_T_out, H0_rh, H1_rh;;
	uint8_t buffer[2];

	float value = 0;
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]

	hts221_readArray(buffer, 0x30, 2);
 8004b54:	463b      	mov	r3, r7
 8004b56:	2202      	movs	r2, #2
 8004b58:	2130      	movs	r1, #48	; 0x30
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff ff3c 	bl	80049d8 <hts221_readArray>
	H0_rh = buffer[0]>>1;
 8004b60:	783b      	ldrb	r3, [r7, #0]
 8004b62:	085b      	lsrs	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	817b      	strh	r3, [r7, #10]
	H1_rh = buffer[1]>>1;
 8004b68:	787b      	ldrb	r3, [r7, #1]
 8004b6a:	085b      	lsrs	r3, r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	813b      	strh	r3, [r7, #8]

	hts221_readArray(buffer, 0x36, 2);
 8004b70:	463b      	mov	r3, r7
 8004b72:	2202      	movs	r2, #2
 8004b74:	2136      	movs	r1, #54	; 0x36
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ff2e 	bl	80049d8 <hts221_readArray>
	H0_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8004b7c:	787b      	ldrb	r3, [r7, #1]
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	b21a      	sxth	r2, r3
 8004b82:	783b      	ldrb	r3, [r7, #0]
 8004b84:	b21b      	sxth	r3, r3
 8004b86:	4313      	orrs	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]

	hts221_readArray(buffer, 0x3A, 2);
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	213a      	movs	r1, #58	; 0x3a
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff21 	bl	80049d8 <hts221_readArray>
	H1_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8004b96:	787b      	ldrb	r3, [r7, #1]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	b21a      	sxth	r2, r3
 8004b9c:	783b      	ldrb	r3, [r7, #0]
 8004b9e:	b21b      	sxth	r3, r3
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	80bb      	strh	r3, [r7, #4]

	hts221_readArray(buffer, 0x28, 2);
 8004ba4:	463b      	mov	r3, r7
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	2128      	movs	r1, #40	; 0x28
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff ff14 	bl	80049d8 <hts221_readArray>

	H_T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8004bb0:	787b      	ldrb	r3, [r7, #1]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	b21a      	sxth	r2, r3
 8004bb6:	783b      	ldrb	r3, [r7, #0]
 8004bb8:	b21b      	sxth	r3, r3
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	807b      	strh	r3, [r7, #2]

	value = ((((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10))/(H1_T0_out - H0_T0_out) + H0_rh*10);
 8004bbe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004bc2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004bcc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004bd0:	1a8a      	subs	r2, r1, r2
 8004bd2:	fb02 f203 	mul.w	r2, r2, r3
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	4413      	add	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4619      	mov	r1, r3
 8004be0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	fb91 f1f3 	sdiv	r1, r1, r3
 8004bee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	440b      	add	r3, r1
 8004bfc:	ee07 3a90 	vmov	s15, r3
 8004c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c04:	edc7 7a03 	vstr	s15, [r7, #12]

	if(value>1000)
 8004c08:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c0c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004c50 <hts221_get_humid+0x108>
 8004c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c18:	dd01      	ble.n	8004c1e <hts221_get_humid+0xd6>
	{
		value = 1000;
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <hts221_get_humid+0x10c>)
 8004c1c:	60fb      	str	r3, [r7, #12]
	}

	return (value * 0.1);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7fb fc92 	bl	8000548 <__aeabi_f2d>
 8004c24:	a308      	add	r3, pc, #32	; (adr r3, 8004c48 <hts221_get_humid+0x100>)
 8004c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2a:	f7fb fce5 	bl	80005f8 <__aeabi_dmul>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4610      	mov	r0, r2
 8004c34:	4619      	mov	r1, r3
 8004c36:	f7fb ff8f 	bl	8000b58 <__aeabi_d2iz>
 8004c3a:	4603      	mov	r3, r0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	f3af 8000 	nop.w
 8004c48:	9999999a 	.word	0x9999999a
 8004c4c:	3fb99999 	.word	0x3fb99999
 8004c50:	447a0000 	.word	0x447a0000
 8004c54:	447a0000 	.word	0x447a0000

08004c58 <hts221_init>:


uint8_t hts221_init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	71fb      	strb	r3, [r7, #7]

	LL_mDelay(100);
 8004c62:	2064      	movs	r0, #100	; 0x64
 8004c64:	f7fd f8aa 	bl	8001dbc <LL_mDelay>

	uint8_t val = hts221_read_byte(HTS221_WHO_AM_I_ADDRES);
 8004c68:	200f      	movs	r0, #15
 8004c6a:	f7ff fe85 	bl	8004978 <hts221_read_byte>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71bb      	strb	r3, [r7, #6]

	if(val == HTS221_WHO_AM_I_VALUE)
 8004c72:	79bb      	ldrb	r3, [r7, #6]
 8004c74:	2bbc      	cmp	r3, #188	; 0xbc
 8004c76:	d101      	bne.n	8004c7c <hts221_init+0x24>
	{
		status = 1;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	71fb      	strb	r3, [r7, #7]
	}



	uint8_t ctrl1 = 0b10000111;
 8004c7c:	2387      	movs	r3, #135	; 0x87
 8004c7e:	717b      	strb	r3, [r7, #5]
	hts221_write_byte(HTS221_ADDRESS_CTRL1, ctrl1);
 8004c80:	797b      	ldrb	r3, [r7, #5]
 8004c82:	4619      	mov	r1, r3
 8004c84:	2020      	movs	r0, #32
 8004c86:	f7ff fe91 	bl	80049ac <hts221_write_byte>

	return status;
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <__errno>:
 8004c94:	4b01      	ldr	r3, [pc, #4]	; (8004c9c <__errno+0x8>)
 8004c96:	6818      	ldr	r0, [r3, #0]
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	2000000c 	.word	0x2000000c

08004ca0 <__libc_init_array>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	4d0d      	ldr	r5, [pc, #52]	; (8004cd8 <__libc_init_array+0x38>)
 8004ca4:	4c0d      	ldr	r4, [pc, #52]	; (8004cdc <__libc_init_array+0x3c>)
 8004ca6:	1b64      	subs	r4, r4, r5
 8004ca8:	10a4      	asrs	r4, r4, #2
 8004caa:	2600      	movs	r6, #0
 8004cac:	42a6      	cmp	r6, r4
 8004cae:	d109      	bne.n	8004cc4 <__libc_init_array+0x24>
 8004cb0:	4d0b      	ldr	r5, [pc, #44]	; (8004ce0 <__libc_init_array+0x40>)
 8004cb2:	4c0c      	ldr	r4, [pc, #48]	; (8004ce4 <__libc_init_array+0x44>)
 8004cb4:	f003 fb0e 	bl	80082d4 <_init>
 8004cb8:	1b64      	subs	r4, r4, r5
 8004cba:	10a4      	asrs	r4, r4, #2
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	42a6      	cmp	r6, r4
 8004cc0:	d105      	bne.n	8004cce <__libc_init_array+0x2e>
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc8:	4798      	blx	r3
 8004cca:	3601      	adds	r6, #1
 8004ccc:	e7ee      	b.n	8004cac <__libc_init_array+0xc>
 8004cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd2:	4798      	blx	r3
 8004cd4:	3601      	adds	r6, #1
 8004cd6:	e7f2      	b.n	8004cbe <__libc_init_array+0x1e>
 8004cd8:	08008734 	.word	0x08008734
 8004cdc:	08008734 	.word	0x08008734
 8004ce0:	08008734 	.word	0x08008734
 8004ce4:	08008738 	.word	0x08008738

08004ce8 <memset>:
 8004ce8:	4402      	add	r2, r0
 8004cea:	4603      	mov	r3, r0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <__cvt>:
 8004cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cfc:	ec55 4b10 	vmov	r4, r5, d0
 8004d00:	2d00      	cmp	r5, #0
 8004d02:	460e      	mov	r6, r1
 8004d04:	4619      	mov	r1, r3
 8004d06:	462b      	mov	r3, r5
 8004d08:	bfbb      	ittet	lt
 8004d0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d0e:	461d      	movlt	r5, r3
 8004d10:	2300      	movge	r3, #0
 8004d12:	232d      	movlt	r3, #45	; 0x2d
 8004d14:	700b      	strb	r3, [r1, #0]
 8004d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d1c:	4691      	mov	r9, r2
 8004d1e:	f023 0820 	bic.w	r8, r3, #32
 8004d22:	bfbc      	itt	lt
 8004d24:	4622      	movlt	r2, r4
 8004d26:	4614      	movlt	r4, r2
 8004d28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d2c:	d005      	beq.n	8004d3a <__cvt+0x42>
 8004d2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d32:	d100      	bne.n	8004d36 <__cvt+0x3e>
 8004d34:	3601      	adds	r6, #1
 8004d36:	2102      	movs	r1, #2
 8004d38:	e000      	b.n	8004d3c <__cvt+0x44>
 8004d3a:	2103      	movs	r1, #3
 8004d3c:	ab03      	add	r3, sp, #12
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	ab02      	add	r3, sp, #8
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	ec45 4b10 	vmov	d0, r4, r5
 8004d48:	4653      	mov	r3, sl
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	f000 fd00 	bl	8005750 <_dtoa_r>
 8004d50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d54:	4607      	mov	r7, r0
 8004d56:	d102      	bne.n	8004d5e <__cvt+0x66>
 8004d58:	f019 0f01 	tst.w	r9, #1
 8004d5c:	d022      	beq.n	8004da4 <__cvt+0xac>
 8004d5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d62:	eb07 0906 	add.w	r9, r7, r6
 8004d66:	d110      	bne.n	8004d8a <__cvt+0x92>
 8004d68:	783b      	ldrb	r3, [r7, #0]
 8004d6a:	2b30      	cmp	r3, #48	; 0x30
 8004d6c:	d10a      	bne.n	8004d84 <__cvt+0x8c>
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2300      	movs	r3, #0
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	f7fb fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d7a:	b918      	cbnz	r0, 8004d84 <__cvt+0x8c>
 8004d7c:	f1c6 0601 	rsb	r6, r6, #1
 8004d80:	f8ca 6000 	str.w	r6, [sl]
 8004d84:	f8da 3000 	ldr.w	r3, [sl]
 8004d88:	4499      	add	r9, r3
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	4620      	mov	r0, r4
 8004d90:	4629      	mov	r1, r5
 8004d92:	f7fb fe99 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d96:	b108      	cbz	r0, 8004d9c <__cvt+0xa4>
 8004d98:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d9c:	2230      	movs	r2, #48	; 0x30
 8004d9e:	9b03      	ldr	r3, [sp, #12]
 8004da0:	454b      	cmp	r3, r9
 8004da2:	d307      	bcc.n	8004db4 <__cvt+0xbc>
 8004da4:	9b03      	ldr	r3, [sp, #12]
 8004da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004da8:	1bdb      	subs	r3, r3, r7
 8004daa:	4638      	mov	r0, r7
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	b004      	add	sp, #16
 8004db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db4:	1c59      	adds	r1, r3, #1
 8004db6:	9103      	str	r1, [sp, #12]
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e7f0      	b.n	8004d9e <__cvt+0xa6>

08004dbc <__exponent>:
 8004dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2900      	cmp	r1, #0
 8004dc2:	bfb8      	it	lt
 8004dc4:	4249      	neglt	r1, r1
 8004dc6:	f803 2b02 	strb.w	r2, [r3], #2
 8004dca:	bfb4      	ite	lt
 8004dcc:	222d      	movlt	r2, #45	; 0x2d
 8004dce:	222b      	movge	r2, #43	; 0x2b
 8004dd0:	2909      	cmp	r1, #9
 8004dd2:	7042      	strb	r2, [r0, #1]
 8004dd4:	dd2a      	ble.n	8004e2c <__exponent+0x70>
 8004dd6:	f10d 0407 	add.w	r4, sp, #7
 8004dda:	46a4      	mov	ip, r4
 8004ddc:	270a      	movs	r7, #10
 8004dde:	46a6      	mov	lr, r4
 8004de0:	460a      	mov	r2, r1
 8004de2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004de6:	fb07 1516 	mls	r5, r7, r6, r1
 8004dea:	3530      	adds	r5, #48	; 0x30
 8004dec:	2a63      	cmp	r2, #99	; 0x63
 8004dee:	f104 34ff 	add.w	r4, r4, #4294967295
 8004df2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004df6:	4631      	mov	r1, r6
 8004df8:	dcf1      	bgt.n	8004dde <__exponent+0x22>
 8004dfa:	3130      	adds	r1, #48	; 0x30
 8004dfc:	f1ae 0502 	sub.w	r5, lr, #2
 8004e00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e04:	1c44      	adds	r4, r0, #1
 8004e06:	4629      	mov	r1, r5
 8004e08:	4561      	cmp	r1, ip
 8004e0a:	d30a      	bcc.n	8004e22 <__exponent+0x66>
 8004e0c:	f10d 0209 	add.w	r2, sp, #9
 8004e10:	eba2 020e 	sub.w	r2, r2, lr
 8004e14:	4565      	cmp	r5, ip
 8004e16:	bf88      	it	hi
 8004e18:	2200      	movhi	r2, #0
 8004e1a:	4413      	add	r3, r2
 8004e1c:	1a18      	subs	r0, r3, r0
 8004e1e:	b003      	add	sp, #12
 8004e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e2a:	e7ed      	b.n	8004e08 <__exponent+0x4c>
 8004e2c:	2330      	movs	r3, #48	; 0x30
 8004e2e:	3130      	adds	r1, #48	; 0x30
 8004e30:	7083      	strb	r3, [r0, #2]
 8004e32:	70c1      	strb	r1, [r0, #3]
 8004e34:	1d03      	adds	r3, r0, #4
 8004e36:	e7f1      	b.n	8004e1c <__exponent+0x60>

08004e38 <_printf_float>:
 8004e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	ed2d 8b02 	vpush	{d8}
 8004e40:	b08d      	sub	sp, #52	; 0x34
 8004e42:	460c      	mov	r4, r1
 8004e44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e48:	4616      	mov	r6, r2
 8004e4a:	461f      	mov	r7, r3
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	f001 fa6b 	bl	8006328 <_localeconv_r>
 8004e52:	f8d0 a000 	ldr.w	sl, [r0]
 8004e56:	4650      	mov	r0, sl
 8004e58:	f7fb f9ba 	bl	80001d0 <strlen>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	f8d8 3000 	ldr.w	r3, [r8]
 8004e68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e6c:	3307      	adds	r3, #7
 8004e6e:	f023 0307 	bic.w	r3, r3, #7
 8004e72:	f103 0208 	add.w	r2, r3, #8
 8004e76:	f8c8 2000 	str.w	r2, [r8]
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e8a:	9307      	str	r3, [sp, #28]
 8004e8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e90:	ee08 0a10 	vmov	s16, r0
 8004e94:	4b9f      	ldr	r3, [pc, #636]	; (8005114 <_printf_float+0x2dc>)
 8004e96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9e:	f7fb fe45 	bl	8000b2c <__aeabi_dcmpun>
 8004ea2:	bb88      	cbnz	r0, 8004f08 <_printf_float+0xd0>
 8004ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ea8:	4b9a      	ldr	r3, [pc, #616]	; (8005114 <_printf_float+0x2dc>)
 8004eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8004eae:	f7fb fe1f 	bl	8000af0 <__aeabi_dcmple>
 8004eb2:	bb48      	cbnz	r0, 8004f08 <_printf_float+0xd0>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	4640      	mov	r0, r8
 8004eba:	4649      	mov	r1, r9
 8004ebc:	f7fb fe0e 	bl	8000adc <__aeabi_dcmplt>
 8004ec0:	b110      	cbz	r0, 8004ec8 <_printf_float+0x90>
 8004ec2:	232d      	movs	r3, #45	; 0x2d
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec8:	4b93      	ldr	r3, [pc, #588]	; (8005118 <_printf_float+0x2e0>)
 8004eca:	4894      	ldr	r0, [pc, #592]	; (800511c <_printf_float+0x2e4>)
 8004ecc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ed0:	bf94      	ite	ls
 8004ed2:	4698      	movls	r8, r3
 8004ed4:	4680      	movhi	r8, r0
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	6123      	str	r3, [r4, #16]
 8004eda:	9b05      	ldr	r3, [sp, #20]
 8004edc:	f023 0204 	bic.w	r2, r3, #4
 8004ee0:	6022      	str	r2, [r4, #0]
 8004ee2:	f04f 0900 	mov.w	r9, #0
 8004ee6:	9700      	str	r7, [sp, #0]
 8004ee8:	4633      	mov	r3, r6
 8004eea:	aa0b      	add	r2, sp, #44	; 0x2c
 8004eec:	4621      	mov	r1, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 f9d8 	bl	80052a4 <_printf_common>
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	f040 8090 	bne.w	800501a <_printf_float+0x1e2>
 8004efa:	f04f 30ff 	mov.w	r0, #4294967295
 8004efe:	b00d      	add	sp, #52	; 0x34
 8004f00:	ecbd 8b02 	vpop	{d8}
 8004f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4649      	mov	r1, r9
 8004f10:	f7fb fe0c 	bl	8000b2c <__aeabi_dcmpun>
 8004f14:	b140      	cbz	r0, 8004f28 <_printf_float+0xf0>
 8004f16:	464b      	mov	r3, r9
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bfbc      	itt	lt
 8004f1c:	232d      	movlt	r3, #45	; 0x2d
 8004f1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f22:	487f      	ldr	r0, [pc, #508]	; (8005120 <_printf_float+0x2e8>)
 8004f24:	4b7f      	ldr	r3, [pc, #508]	; (8005124 <_printf_float+0x2ec>)
 8004f26:	e7d1      	b.n	8004ecc <_printf_float+0x94>
 8004f28:	6863      	ldr	r3, [r4, #4]
 8004f2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f2e:	9206      	str	r2, [sp, #24]
 8004f30:	1c5a      	adds	r2, r3, #1
 8004f32:	d13f      	bne.n	8004fb4 <_printf_float+0x17c>
 8004f34:	2306      	movs	r3, #6
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	9b05      	ldr	r3, [sp, #20]
 8004f3a:	6861      	ldr	r1, [r4, #4]
 8004f3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f40:	2300      	movs	r3, #0
 8004f42:	9303      	str	r3, [sp, #12]
 8004f44:	ab0a      	add	r3, sp, #40	; 0x28
 8004f46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f4a:	ab09      	add	r3, sp, #36	; 0x24
 8004f4c:	ec49 8b10 	vmov	d0, r8, r9
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	6022      	str	r2, [r4, #0]
 8004f54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f58:	4628      	mov	r0, r5
 8004f5a:	f7ff fecd 	bl	8004cf8 <__cvt>
 8004f5e:	9b06      	ldr	r3, [sp, #24]
 8004f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f62:	2b47      	cmp	r3, #71	; 0x47
 8004f64:	4680      	mov	r8, r0
 8004f66:	d108      	bne.n	8004f7a <_printf_float+0x142>
 8004f68:	1cc8      	adds	r0, r1, #3
 8004f6a:	db02      	blt.n	8004f72 <_printf_float+0x13a>
 8004f6c:	6863      	ldr	r3, [r4, #4]
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	dd41      	ble.n	8004ff6 <_printf_float+0x1be>
 8004f72:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f76:	fa5f fb8b 	uxtb.w	fp, fp
 8004f7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f7e:	d820      	bhi.n	8004fc2 <_printf_float+0x18a>
 8004f80:	3901      	subs	r1, #1
 8004f82:	465a      	mov	r2, fp
 8004f84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f88:	9109      	str	r1, [sp, #36]	; 0x24
 8004f8a:	f7ff ff17 	bl	8004dbc <__exponent>
 8004f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f90:	1813      	adds	r3, r2, r0
 8004f92:	2a01      	cmp	r2, #1
 8004f94:	4681      	mov	r9, r0
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	dc02      	bgt.n	8004fa0 <_printf_float+0x168>
 8004f9a:	6822      	ldr	r2, [r4, #0]
 8004f9c:	07d2      	lsls	r2, r2, #31
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_float+0x16c>
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d09c      	beq.n	8004ee6 <_printf_float+0xae>
 8004fac:	232d      	movs	r3, #45	; 0x2d
 8004fae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fb2:	e798      	b.n	8004ee6 <_printf_float+0xae>
 8004fb4:	9a06      	ldr	r2, [sp, #24]
 8004fb6:	2a47      	cmp	r2, #71	; 0x47
 8004fb8:	d1be      	bne.n	8004f38 <_printf_float+0x100>
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1bc      	bne.n	8004f38 <_printf_float+0x100>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e7b9      	b.n	8004f36 <_printf_float+0xfe>
 8004fc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fc6:	d118      	bne.n	8004ffa <_printf_float+0x1c2>
 8004fc8:	2900      	cmp	r1, #0
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	dd0b      	ble.n	8004fe6 <_printf_float+0x1ae>
 8004fce:	6121      	str	r1, [r4, #16]
 8004fd0:	b913      	cbnz	r3, 8004fd8 <_printf_float+0x1a0>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	07d0      	lsls	r0, r2, #31
 8004fd6:	d502      	bpl.n	8004fde <_printf_float+0x1a6>
 8004fd8:	3301      	adds	r3, #1
 8004fda:	440b      	add	r3, r1
 8004fdc:	6123      	str	r3, [r4, #16]
 8004fde:	65a1      	str	r1, [r4, #88]	; 0x58
 8004fe0:	f04f 0900 	mov.w	r9, #0
 8004fe4:	e7de      	b.n	8004fa4 <_printf_float+0x16c>
 8004fe6:	b913      	cbnz	r3, 8004fee <_printf_float+0x1b6>
 8004fe8:	6822      	ldr	r2, [r4, #0]
 8004fea:	07d2      	lsls	r2, r2, #31
 8004fec:	d501      	bpl.n	8004ff2 <_printf_float+0x1ba>
 8004fee:	3302      	adds	r3, #2
 8004ff0:	e7f4      	b.n	8004fdc <_printf_float+0x1a4>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e7f2      	b.n	8004fdc <_printf_float+0x1a4>
 8004ff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ffc:	4299      	cmp	r1, r3
 8004ffe:	db05      	blt.n	800500c <_printf_float+0x1d4>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	6121      	str	r1, [r4, #16]
 8005004:	07d8      	lsls	r0, r3, #31
 8005006:	d5ea      	bpl.n	8004fde <_printf_float+0x1a6>
 8005008:	1c4b      	adds	r3, r1, #1
 800500a:	e7e7      	b.n	8004fdc <_printf_float+0x1a4>
 800500c:	2900      	cmp	r1, #0
 800500e:	bfd4      	ite	le
 8005010:	f1c1 0202 	rsble	r2, r1, #2
 8005014:	2201      	movgt	r2, #1
 8005016:	4413      	add	r3, r2
 8005018:	e7e0      	b.n	8004fdc <_printf_float+0x1a4>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	055a      	lsls	r2, r3, #21
 800501e:	d407      	bmi.n	8005030 <_printf_float+0x1f8>
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	4642      	mov	r2, r8
 8005024:	4631      	mov	r1, r6
 8005026:	4628      	mov	r0, r5
 8005028:	47b8      	blx	r7
 800502a:	3001      	adds	r0, #1
 800502c:	d12c      	bne.n	8005088 <_printf_float+0x250>
 800502e:	e764      	b.n	8004efa <_printf_float+0xc2>
 8005030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005034:	f240 80e0 	bls.w	80051f8 <_printf_float+0x3c0>
 8005038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800503c:	2200      	movs	r2, #0
 800503e:	2300      	movs	r3, #0
 8005040:	f7fb fd42 	bl	8000ac8 <__aeabi_dcmpeq>
 8005044:	2800      	cmp	r0, #0
 8005046:	d034      	beq.n	80050b2 <_printf_float+0x27a>
 8005048:	4a37      	ldr	r2, [pc, #220]	; (8005128 <_printf_float+0x2f0>)
 800504a:	2301      	movs	r3, #1
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	f43f af51 	beq.w	8004efa <_printf_float+0xc2>
 8005058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800505c:	429a      	cmp	r2, r3
 800505e:	db02      	blt.n	8005066 <_printf_float+0x22e>
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	07d8      	lsls	r0, r3, #31
 8005064:	d510      	bpl.n	8005088 <_printf_float+0x250>
 8005066:	ee18 3a10 	vmov	r3, s16
 800506a:	4652      	mov	r2, sl
 800506c:	4631      	mov	r1, r6
 800506e:	4628      	mov	r0, r5
 8005070:	47b8      	blx	r7
 8005072:	3001      	adds	r0, #1
 8005074:	f43f af41 	beq.w	8004efa <_printf_float+0xc2>
 8005078:	f04f 0800 	mov.w	r8, #0
 800507c:	f104 091a 	add.w	r9, r4, #26
 8005080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005082:	3b01      	subs	r3, #1
 8005084:	4543      	cmp	r3, r8
 8005086:	dc09      	bgt.n	800509c <_printf_float+0x264>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	079b      	lsls	r3, r3, #30
 800508c:	f100 8105 	bmi.w	800529a <_printf_float+0x462>
 8005090:	68e0      	ldr	r0, [r4, #12]
 8005092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005094:	4298      	cmp	r0, r3
 8005096:	bfb8      	it	lt
 8005098:	4618      	movlt	r0, r3
 800509a:	e730      	b.n	8004efe <_printf_float+0xc6>
 800509c:	2301      	movs	r3, #1
 800509e:	464a      	mov	r2, r9
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f af27 	beq.w	8004efa <_printf_float+0xc2>
 80050ac:	f108 0801 	add.w	r8, r8, #1
 80050b0:	e7e6      	b.n	8005080 <_printf_float+0x248>
 80050b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	dc39      	bgt.n	800512c <_printf_float+0x2f4>
 80050b8:	4a1b      	ldr	r2, [pc, #108]	; (8005128 <_printf_float+0x2f0>)
 80050ba:	2301      	movs	r3, #1
 80050bc:	4631      	mov	r1, r6
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	f43f af19 	beq.w	8004efa <_printf_float+0xc2>
 80050c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050cc:	4313      	orrs	r3, r2
 80050ce:	d102      	bne.n	80050d6 <_printf_float+0x29e>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	07d9      	lsls	r1, r3, #31
 80050d4:	d5d8      	bpl.n	8005088 <_printf_float+0x250>
 80050d6:	ee18 3a10 	vmov	r3, s16
 80050da:	4652      	mov	r2, sl
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af09 	beq.w	8004efa <_printf_float+0xc2>
 80050e8:	f04f 0900 	mov.w	r9, #0
 80050ec:	f104 0a1a 	add.w	sl, r4, #26
 80050f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f2:	425b      	negs	r3, r3
 80050f4:	454b      	cmp	r3, r9
 80050f6:	dc01      	bgt.n	80050fc <_printf_float+0x2c4>
 80050f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050fa:	e792      	b.n	8005022 <_printf_float+0x1ea>
 80050fc:	2301      	movs	r3, #1
 80050fe:	4652      	mov	r2, sl
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f aef7 	beq.w	8004efa <_printf_float+0xc2>
 800510c:	f109 0901 	add.w	r9, r9, #1
 8005110:	e7ee      	b.n	80050f0 <_printf_float+0x2b8>
 8005112:	bf00      	nop
 8005114:	7fefffff 	.word	0x7fefffff
 8005118:	08008338 	.word	0x08008338
 800511c:	0800833c 	.word	0x0800833c
 8005120:	08008344 	.word	0x08008344
 8005124:	08008340 	.word	0x08008340
 8005128:	08008348 	.word	0x08008348
 800512c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800512e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005130:	429a      	cmp	r2, r3
 8005132:	bfa8      	it	ge
 8005134:	461a      	movge	r2, r3
 8005136:	2a00      	cmp	r2, #0
 8005138:	4691      	mov	r9, r2
 800513a:	dc37      	bgt.n	80051ac <_printf_float+0x374>
 800513c:	f04f 0b00 	mov.w	fp, #0
 8005140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005144:	f104 021a 	add.w	r2, r4, #26
 8005148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800514a:	9305      	str	r3, [sp, #20]
 800514c:	eba3 0309 	sub.w	r3, r3, r9
 8005150:	455b      	cmp	r3, fp
 8005152:	dc33      	bgt.n	80051bc <_printf_float+0x384>
 8005154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005158:	429a      	cmp	r2, r3
 800515a:	db3b      	blt.n	80051d4 <_printf_float+0x39c>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	07da      	lsls	r2, r3, #31
 8005160:	d438      	bmi.n	80051d4 <_printf_float+0x39c>
 8005162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005164:	9b05      	ldr	r3, [sp, #20]
 8005166:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	eba2 0901 	sub.w	r9, r2, r1
 800516e:	4599      	cmp	r9, r3
 8005170:	bfa8      	it	ge
 8005172:	4699      	movge	r9, r3
 8005174:	f1b9 0f00 	cmp.w	r9, #0
 8005178:	dc35      	bgt.n	80051e6 <_printf_float+0x3ae>
 800517a:	f04f 0800 	mov.w	r8, #0
 800517e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005182:	f104 0a1a 	add.w	sl, r4, #26
 8005186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	eba3 0309 	sub.w	r3, r3, r9
 8005190:	4543      	cmp	r3, r8
 8005192:	f77f af79 	ble.w	8005088 <_printf_float+0x250>
 8005196:	2301      	movs	r3, #1
 8005198:	4652      	mov	r2, sl
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f aeaa 	beq.w	8004efa <_printf_float+0xc2>
 80051a6:	f108 0801 	add.w	r8, r8, #1
 80051aa:	e7ec      	b.n	8005186 <_printf_float+0x34e>
 80051ac:	4613      	mov	r3, r2
 80051ae:	4631      	mov	r1, r6
 80051b0:	4642      	mov	r2, r8
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	d1c0      	bne.n	800513c <_printf_float+0x304>
 80051ba:	e69e      	b.n	8004efa <_printf_float+0xc2>
 80051bc:	2301      	movs	r3, #1
 80051be:	4631      	mov	r1, r6
 80051c0:	4628      	mov	r0, r5
 80051c2:	9205      	str	r2, [sp, #20]
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f ae97 	beq.w	8004efa <_printf_float+0xc2>
 80051cc:	9a05      	ldr	r2, [sp, #20]
 80051ce:	f10b 0b01 	add.w	fp, fp, #1
 80051d2:	e7b9      	b.n	8005148 <_printf_float+0x310>
 80051d4:	ee18 3a10 	vmov	r3, s16
 80051d8:	4652      	mov	r2, sl
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	d1be      	bne.n	8005162 <_printf_float+0x32a>
 80051e4:	e689      	b.n	8004efa <_printf_float+0xc2>
 80051e6:	9a05      	ldr	r2, [sp, #20]
 80051e8:	464b      	mov	r3, r9
 80051ea:	4442      	add	r2, r8
 80051ec:	4631      	mov	r1, r6
 80051ee:	4628      	mov	r0, r5
 80051f0:	47b8      	blx	r7
 80051f2:	3001      	adds	r0, #1
 80051f4:	d1c1      	bne.n	800517a <_printf_float+0x342>
 80051f6:	e680      	b.n	8004efa <_printf_float+0xc2>
 80051f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051fa:	2a01      	cmp	r2, #1
 80051fc:	dc01      	bgt.n	8005202 <_printf_float+0x3ca>
 80051fe:	07db      	lsls	r3, r3, #31
 8005200:	d538      	bpl.n	8005274 <_printf_float+0x43c>
 8005202:	2301      	movs	r3, #1
 8005204:	4642      	mov	r2, r8
 8005206:	4631      	mov	r1, r6
 8005208:	4628      	mov	r0, r5
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	f43f ae74 	beq.w	8004efa <_printf_float+0xc2>
 8005212:	ee18 3a10 	vmov	r3, s16
 8005216:	4652      	mov	r2, sl
 8005218:	4631      	mov	r1, r6
 800521a:	4628      	mov	r0, r5
 800521c:	47b8      	blx	r7
 800521e:	3001      	adds	r0, #1
 8005220:	f43f ae6b 	beq.w	8004efa <_printf_float+0xc2>
 8005224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005228:	2200      	movs	r2, #0
 800522a:	2300      	movs	r3, #0
 800522c:	f7fb fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005230:	b9d8      	cbnz	r0, 800526a <_printf_float+0x432>
 8005232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005234:	f108 0201 	add.w	r2, r8, #1
 8005238:	3b01      	subs	r3, #1
 800523a:	4631      	mov	r1, r6
 800523c:	4628      	mov	r0, r5
 800523e:	47b8      	blx	r7
 8005240:	3001      	adds	r0, #1
 8005242:	d10e      	bne.n	8005262 <_printf_float+0x42a>
 8005244:	e659      	b.n	8004efa <_printf_float+0xc2>
 8005246:	2301      	movs	r3, #1
 8005248:	4652      	mov	r2, sl
 800524a:	4631      	mov	r1, r6
 800524c:	4628      	mov	r0, r5
 800524e:	47b8      	blx	r7
 8005250:	3001      	adds	r0, #1
 8005252:	f43f ae52 	beq.w	8004efa <_printf_float+0xc2>
 8005256:	f108 0801 	add.w	r8, r8, #1
 800525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	4543      	cmp	r3, r8
 8005260:	dcf1      	bgt.n	8005246 <_printf_float+0x40e>
 8005262:	464b      	mov	r3, r9
 8005264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005268:	e6dc      	b.n	8005024 <_printf_float+0x1ec>
 800526a:	f04f 0800 	mov.w	r8, #0
 800526e:	f104 0a1a 	add.w	sl, r4, #26
 8005272:	e7f2      	b.n	800525a <_printf_float+0x422>
 8005274:	2301      	movs	r3, #1
 8005276:	4642      	mov	r2, r8
 8005278:	e7df      	b.n	800523a <_printf_float+0x402>
 800527a:	2301      	movs	r3, #1
 800527c:	464a      	mov	r2, r9
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	47b8      	blx	r7
 8005284:	3001      	adds	r0, #1
 8005286:	f43f ae38 	beq.w	8004efa <_printf_float+0xc2>
 800528a:	f108 0801 	add.w	r8, r8, #1
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005292:	1a5b      	subs	r3, r3, r1
 8005294:	4543      	cmp	r3, r8
 8005296:	dcf0      	bgt.n	800527a <_printf_float+0x442>
 8005298:	e6fa      	b.n	8005090 <_printf_float+0x258>
 800529a:	f04f 0800 	mov.w	r8, #0
 800529e:	f104 0919 	add.w	r9, r4, #25
 80052a2:	e7f4      	b.n	800528e <_printf_float+0x456>

080052a4 <_printf_common>:
 80052a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a8:	4616      	mov	r6, r2
 80052aa:	4699      	mov	r9, r3
 80052ac:	688a      	ldr	r2, [r1, #8]
 80052ae:	690b      	ldr	r3, [r1, #16]
 80052b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052b4:	4293      	cmp	r3, r2
 80052b6:	bfb8      	it	lt
 80052b8:	4613      	movlt	r3, r2
 80052ba:	6033      	str	r3, [r6, #0]
 80052bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052c0:	4607      	mov	r7, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	b10a      	cbz	r2, 80052ca <_printf_common+0x26>
 80052c6:	3301      	adds	r3, #1
 80052c8:	6033      	str	r3, [r6, #0]
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	0699      	lsls	r1, r3, #26
 80052ce:	bf42      	ittt	mi
 80052d0:	6833      	ldrmi	r3, [r6, #0]
 80052d2:	3302      	addmi	r3, #2
 80052d4:	6033      	strmi	r3, [r6, #0]
 80052d6:	6825      	ldr	r5, [r4, #0]
 80052d8:	f015 0506 	ands.w	r5, r5, #6
 80052dc:	d106      	bne.n	80052ec <_printf_common+0x48>
 80052de:	f104 0a19 	add.w	sl, r4, #25
 80052e2:	68e3      	ldr	r3, [r4, #12]
 80052e4:	6832      	ldr	r2, [r6, #0]
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	dc26      	bgt.n	800533a <_printf_common+0x96>
 80052ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052f0:	1e13      	subs	r3, r2, #0
 80052f2:	6822      	ldr	r2, [r4, #0]
 80052f4:	bf18      	it	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	0692      	lsls	r2, r2, #26
 80052fa:	d42b      	bmi.n	8005354 <_printf_common+0xb0>
 80052fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005300:	4649      	mov	r1, r9
 8005302:	4638      	mov	r0, r7
 8005304:	47c0      	blx	r8
 8005306:	3001      	adds	r0, #1
 8005308:	d01e      	beq.n	8005348 <_printf_common+0xa4>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	68e5      	ldr	r5, [r4, #12]
 800530e:	6832      	ldr	r2, [r6, #0]
 8005310:	f003 0306 	and.w	r3, r3, #6
 8005314:	2b04      	cmp	r3, #4
 8005316:	bf08      	it	eq
 8005318:	1aad      	subeq	r5, r5, r2
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	6922      	ldr	r2, [r4, #16]
 800531e:	bf0c      	ite	eq
 8005320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005324:	2500      	movne	r5, #0
 8005326:	4293      	cmp	r3, r2
 8005328:	bfc4      	itt	gt
 800532a:	1a9b      	subgt	r3, r3, r2
 800532c:	18ed      	addgt	r5, r5, r3
 800532e:	2600      	movs	r6, #0
 8005330:	341a      	adds	r4, #26
 8005332:	42b5      	cmp	r5, r6
 8005334:	d11a      	bne.n	800536c <_printf_common+0xc8>
 8005336:	2000      	movs	r0, #0
 8005338:	e008      	b.n	800534c <_printf_common+0xa8>
 800533a:	2301      	movs	r3, #1
 800533c:	4652      	mov	r2, sl
 800533e:	4649      	mov	r1, r9
 8005340:	4638      	mov	r0, r7
 8005342:	47c0      	blx	r8
 8005344:	3001      	adds	r0, #1
 8005346:	d103      	bne.n	8005350 <_printf_common+0xac>
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005350:	3501      	adds	r5, #1
 8005352:	e7c6      	b.n	80052e2 <_printf_common+0x3e>
 8005354:	18e1      	adds	r1, r4, r3
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	2030      	movs	r0, #48	; 0x30
 800535a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800535e:	4422      	add	r2, r4
 8005360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005368:	3302      	adds	r3, #2
 800536a:	e7c7      	b.n	80052fc <_printf_common+0x58>
 800536c:	2301      	movs	r3, #1
 800536e:	4622      	mov	r2, r4
 8005370:	4649      	mov	r1, r9
 8005372:	4638      	mov	r0, r7
 8005374:	47c0      	blx	r8
 8005376:	3001      	adds	r0, #1
 8005378:	d0e6      	beq.n	8005348 <_printf_common+0xa4>
 800537a:	3601      	adds	r6, #1
 800537c:	e7d9      	b.n	8005332 <_printf_common+0x8e>
	...

08005380 <_printf_i>:
 8005380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005384:	460c      	mov	r4, r1
 8005386:	4691      	mov	r9, r2
 8005388:	7e27      	ldrb	r7, [r4, #24]
 800538a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800538c:	2f78      	cmp	r7, #120	; 0x78
 800538e:	4680      	mov	r8, r0
 8005390:	469a      	mov	sl, r3
 8005392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005396:	d807      	bhi.n	80053a8 <_printf_i+0x28>
 8005398:	2f62      	cmp	r7, #98	; 0x62
 800539a:	d80a      	bhi.n	80053b2 <_printf_i+0x32>
 800539c:	2f00      	cmp	r7, #0
 800539e:	f000 80d8 	beq.w	8005552 <_printf_i+0x1d2>
 80053a2:	2f58      	cmp	r7, #88	; 0x58
 80053a4:	f000 80a3 	beq.w	80054ee <_printf_i+0x16e>
 80053a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053b0:	e03a      	b.n	8005428 <_printf_i+0xa8>
 80053b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053b6:	2b15      	cmp	r3, #21
 80053b8:	d8f6      	bhi.n	80053a8 <_printf_i+0x28>
 80053ba:	a001      	add	r0, pc, #4	; (adr r0, 80053c0 <_printf_i+0x40>)
 80053bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053c0:	08005419 	.word	0x08005419
 80053c4:	0800542d 	.word	0x0800542d
 80053c8:	080053a9 	.word	0x080053a9
 80053cc:	080053a9 	.word	0x080053a9
 80053d0:	080053a9 	.word	0x080053a9
 80053d4:	080053a9 	.word	0x080053a9
 80053d8:	0800542d 	.word	0x0800542d
 80053dc:	080053a9 	.word	0x080053a9
 80053e0:	080053a9 	.word	0x080053a9
 80053e4:	080053a9 	.word	0x080053a9
 80053e8:	080053a9 	.word	0x080053a9
 80053ec:	08005539 	.word	0x08005539
 80053f0:	0800545d 	.word	0x0800545d
 80053f4:	0800551b 	.word	0x0800551b
 80053f8:	080053a9 	.word	0x080053a9
 80053fc:	080053a9 	.word	0x080053a9
 8005400:	0800555b 	.word	0x0800555b
 8005404:	080053a9 	.word	0x080053a9
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080053a9 	.word	0x080053a9
 8005410:	080053a9 	.word	0x080053a9
 8005414:	08005523 	.word	0x08005523
 8005418:	680b      	ldr	r3, [r1, #0]
 800541a:	1d1a      	adds	r2, r3, #4
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	600a      	str	r2, [r1, #0]
 8005420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005428:	2301      	movs	r3, #1
 800542a:	e0a3      	b.n	8005574 <_printf_i+0x1f4>
 800542c:	6825      	ldr	r5, [r4, #0]
 800542e:	6808      	ldr	r0, [r1, #0]
 8005430:	062e      	lsls	r6, r5, #24
 8005432:	f100 0304 	add.w	r3, r0, #4
 8005436:	d50a      	bpl.n	800544e <_printf_i+0xce>
 8005438:	6805      	ldr	r5, [r0, #0]
 800543a:	600b      	str	r3, [r1, #0]
 800543c:	2d00      	cmp	r5, #0
 800543e:	da03      	bge.n	8005448 <_printf_i+0xc8>
 8005440:	232d      	movs	r3, #45	; 0x2d
 8005442:	426d      	negs	r5, r5
 8005444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005448:	485e      	ldr	r0, [pc, #376]	; (80055c4 <_printf_i+0x244>)
 800544a:	230a      	movs	r3, #10
 800544c:	e019      	b.n	8005482 <_printf_i+0x102>
 800544e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005452:	6805      	ldr	r5, [r0, #0]
 8005454:	600b      	str	r3, [r1, #0]
 8005456:	bf18      	it	ne
 8005458:	b22d      	sxthne	r5, r5
 800545a:	e7ef      	b.n	800543c <_printf_i+0xbc>
 800545c:	680b      	ldr	r3, [r1, #0]
 800545e:	6825      	ldr	r5, [r4, #0]
 8005460:	1d18      	adds	r0, r3, #4
 8005462:	6008      	str	r0, [r1, #0]
 8005464:	0628      	lsls	r0, r5, #24
 8005466:	d501      	bpl.n	800546c <_printf_i+0xec>
 8005468:	681d      	ldr	r5, [r3, #0]
 800546a:	e002      	b.n	8005472 <_printf_i+0xf2>
 800546c:	0669      	lsls	r1, r5, #25
 800546e:	d5fb      	bpl.n	8005468 <_printf_i+0xe8>
 8005470:	881d      	ldrh	r5, [r3, #0]
 8005472:	4854      	ldr	r0, [pc, #336]	; (80055c4 <_printf_i+0x244>)
 8005474:	2f6f      	cmp	r7, #111	; 0x6f
 8005476:	bf0c      	ite	eq
 8005478:	2308      	moveq	r3, #8
 800547a:	230a      	movne	r3, #10
 800547c:	2100      	movs	r1, #0
 800547e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005482:	6866      	ldr	r6, [r4, #4]
 8005484:	60a6      	str	r6, [r4, #8]
 8005486:	2e00      	cmp	r6, #0
 8005488:	bfa2      	ittt	ge
 800548a:	6821      	ldrge	r1, [r4, #0]
 800548c:	f021 0104 	bicge.w	r1, r1, #4
 8005490:	6021      	strge	r1, [r4, #0]
 8005492:	b90d      	cbnz	r5, 8005498 <_printf_i+0x118>
 8005494:	2e00      	cmp	r6, #0
 8005496:	d04d      	beq.n	8005534 <_printf_i+0x1b4>
 8005498:	4616      	mov	r6, r2
 800549a:	fbb5 f1f3 	udiv	r1, r5, r3
 800549e:	fb03 5711 	mls	r7, r3, r1, r5
 80054a2:	5dc7      	ldrb	r7, [r0, r7]
 80054a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054a8:	462f      	mov	r7, r5
 80054aa:	42bb      	cmp	r3, r7
 80054ac:	460d      	mov	r5, r1
 80054ae:	d9f4      	bls.n	800549a <_printf_i+0x11a>
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d10b      	bne.n	80054cc <_printf_i+0x14c>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	07df      	lsls	r7, r3, #31
 80054b8:	d508      	bpl.n	80054cc <_printf_i+0x14c>
 80054ba:	6923      	ldr	r3, [r4, #16]
 80054bc:	6861      	ldr	r1, [r4, #4]
 80054be:	4299      	cmp	r1, r3
 80054c0:	bfde      	ittt	le
 80054c2:	2330      	movle	r3, #48	; 0x30
 80054c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054cc:	1b92      	subs	r2, r2, r6
 80054ce:	6122      	str	r2, [r4, #16]
 80054d0:	f8cd a000 	str.w	sl, [sp]
 80054d4:	464b      	mov	r3, r9
 80054d6:	aa03      	add	r2, sp, #12
 80054d8:	4621      	mov	r1, r4
 80054da:	4640      	mov	r0, r8
 80054dc:	f7ff fee2 	bl	80052a4 <_printf_common>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d14c      	bne.n	800557e <_printf_i+0x1fe>
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295
 80054e8:	b004      	add	sp, #16
 80054ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ee:	4835      	ldr	r0, [pc, #212]	; (80055c4 <_printf_i+0x244>)
 80054f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	680e      	ldr	r6, [r1, #0]
 80054f8:	061f      	lsls	r7, r3, #24
 80054fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80054fe:	600e      	str	r6, [r1, #0]
 8005500:	d514      	bpl.n	800552c <_printf_i+0x1ac>
 8005502:	07d9      	lsls	r1, r3, #31
 8005504:	bf44      	itt	mi
 8005506:	f043 0320 	orrmi.w	r3, r3, #32
 800550a:	6023      	strmi	r3, [r4, #0]
 800550c:	b91d      	cbnz	r5, 8005516 <_printf_i+0x196>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	f023 0320 	bic.w	r3, r3, #32
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	2310      	movs	r3, #16
 8005518:	e7b0      	b.n	800547c <_printf_i+0xfc>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f043 0320 	orr.w	r3, r3, #32
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	2378      	movs	r3, #120	; 0x78
 8005524:	4828      	ldr	r0, [pc, #160]	; (80055c8 <_printf_i+0x248>)
 8005526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800552a:	e7e3      	b.n	80054f4 <_printf_i+0x174>
 800552c:	065e      	lsls	r6, r3, #25
 800552e:	bf48      	it	mi
 8005530:	b2ad      	uxthmi	r5, r5
 8005532:	e7e6      	b.n	8005502 <_printf_i+0x182>
 8005534:	4616      	mov	r6, r2
 8005536:	e7bb      	b.n	80054b0 <_printf_i+0x130>
 8005538:	680b      	ldr	r3, [r1, #0]
 800553a:	6826      	ldr	r6, [r4, #0]
 800553c:	6960      	ldr	r0, [r4, #20]
 800553e:	1d1d      	adds	r5, r3, #4
 8005540:	600d      	str	r5, [r1, #0]
 8005542:	0635      	lsls	r5, r6, #24
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	d501      	bpl.n	800554c <_printf_i+0x1cc>
 8005548:	6018      	str	r0, [r3, #0]
 800554a:	e002      	b.n	8005552 <_printf_i+0x1d2>
 800554c:	0671      	lsls	r1, r6, #25
 800554e:	d5fb      	bpl.n	8005548 <_printf_i+0x1c8>
 8005550:	8018      	strh	r0, [r3, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	4616      	mov	r6, r2
 8005558:	e7ba      	b.n	80054d0 <_printf_i+0x150>
 800555a:	680b      	ldr	r3, [r1, #0]
 800555c:	1d1a      	adds	r2, r3, #4
 800555e:	600a      	str	r2, [r1, #0]
 8005560:	681e      	ldr	r6, [r3, #0]
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	2100      	movs	r1, #0
 8005566:	4630      	mov	r0, r6
 8005568:	f7fa fe3a 	bl	80001e0 <memchr>
 800556c:	b108      	cbz	r0, 8005572 <_printf_i+0x1f2>
 800556e:	1b80      	subs	r0, r0, r6
 8005570:	6060      	str	r0, [r4, #4]
 8005572:	6863      	ldr	r3, [r4, #4]
 8005574:	6123      	str	r3, [r4, #16]
 8005576:	2300      	movs	r3, #0
 8005578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557c:	e7a8      	b.n	80054d0 <_printf_i+0x150>
 800557e:	6923      	ldr	r3, [r4, #16]
 8005580:	4632      	mov	r2, r6
 8005582:	4649      	mov	r1, r9
 8005584:	4640      	mov	r0, r8
 8005586:	47d0      	blx	sl
 8005588:	3001      	adds	r0, #1
 800558a:	d0ab      	beq.n	80054e4 <_printf_i+0x164>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	079b      	lsls	r3, r3, #30
 8005590:	d413      	bmi.n	80055ba <_printf_i+0x23a>
 8005592:	68e0      	ldr	r0, [r4, #12]
 8005594:	9b03      	ldr	r3, [sp, #12]
 8005596:	4298      	cmp	r0, r3
 8005598:	bfb8      	it	lt
 800559a:	4618      	movlt	r0, r3
 800559c:	e7a4      	b.n	80054e8 <_printf_i+0x168>
 800559e:	2301      	movs	r3, #1
 80055a0:	4632      	mov	r2, r6
 80055a2:	4649      	mov	r1, r9
 80055a4:	4640      	mov	r0, r8
 80055a6:	47d0      	blx	sl
 80055a8:	3001      	adds	r0, #1
 80055aa:	d09b      	beq.n	80054e4 <_printf_i+0x164>
 80055ac:	3501      	adds	r5, #1
 80055ae:	68e3      	ldr	r3, [r4, #12]
 80055b0:	9903      	ldr	r1, [sp, #12]
 80055b2:	1a5b      	subs	r3, r3, r1
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	dcf2      	bgt.n	800559e <_printf_i+0x21e>
 80055b8:	e7eb      	b.n	8005592 <_printf_i+0x212>
 80055ba:	2500      	movs	r5, #0
 80055bc:	f104 0619 	add.w	r6, r4, #25
 80055c0:	e7f5      	b.n	80055ae <_printf_i+0x22e>
 80055c2:	bf00      	nop
 80055c4:	0800834a 	.word	0x0800834a
 80055c8:	0800835b 	.word	0x0800835b

080055cc <sniprintf>:
 80055cc:	b40c      	push	{r2, r3}
 80055ce:	b530      	push	{r4, r5, lr}
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <sniprintf+0x64>)
 80055d2:	1e0c      	subs	r4, r1, #0
 80055d4:	681d      	ldr	r5, [r3, #0]
 80055d6:	b09d      	sub	sp, #116	; 0x74
 80055d8:	da08      	bge.n	80055ec <sniprintf+0x20>
 80055da:	238b      	movs	r3, #139	; 0x8b
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f04f 30ff 	mov.w	r0, #4294967295
 80055e2:	b01d      	add	sp, #116	; 0x74
 80055e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055e8:	b002      	add	sp, #8
 80055ea:	4770      	bx	lr
 80055ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 80055f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80055f4:	bf14      	ite	ne
 80055f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80055fa:	4623      	moveq	r3, r4
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	9307      	str	r3, [sp, #28]
 8005600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005604:	9002      	str	r0, [sp, #8]
 8005606:	9006      	str	r0, [sp, #24]
 8005608:	f8ad 3016 	strh.w	r3, [sp, #22]
 800560c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800560e:	ab21      	add	r3, sp, #132	; 0x84
 8005610:	a902      	add	r1, sp, #8
 8005612:	4628      	mov	r0, r5
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	f001 fb35 	bl	8006c84 <_svfiprintf_r>
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	bfbc      	itt	lt
 800561e:	238b      	movlt	r3, #139	; 0x8b
 8005620:	602b      	strlt	r3, [r5, #0]
 8005622:	2c00      	cmp	r4, #0
 8005624:	d0dd      	beq.n	80055e2 <sniprintf+0x16>
 8005626:	9b02      	ldr	r3, [sp, #8]
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	e7d9      	b.n	80055e2 <sniprintf+0x16>
 800562e:	bf00      	nop
 8005630:	2000000c 	.word	0x2000000c

08005634 <quorem>:
 8005634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	6903      	ldr	r3, [r0, #16]
 800563a:	690c      	ldr	r4, [r1, #16]
 800563c:	42a3      	cmp	r3, r4
 800563e:	4607      	mov	r7, r0
 8005640:	f2c0 8081 	blt.w	8005746 <quorem+0x112>
 8005644:	3c01      	subs	r4, #1
 8005646:	f101 0814 	add.w	r8, r1, #20
 800564a:	f100 0514 	add.w	r5, r0, #20
 800564e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800565c:	3301      	adds	r3, #1
 800565e:	429a      	cmp	r2, r3
 8005660:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005668:	fbb2 f6f3 	udiv	r6, r2, r3
 800566c:	d331      	bcc.n	80056d2 <quorem+0x9e>
 800566e:	f04f 0e00 	mov.w	lr, #0
 8005672:	4640      	mov	r0, r8
 8005674:	46ac      	mov	ip, r5
 8005676:	46f2      	mov	sl, lr
 8005678:	f850 2b04 	ldr.w	r2, [r0], #4
 800567c:	b293      	uxth	r3, r2
 800567e:	fb06 e303 	mla	r3, r6, r3, lr
 8005682:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005686:	b29b      	uxth	r3, r3
 8005688:	ebaa 0303 	sub.w	r3, sl, r3
 800568c:	0c12      	lsrs	r2, r2, #16
 800568e:	f8dc a000 	ldr.w	sl, [ip]
 8005692:	fb06 e202 	mla	r2, r6, r2, lr
 8005696:	fa13 f38a 	uxtah	r3, r3, sl
 800569a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800569e:	fa1f fa82 	uxth.w	sl, r2
 80056a2:	f8dc 2000 	ldr.w	r2, [ip]
 80056a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80056aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b4:	4581      	cmp	r9, r0
 80056b6:	f84c 3b04 	str.w	r3, [ip], #4
 80056ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056be:	d2db      	bcs.n	8005678 <quorem+0x44>
 80056c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80056c4:	b92b      	cbnz	r3, 80056d2 <quorem+0x9e>
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	3b04      	subs	r3, #4
 80056ca:	429d      	cmp	r5, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	d32e      	bcc.n	800572e <quorem+0xfa>
 80056d0:	613c      	str	r4, [r7, #16]
 80056d2:	4638      	mov	r0, r7
 80056d4:	f001 f8c0 	bl	8006858 <__mcmp>
 80056d8:	2800      	cmp	r0, #0
 80056da:	db24      	blt.n	8005726 <quorem+0xf2>
 80056dc:	3601      	adds	r6, #1
 80056de:	4628      	mov	r0, r5
 80056e0:	f04f 0c00 	mov.w	ip, #0
 80056e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80056e8:	f8d0 e000 	ldr.w	lr, [r0]
 80056ec:	b293      	uxth	r3, r2
 80056ee:	ebac 0303 	sub.w	r3, ip, r3
 80056f2:	0c12      	lsrs	r2, r2, #16
 80056f4:	fa13 f38e 	uxtah	r3, r3, lr
 80056f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005706:	45c1      	cmp	r9, r8
 8005708:	f840 3b04 	str.w	r3, [r0], #4
 800570c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005710:	d2e8      	bcs.n	80056e4 <quorem+0xb0>
 8005712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800571a:	b922      	cbnz	r2, 8005726 <quorem+0xf2>
 800571c:	3b04      	subs	r3, #4
 800571e:	429d      	cmp	r5, r3
 8005720:	461a      	mov	r2, r3
 8005722:	d30a      	bcc.n	800573a <quorem+0x106>
 8005724:	613c      	str	r4, [r7, #16]
 8005726:	4630      	mov	r0, r6
 8005728:	b003      	add	sp, #12
 800572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	3b04      	subs	r3, #4
 8005732:	2a00      	cmp	r2, #0
 8005734:	d1cc      	bne.n	80056d0 <quorem+0x9c>
 8005736:	3c01      	subs	r4, #1
 8005738:	e7c7      	b.n	80056ca <quorem+0x96>
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	3b04      	subs	r3, #4
 800573e:	2a00      	cmp	r2, #0
 8005740:	d1f0      	bne.n	8005724 <quorem+0xf0>
 8005742:	3c01      	subs	r4, #1
 8005744:	e7eb      	b.n	800571e <quorem+0xea>
 8005746:	2000      	movs	r0, #0
 8005748:	e7ee      	b.n	8005728 <quorem+0xf4>
 800574a:	0000      	movs	r0, r0
 800574c:	0000      	movs	r0, r0
	...

08005750 <_dtoa_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	ed2d 8b02 	vpush	{d8}
 8005758:	ec57 6b10 	vmov	r6, r7, d0
 800575c:	b095      	sub	sp, #84	; 0x54
 800575e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005764:	9105      	str	r1, [sp, #20]
 8005766:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800576a:	4604      	mov	r4, r0
 800576c:	9209      	str	r2, [sp, #36]	; 0x24
 800576e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005770:	b975      	cbnz	r5, 8005790 <_dtoa_r+0x40>
 8005772:	2010      	movs	r0, #16
 8005774:	f000 fddc 	bl	8006330 <malloc>
 8005778:	4602      	mov	r2, r0
 800577a:	6260      	str	r0, [r4, #36]	; 0x24
 800577c:	b920      	cbnz	r0, 8005788 <_dtoa_r+0x38>
 800577e:	4bb2      	ldr	r3, [pc, #712]	; (8005a48 <_dtoa_r+0x2f8>)
 8005780:	21ea      	movs	r1, #234	; 0xea
 8005782:	48b2      	ldr	r0, [pc, #712]	; (8005a4c <_dtoa_r+0x2fc>)
 8005784:	f001 fb8e 	bl	8006ea4 <__assert_func>
 8005788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800578c:	6005      	str	r5, [r0, #0]
 800578e:	60c5      	str	r5, [r0, #12]
 8005790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	b151      	cbz	r1, 80057ac <_dtoa_r+0x5c>
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	604a      	str	r2, [r1, #4]
 800579a:	2301      	movs	r3, #1
 800579c:	4093      	lsls	r3, r2
 800579e:	608b      	str	r3, [r1, #8]
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 fe1b 	bl	80063dc <_Bfree>
 80057a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	1e3b      	subs	r3, r7, #0
 80057ae:	bfb9      	ittee	lt
 80057b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057b4:	9303      	strlt	r3, [sp, #12]
 80057b6:	2300      	movge	r3, #0
 80057b8:	f8c8 3000 	strge.w	r3, [r8]
 80057bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80057c0:	4ba3      	ldr	r3, [pc, #652]	; (8005a50 <_dtoa_r+0x300>)
 80057c2:	bfbc      	itt	lt
 80057c4:	2201      	movlt	r2, #1
 80057c6:	f8c8 2000 	strlt.w	r2, [r8]
 80057ca:	ea33 0309 	bics.w	r3, r3, r9
 80057ce:	d11b      	bne.n	8005808 <_dtoa_r+0xb8>
 80057d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057dc:	4333      	orrs	r3, r6
 80057de:	f000 857a 	beq.w	80062d6 <_dtoa_r+0xb86>
 80057e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057e4:	b963      	cbnz	r3, 8005800 <_dtoa_r+0xb0>
 80057e6:	4b9b      	ldr	r3, [pc, #620]	; (8005a54 <_dtoa_r+0x304>)
 80057e8:	e024      	b.n	8005834 <_dtoa_r+0xe4>
 80057ea:	4b9b      	ldr	r3, [pc, #620]	; (8005a58 <_dtoa_r+0x308>)
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	9800      	ldr	r0, [sp, #0]
 80057f6:	b015      	add	sp, #84	; 0x54
 80057f8:	ecbd 8b02 	vpop	{d8}
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005800:	4b94      	ldr	r3, [pc, #592]	; (8005a54 <_dtoa_r+0x304>)
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	3303      	adds	r3, #3
 8005806:	e7f3      	b.n	80057f0 <_dtoa_r+0xa0>
 8005808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	ec51 0b17 	vmov	r0, r1, d7
 8005812:	2300      	movs	r3, #0
 8005814:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005818:	f7fb f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800581c:	4680      	mov	r8, r0
 800581e:	b158      	cbz	r0, 8005838 <_dtoa_r+0xe8>
 8005820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005822:	2301      	movs	r3, #1
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8551 	beq.w	80062d0 <_dtoa_r+0xb80>
 800582e:	488b      	ldr	r0, [pc, #556]	; (8005a5c <_dtoa_r+0x30c>)
 8005830:	6018      	str	r0, [r3, #0]
 8005832:	1e43      	subs	r3, r0, #1
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	e7dd      	b.n	80057f4 <_dtoa_r+0xa4>
 8005838:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800583c:	aa12      	add	r2, sp, #72	; 0x48
 800583e:	a913      	add	r1, sp, #76	; 0x4c
 8005840:	4620      	mov	r0, r4
 8005842:	f001 f8ad 	bl	80069a0 <__d2b>
 8005846:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800584a:	4683      	mov	fp, r0
 800584c:	2d00      	cmp	r5, #0
 800584e:	d07c      	beq.n	800594a <_dtoa_r+0x1fa>
 8005850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005852:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800585a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800585e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800586a:	4b7d      	ldr	r3, [pc, #500]	; (8005a60 <_dtoa_r+0x310>)
 800586c:	2200      	movs	r2, #0
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fa fd09 	bl	8000288 <__aeabi_dsub>
 8005876:	a36e      	add	r3, pc, #440	; (adr r3, 8005a30 <_dtoa_r+0x2e0>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa febc 	bl	80005f8 <__aeabi_dmul>
 8005880:	a36d      	add	r3, pc, #436	; (adr r3, 8005a38 <_dtoa_r+0x2e8>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fd01 	bl	800028c <__adddf3>
 800588a:	4606      	mov	r6, r0
 800588c:	4628      	mov	r0, r5
 800588e:	460f      	mov	r7, r1
 8005890:	f7fa fe48 	bl	8000524 <__aeabi_i2d>
 8005894:	a36a      	add	r3, pc, #424	; (adr r3, 8005a40 <_dtoa_r+0x2f0>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa fead 	bl	80005f8 <__aeabi_dmul>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4630      	mov	r0, r6
 80058a4:	4639      	mov	r1, r7
 80058a6:	f7fa fcf1 	bl	800028c <__adddf3>
 80058aa:	4606      	mov	r6, r0
 80058ac:	460f      	mov	r7, r1
 80058ae:	f7fb f953 	bl	8000b58 <__aeabi_d2iz>
 80058b2:	2200      	movs	r2, #0
 80058b4:	4682      	mov	sl, r0
 80058b6:	2300      	movs	r3, #0
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb f90e 	bl	8000adc <__aeabi_dcmplt>
 80058c0:	b148      	cbz	r0, 80058d6 <_dtoa_r+0x186>
 80058c2:	4650      	mov	r0, sl
 80058c4:	f7fa fe2e 	bl	8000524 <__aeabi_i2d>
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	f7fb f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80058d0:	b908      	cbnz	r0, 80058d6 <_dtoa_r+0x186>
 80058d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058d6:	f1ba 0f16 	cmp.w	sl, #22
 80058da:	d854      	bhi.n	8005986 <_dtoa_r+0x236>
 80058dc:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <_dtoa_r+0x314>)
 80058de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058ea:	f7fb f8f7 	bl	8000adc <__aeabi_dcmplt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d04b      	beq.n	800598a <_dtoa_r+0x23a>
 80058f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058f6:	2300      	movs	r3, #0
 80058f8:	930e      	str	r3, [sp, #56]	; 0x38
 80058fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058fc:	1b5d      	subs	r5, r3, r5
 80058fe:	1e6b      	subs	r3, r5, #1
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	bf43      	ittte	mi
 8005904:	2300      	movmi	r3, #0
 8005906:	f1c5 0801 	rsbmi	r8, r5, #1
 800590a:	9304      	strmi	r3, [sp, #16]
 800590c:	f04f 0800 	movpl.w	r8, #0
 8005910:	f1ba 0f00 	cmp.w	sl, #0
 8005914:	db3b      	blt.n	800598e <_dtoa_r+0x23e>
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800591c:	4453      	add	r3, sl
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	2300      	movs	r3, #0
 8005922:	9306      	str	r3, [sp, #24]
 8005924:	9b05      	ldr	r3, [sp, #20]
 8005926:	2b09      	cmp	r3, #9
 8005928:	d869      	bhi.n	80059fe <_dtoa_r+0x2ae>
 800592a:	2b05      	cmp	r3, #5
 800592c:	bfc4      	itt	gt
 800592e:	3b04      	subgt	r3, #4
 8005930:	9305      	strgt	r3, [sp, #20]
 8005932:	9b05      	ldr	r3, [sp, #20]
 8005934:	f1a3 0302 	sub.w	r3, r3, #2
 8005938:	bfcc      	ite	gt
 800593a:	2500      	movgt	r5, #0
 800593c:	2501      	movle	r5, #1
 800593e:	2b03      	cmp	r3, #3
 8005940:	d869      	bhi.n	8005a16 <_dtoa_r+0x2c6>
 8005942:	e8df f003 	tbb	[pc, r3]
 8005946:	4e2c      	.short	0x4e2c
 8005948:	5a4c      	.short	0x5a4c
 800594a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800594e:	441d      	add	r5, r3
 8005950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005954:	2b20      	cmp	r3, #32
 8005956:	bfc1      	itttt	gt
 8005958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800595c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005960:	fa09 f303 	lslgt.w	r3, r9, r3
 8005964:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005968:	bfda      	itte	le
 800596a:	f1c3 0320 	rsble	r3, r3, #32
 800596e:	fa06 f003 	lslle.w	r0, r6, r3
 8005972:	4318      	orrgt	r0, r3
 8005974:	f7fa fdc6 	bl	8000504 <__aeabi_ui2d>
 8005978:	2301      	movs	r3, #1
 800597a:	4606      	mov	r6, r0
 800597c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005980:	3d01      	subs	r5, #1
 8005982:	9310      	str	r3, [sp, #64]	; 0x40
 8005984:	e771      	b.n	800586a <_dtoa_r+0x11a>
 8005986:	2301      	movs	r3, #1
 8005988:	e7b6      	b.n	80058f8 <_dtoa_r+0x1a8>
 800598a:	900e      	str	r0, [sp, #56]	; 0x38
 800598c:	e7b5      	b.n	80058fa <_dtoa_r+0x1aa>
 800598e:	f1ca 0300 	rsb	r3, sl, #0
 8005992:	9306      	str	r3, [sp, #24]
 8005994:	2300      	movs	r3, #0
 8005996:	eba8 080a 	sub.w	r8, r8, sl
 800599a:	930d      	str	r3, [sp, #52]	; 0x34
 800599c:	e7c2      	b.n	8005924 <_dtoa_r+0x1d4>
 800599e:	2300      	movs	r3, #0
 80059a0:	9308      	str	r3, [sp, #32]
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dc39      	bgt.n	8005a1c <_dtoa_r+0x2cc>
 80059a8:	f04f 0901 	mov.w	r9, #1
 80059ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80059b0:	464b      	mov	r3, r9
 80059b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059b8:	2200      	movs	r2, #0
 80059ba:	6042      	str	r2, [r0, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	f102 0614 	add.w	r6, r2, #20
 80059c2:	429e      	cmp	r6, r3
 80059c4:	6841      	ldr	r1, [r0, #4]
 80059c6:	d92f      	bls.n	8005a28 <_dtoa_r+0x2d8>
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fcc7 	bl	800635c <_Balloc>
 80059ce:	9000      	str	r0, [sp, #0]
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d14b      	bne.n	8005a6c <_dtoa_r+0x31c>
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <_dtoa_r+0x318>)
 80059d6:	4602      	mov	r2, r0
 80059d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059dc:	e6d1      	b.n	8005782 <_dtoa_r+0x32>
 80059de:	2301      	movs	r3, #1
 80059e0:	e7de      	b.n	80059a0 <_dtoa_r+0x250>
 80059e2:	2300      	movs	r3, #0
 80059e4:	9308      	str	r3, [sp, #32]
 80059e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e8:	eb0a 0903 	add.w	r9, sl, r3
 80059ec:	f109 0301 	add.w	r3, r9, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	bfb8      	it	lt
 80059f6:	2301      	movlt	r3, #1
 80059f8:	e7dd      	b.n	80059b6 <_dtoa_r+0x266>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7f2      	b.n	80059e4 <_dtoa_r+0x294>
 80059fe:	2501      	movs	r5, #1
 8005a00:	2300      	movs	r3, #0
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	9508      	str	r5, [sp, #32]
 8005a06:	f04f 39ff 	mov.w	r9, #4294967295
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a10:	2312      	movs	r3, #18
 8005a12:	9209      	str	r2, [sp, #36]	; 0x24
 8005a14:	e7cf      	b.n	80059b6 <_dtoa_r+0x266>
 8005a16:	2301      	movs	r3, #1
 8005a18:	9308      	str	r3, [sp, #32]
 8005a1a:	e7f4      	b.n	8005a06 <_dtoa_r+0x2b6>
 8005a1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a24:	464b      	mov	r3, r9
 8005a26:	e7c6      	b.n	80059b6 <_dtoa_r+0x266>
 8005a28:	3101      	adds	r1, #1
 8005a2a:	6041      	str	r1, [r0, #4]
 8005a2c:	0052      	lsls	r2, r2, #1
 8005a2e:	e7c6      	b.n	80059be <_dtoa_r+0x26e>
 8005a30:	636f4361 	.word	0x636f4361
 8005a34:	3fd287a7 	.word	0x3fd287a7
 8005a38:	8b60c8b3 	.word	0x8b60c8b3
 8005a3c:	3fc68a28 	.word	0x3fc68a28
 8005a40:	509f79fb 	.word	0x509f79fb
 8005a44:	3fd34413 	.word	0x3fd34413
 8005a48:	08008379 	.word	0x08008379
 8005a4c:	08008390 	.word	0x08008390
 8005a50:	7ff00000 	.word	0x7ff00000
 8005a54:	08008375 	.word	0x08008375
 8005a58:	0800836c 	.word	0x0800836c
 8005a5c:	08008349 	.word	0x08008349
 8005a60:	3ff80000 	.word	0x3ff80000
 8005a64:	08008488 	.word	0x08008488
 8005a68:	080083ef 	.word	0x080083ef
 8005a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a6e:	9a00      	ldr	r2, [sp, #0]
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	9b01      	ldr	r3, [sp, #4]
 8005a74:	2b0e      	cmp	r3, #14
 8005a76:	f200 80ad 	bhi.w	8005bd4 <_dtoa_r+0x484>
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	f000 80aa 	beq.w	8005bd4 <_dtoa_r+0x484>
 8005a80:	f1ba 0f00 	cmp.w	sl, #0
 8005a84:	dd36      	ble.n	8005af4 <_dtoa_r+0x3a4>
 8005a86:	4ac3      	ldr	r2, [pc, #780]	; (8005d94 <_dtoa_r+0x644>)
 8005a88:	f00a 030f 	and.w	r3, sl, #15
 8005a8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a90:	ed93 7b00 	vldr	d7, [r3]
 8005a94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005a9c:	eeb0 8a47 	vmov.f32	s16, s14
 8005aa0:	eef0 8a67 	vmov.f32	s17, s15
 8005aa4:	d016      	beq.n	8005ad4 <_dtoa_r+0x384>
 8005aa6:	4bbc      	ldr	r3, [pc, #752]	; (8005d98 <_dtoa_r+0x648>)
 8005aa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ab0:	f7fa fecc 	bl	800084c <__aeabi_ddiv>
 8005ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab8:	f007 070f 	and.w	r7, r7, #15
 8005abc:	2503      	movs	r5, #3
 8005abe:	4eb6      	ldr	r6, [pc, #728]	; (8005d98 <_dtoa_r+0x648>)
 8005ac0:	b957      	cbnz	r7, 8005ad8 <_dtoa_r+0x388>
 8005ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac6:	ec53 2b18 	vmov	r2, r3, d8
 8005aca:	f7fa febf 	bl	800084c <__aeabi_ddiv>
 8005ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad2:	e029      	b.n	8005b28 <_dtoa_r+0x3d8>
 8005ad4:	2502      	movs	r5, #2
 8005ad6:	e7f2      	b.n	8005abe <_dtoa_r+0x36e>
 8005ad8:	07f9      	lsls	r1, r7, #31
 8005ada:	d508      	bpl.n	8005aee <_dtoa_r+0x39e>
 8005adc:	ec51 0b18 	vmov	r0, r1, d8
 8005ae0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ae4:	f7fa fd88 	bl	80005f8 <__aeabi_dmul>
 8005ae8:	ec41 0b18 	vmov	d8, r0, r1
 8005aec:	3501      	adds	r5, #1
 8005aee:	107f      	asrs	r7, r7, #1
 8005af0:	3608      	adds	r6, #8
 8005af2:	e7e5      	b.n	8005ac0 <_dtoa_r+0x370>
 8005af4:	f000 80a6 	beq.w	8005c44 <_dtoa_r+0x4f4>
 8005af8:	f1ca 0600 	rsb	r6, sl, #0
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <_dtoa_r+0x644>)
 8005afe:	4fa6      	ldr	r7, [pc, #664]	; (8005d98 <_dtoa_r+0x648>)
 8005b00:	f006 020f 	and.w	r2, r6, #15
 8005b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b10:	f7fa fd72 	bl	80005f8 <__aeabi_dmul>
 8005b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b18:	1136      	asrs	r6, r6, #4
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2502      	movs	r5, #2
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	f040 8085 	bne.w	8005c2e <_dtoa_r+0x4de>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1d2      	bne.n	8005ace <_dtoa_r+0x37e>
 8005b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 808c 	beq.w	8005c48 <_dtoa_r+0x4f8>
 8005b30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b34:	4b99      	ldr	r3, [pc, #612]	; (8005d9c <_dtoa_r+0x64c>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa ffce 	bl	8000adc <__aeabi_dcmplt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f000 8081 	beq.w	8005c48 <_dtoa_r+0x4f8>
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d07d      	beq.n	8005c48 <_dtoa_r+0x4f8>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	dd3c      	ble.n	8005bcc <_dtoa_r+0x47c>
 8005b52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4b91      	ldr	r3, [pc, #580]	; (8005da0 <_dtoa_r+0x650>)
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	4639      	mov	r1, r7
 8005b60:	f7fa fd4a 	bl	80005f8 <__aeabi_dmul>
 8005b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b68:	3501      	adds	r5, #1
 8005b6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005b6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b72:	4628      	mov	r0, r5
 8005b74:	f7fa fcd6 	bl	8000524 <__aeabi_i2d>
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	f7fa fd3c 	bl	80005f8 <__aeabi_dmul>
 8005b80:	4b88      	ldr	r3, [pc, #544]	; (8005da4 <_dtoa_r+0x654>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	f7fa fb82 	bl	800028c <__adddf3>
 8005b88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b90:	9303      	str	r3, [sp, #12]
 8005b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d15c      	bne.n	8005c52 <_dtoa_r+0x502>
 8005b98:	4b83      	ldr	r3, [pc, #524]	; (8005da8 <_dtoa_r+0x658>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f7fa fb72 	bl	8000288 <__aeabi_dsub>
 8005ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	f7fa ffb4 	bl	8000b18 <__aeabi_dcmpgt>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f040 8296 	bne.w	80060e2 <_dtoa_r+0x992>
 8005bb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa ff8b 	bl	8000adc <__aeabi_dcmplt>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	f040 8288 	bne.w	80060dc <_dtoa_r+0x98c>
 8005bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f2c0 8158 	blt.w	8005e8c <_dtoa_r+0x73c>
 8005bdc:	f1ba 0f0e 	cmp.w	sl, #14
 8005be0:	f300 8154 	bgt.w	8005e8c <_dtoa_r+0x73c>
 8005be4:	4b6b      	ldr	r3, [pc, #428]	; (8005d94 <_dtoa_r+0x644>)
 8005be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f280 80e3 	bge.w	8005dbc <_dtoa_r+0x66c>
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f300 80df 	bgt.w	8005dbc <_dtoa_r+0x66c>
 8005bfe:	f040 826d 	bne.w	80060dc <_dtoa_r+0x98c>
 8005c02:	4b69      	ldr	r3, [pc, #420]	; (8005da8 <_dtoa_r+0x658>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f7fa fcf5 	bl	80005f8 <__aeabi_dmul>
 8005c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c12:	f7fa ff77 	bl	8000b04 <__aeabi_dcmpge>
 8005c16:	9e01      	ldr	r6, [sp, #4]
 8005c18:	4637      	mov	r7, r6
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f040 8243 	bne.w	80060a6 <_dtoa_r+0x956>
 8005c20:	9d00      	ldr	r5, [sp, #0]
 8005c22:	2331      	movs	r3, #49	; 0x31
 8005c24:	f805 3b01 	strb.w	r3, [r5], #1
 8005c28:	f10a 0a01 	add.w	sl, sl, #1
 8005c2c:	e23f      	b.n	80060ae <_dtoa_r+0x95e>
 8005c2e:	07f2      	lsls	r2, r6, #31
 8005c30:	d505      	bpl.n	8005c3e <_dtoa_r+0x4ee>
 8005c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c36:	f7fa fcdf 	bl	80005f8 <__aeabi_dmul>
 8005c3a:	3501      	adds	r5, #1
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	1076      	asrs	r6, r6, #1
 8005c40:	3708      	adds	r7, #8
 8005c42:	e76c      	b.n	8005b1e <_dtoa_r+0x3ce>
 8005c44:	2502      	movs	r5, #2
 8005c46:	e76f      	b.n	8005b28 <_dtoa_r+0x3d8>
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c50:	e78d      	b.n	8005b6e <_dtoa_r+0x41e>
 8005c52:	9900      	ldr	r1, [sp, #0]
 8005c54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c58:	4b4e      	ldr	r3, [pc, #312]	; (8005d94 <_dtoa_r+0x644>)
 8005c5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c5e:	4401      	add	r1, r0
 8005c60:	9102      	str	r1, [sp, #8]
 8005c62:	9908      	ldr	r1, [sp, #32]
 8005c64:	eeb0 8a47 	vmov.f32	s16, s14
 8005c68:	eef0 8a67 	vmov.f32	s17, s15
 8005c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d045      	beq.n	8005d04 <_dtoa_r+0x5b4>
 8005c78:	494c      	ldr	r1, [pc, #304]	; (8005dac <_dtoa_r+0x65c>)
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f7fa fde6 	bl	800084c <__aeabi_ddiv>
 8005c80:	ec53 2b18 	vmov	r2, r3, d8
 8005c84:	f7fa fb00 	bl	8000288 <__aeabi_dsub>
 8005c88:	9d00      	ldr	r5, [sp, #0]
 8005c8a:	ec41 0b18 	vmov	d8, r0, r1
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7fa ff61 	bl	8000b58 <__aeabi_d2iz>
 8005c96:	900c      	str	r0, [sp, #48]	; 0x30
 8005c98:	f7fa fc44 	bl	8000524 <__aeabi_i2d>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa faf0 	bl	8000288 <__aeabi_dsub>
 8005ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005caa:	3330      	adds	r3, #48	; 0x30
 8005cac:	f805 3b01 	strb.w	r3, [r5], #1
 8005cb0:	ec53 2b18 	vmov	r2, r3, d8
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	f7fa ff10 	bl	8000adc <__aeabi_dcmplt>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d165      	bne.n	8005d8c <_dtoa_r+0x63c>
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	4935      	ldr	r1, [pc, #212]	; (8005d9c <_dtoa_r+0x64c>)
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7fa fade 	bl	8000288 <__aeabi_dsub>
 8005ccc:	ec53 2b18 	vmov	r2, r3, d8
 8005cd0:	f7fa ff04 	bl	8000adc <__aeabi_dcmplt>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f040 80b9 	bne.w	8005e4c <_dtoa_r+0x6fc>
 8005cda:	9b02      	ldr	r3, [sp, #8]
 8005cdc:	429d      	cmp	r5, r3
 8005cde:	f43f af75 	beq.w	8005bcc <_dtoa_r+0x47c>
 8005ce2:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <_dtoa_r+0x650>)
 8005ce4:	ec51 0b18 	vmov	r0, r1, d8
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f7fa fc85 	bl	80005f8 <__aeabi_dmul>
 8005cee:	4b2c      	ldr	r3, [pc, #176]	; (8005da0 <_dtoa_r+0x650>)
 8005cf0:	ec41 0b18 	vmov	d8, r0, r1
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	f7fa fc7d 	bl	80005f8 <__aeabi_dmul>
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460f      	mov	r7, r1
 8005d02:	e7c4      	b.n	8005c8e <_dtoa_r+0x53e>
 8005d04:	ec51 0b17 	vmov	r0, r1, d7
 8005d08:	f7fa fc76 	bl	80005f8 <__aeabi_dmul>
 8005d0c:	9b02      	ldr	r3, [sp, #8]
 8005d0e:	9d00      	ldr	r5, [sp, #0]
 8005d10:	930c      	str	r3, [sp, #48]	; 0x30
 8005d12:	ec41 0b18 	vmov	d8, r0, r1
 8005d16:	4639      	mov	r1, r7
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7fa ff1d 	bl	8000b58 <__aeabi_d2iz>
 8005d1e:	9011      	str	r0, [sp, #68]	; 0x44
 8005d20:	f7fa fc00 	bl	8000524 <__aeabi_i2d>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa faac 	bl	8000288 <__aeabi_dsub>
 8005d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d32:	3330      	adds	r3, #48	; 0x30
 8005d34:	f805 3b01 	strb.w	r3, [r5], #1
 8005d38:	9b02      	ldr	r3, [sp, #8]
 8005d3a:	429d      	cmp	r5, r3
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	d134      	bne.n	8005db0 <_dtoa_r+0x660>
 8005d46:	4b19      	ldr	r3, [pc, #100]	; (8005dac <_dtoa_r+0x65c>)
 8005d48:	ec51 0b18 	vmov	r0, r1, d8
 8005d4c:	f7fa fa9e 	bl	800028c <__adddf3>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4630      	mov	r0, r6
 8005d56:	4639      	mov	r1, r7
 8005d58:	f7fa fede 	bl	8000b18 <__aeabi_dcmpgt>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d175      	bne.n	8005e4c <_dtoa_r+0x6fc>
 8005d60:	ec53 2b18 	vmov	r2, r3, d8
 8005d64:	4911      	ldr	r1, [pc, #68]	; (8005dac <_dtoa_r+0x65c>)
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fa fa8e 	bl	8000288 <__aeabi_dsub>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa feb2 	bl	8000adc <__aeabi_dcmplt>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f43f af27 	beq.w	8005bcc <_dtoa_r+0x47c>
 8005d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d80:	1e6b      	subs	r3, r5, #1
 8005d82:	930c      	str	r3, [sp, #48]	; 0x30
 8005d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d0f8      	beq.n	8005d7e <_dtoa_r+0x62e>
 8005d8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d90:	e04a      	b.n	8005e28 <_dtoa_r+0x6d8>
 8005d92:	bf00      	nop
 8005d94:	08008488 	.word	0x08008488
 8005d98:	08008460 	.word	0x08008460
 8005d9c:	3ff00000 	.word	0x3ff00000
 8005da0:	40240000 	.word	0x40240000
 8005da4:	401c0000 	.word	0x401c0000
 8005da8:	40140000 	.word	0x40140000
 8005dac:	3fe00000 	.word	0x3fe00000
 8005db0:	4baf      	ldr	r3, [pc, #700]	; (8006070 <_dtoa_r+0x920>)
 8005db2:	f7fa fc21 	bl	80005f8 <__aeabi_dmul>
 8005db6:	4606      	mov	r6, r0
 8005db8:	460f      	mov	r7, r1
 8005dba:	e7ac      	b.n	8005d16 <_dtoa_r+0x5c6>
 8005dbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dc0:	9d00      	ldr	r5, [sp, #0]
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	f7fa fd3f 	bl	800084c <__aeabi_ddiv>
 8005dce:	f7fa fec3 	bl	8000b58 <__aeabi_d2iz>
 8005dd2:	9002      	str	r0, [sp, #8]
 8005dd4:	f7fa fba6 	bl	8000524 <__aeabi_i2d>
 8005dd8:	4642      	mov	r2, r8
 8005dda:	464b      	mov	r3, r9
 8005ddc:	f7fa fc0c 	bl	80005f8 <__aeabi_dmul>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fa4e 	bl	8000288 <__aeabi_dsub>
 8005dec:	9e02      	ldr	r6, [sp, #8]
 8005dee:	9f01      	ldr	r7, [sp, #4]
 8005df0:	3630      	adds	r6, #48	; 0x30
 8005df2:	f805 6b01 	strb.w	r6, [r5], #1
 8005df6:	9e00      	ldr	r6, [sp, #0]
 8005df8:	1bae      	subs	r6, r5, r6
 8005dfa:	42b7      	cmp	r7, r6
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	d137      	bne.n	8005e72 <_dtoa_r+0x722>
 8005e02:	f7fa fa43 	bl	800028c <__adddf3>
 8005e06:	4642      	mov	r2, r8
 8005e08:	464b      	mov	r3, r9
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460f      	mov	r7, r1
 8005e0e:	f7fa fe83 	bl	8000b18 <__aeabi_dcmpgt>
 8005e12:	b9c8      	cbnz	r0, 8005e48 <_dtoa_r+0x6f8>
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	4630      	mov	r0, r6
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	f7fa fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e20:	b110      	cbz	r0, 8005e28 <_dtoa_r+0x6d8>
 8005e22:	9b02      	ldr	r3, [sp, #8]
 8005e24:	07d9      	lsls	r1, r3, #31
 8005e26:	d40f      	bmi.n	8005e48 <_dtoa_r+0x6f8>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	4659      	mov	r1, fp
 8005e2c:	f000 fad6 	bl	80063dc <_Bfree>
 8005e30:	2300      	movs	r3, #0
 8005e32:	702b      	strb	r3, [r5, #0]
 8005e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e36:	f10a 0001 	add.w	r0, sl, #1
 8005e3a:	6018      	str	r0, [r3, #0]
 8005e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f43f acd8 	beq.w	80057f4 <_dtoa_r+0xa4>
 8005e44:	601d      	str	r5, [r3, #0]
 8005e46:	e4d5      	b.n	80057f4 <_dtoa_r+0xa4>
 8005e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e54:	2a39      	cmp	r2, #57	; 0x39
 8005e56:	d108      	bne.n	8005e6a <_dtoa_r+0x71a>
 8005e58:	9a00      	ldr	r2, [sp, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d1f7      	bne.n	8005e4e <_dtoa_r+0x6fe>
 8005e5e:	9a07      	ldr	r2, [sp, #28]
 8005e60:	9900      	ldr	r1, [sp, #0]
 8005e62:	3201      	adds	r2, #1
 8005e64:	9207      	str	r2, [sp, #28]
 8005e66:	2230      	movs	r2, #48	; 0x30
 8005e68:	700a      	strb	r2, [r1, #0]
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	3201      	adds	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	e78c      	b.n	8005d8c <_dtoa_r+0x63c>
 8005e72:	4b7f      	ldr	r3, [pc, #508]	; (8006070 <_dtoa_r+0x920>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	f7fa fbbf 	bl	80005f8 <__aeabi_dmul>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4606      	mov	r6, r0
 8005e80:	460f      	mov	r7, r1
 8005e82:	f7fa fe21 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d09b      	beq.n	8005dc2 <_dtoa_r+0x672>
 8005e8a:	e7cd      	b.n	8005e28 <_dtoa_r+0x6d8>
 8005e8c:	9a08      	ldr	r2, [sp, #32]
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	f000 80c4 	beq.w	800601c <_dtoa_r+0x8cc>
 8005e94:	9a05      	ldr	r2, [sp, #20]
 8005e96:	2a01      	cmp	r2, #1
 8005e98:	f300 80a8 	bgt.w	8005fec <_dtoa_r+0x89c>
 8005e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	f000 80a0 	beq.w	8005fe4 <_dtoa_r+0x894>
 8005ea4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ea8:	9e06      	ldr	r6, [sp, #24]
 8005eaa:	4645      	mov	r5, r8
 8005eac:	9a04      	ldr	r2, [sp, #16]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	441a      	add	r2, r3
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4498      	add	r8, r3
 8005eb6:	9204      	str	r2, [sp, #16]
 8005eb8:	f000 fb4c 	bl	8006554 <__i2b>
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	dd0b      	ble.n	8005eda <_dtoa_r+0x78a>
 8005ec2:	9b04      	ldr	r3, [sp, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd08      	ble.n	8005eda <_dtoa_r+0x78a>
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	bfa8      	it	ge
 8005ece:	462b      	movge	r3, r5
 8005ed0:	eba8 0803 	sub.w	r8, r8, r3
 8005ed4:	1aed      	subs	r5, r5, r3
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	b1fb      	cbz	r3, 8005f1e <_dtoa_r+0x7ce>
 8005ede:	9b08      	ldr	r3, [sp, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 809f 	beq.w	8006024 <_dtoa_r+0x8d4>
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	dd11      	ble.n	8005f0e <_dtoa_r+0x7be>
 8005eea:	4639      	mov	r1, r7
 8005eec:	4632      	mov	r2, r6
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 fbec 	bl	80066cc <__pow5mult>
 8005ef4:	465a      	mov	r2, fp
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	4607      	mov	r7, r0
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 fb40 	bl	8006580 <__multiply>
 8005f00:	4659      	mov	r1, fp
 8005f02:	9007      	str	r0, [sp, #28]
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 fa69 	bl	80063dc <_Bfree>
 8005f0a:	9b07      	ldr	r3, [sp, #28]
 8005f0c:	469b      	mov	fp, r3
 8005f0e:	9b06      	ldr	r3, [sp, #24]
 8005f10:	1b9a      	subs	r2, r3, r6
 8005f12:	d004      	beq.n	8005f1e <_dtoa_r+0x7ce>
 8005f14:	4659      	mov	r1, fp
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 fbd8 	bl	80066cc <__pow5mult>
 8005f1c:	4683      	mov	fp, r0
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fb17 	bl	8006554 <__i2b>
 8005f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	dd7c      	ble.n	8006028 <_dtoa_r+0x8d8>
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4601      	mov	r1, r0
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fbca 	bl	80066cc <__pow5mult>
 8005f38:	9b05      	ldr	r3, [sp, #20]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	dd76      	ble.n	800602e <_dtoa_r+0x8de>
 8005f40:	2300      	movs	r3, #0
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	6933      	ldr	r3, [r6, #16]
 8005f46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f4a:	6918      	ldr	r0, [r3, #16]
 8005f4c:	f000 fab2 	bl	80064b4 <__hi0bits>
 8005f50:	f1c0 0020 	rsb	r0, r0, #32
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	4418      	add	r0, r3
 8005f58:	f010 001f 	ands.w	r0, r0, #31
 8005f5c:	f000 8086 	beq.w	800606c <_dtoa_r+0x91c>
 8005f60:	f1c0 0320 	rsb	r3, r0, #32
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	dd7f      	ble.n	8006068 <_dtoa_r+0x918>
 8005f68:	f1c0 001c 	rsb	r0, r0, #28
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	4403      	add	r3, r0
 8005f70:	4480      	add	r8, r0
 8005f72:	4405      	add	r5, r0
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	f1b8 0f00 	cmp.w	r8, #0
 8005f7a:	dd05      	ble.n	8005f88 <_dtoa_r+0x838>
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	4642      	mov	r2, r8
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fbfd 	bl	8006780 <__lshift>
 8005f86:	4683      	mov	fp, r0
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dd05      	ble.n	8005f9a <_dtoa_r+0x84a>
 8005f8e:	4631      	mov	r1, r6
 8005f90:	461a      	mov	r2, r3
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 fbf4 	bl	8006780 <__lshift>
 8005f98:	4606      	mov	r6, r0
 8005f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d069      	beq.n	8006074 <_dtoa_r+0x924>
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4658      	mov	r0, fp
 8005fa4:	f000 fc58 	bl	8006858 <__mcmp>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	da63      	bge.n	8006074 <_dtoa_r+0x924>
 8005fac:	2300      	movs	r3, #0
 8005fae:	4659      	mov	r1, fp
 8005fb0:	220a      	movs	r2, #10
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fa34 	bl	8006420 <__multadd>
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fbe:	4683      	mov	fp, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 818f 	beq.w	80062e4 <_dtoa_r+0xb94>
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	2300      	movs	r3, #0
 8005fca:	220a      	movs	r2, #10
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 fa27 	bl	8006420 <__multadd>
 8005fd2:	f1b9 0f00 	cmp.w	r9, #0
 8005fd6:	4607      	mov	r7, r0
 8005fd8:	f300 808e 	bgt.w	80060f8 <_dtoa_r+0x9a8>
 8005fdc:	9b05      	ldr	r3, [sp, #20]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	dc50      	bgt.n	8006084 <_dtoa_r+0x934>
 8005fe2:	e089      	b.n	80060f8 <_dtoa_r+0x9a8>
 8005fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fea:	e75d      	b.n	8005ea8 <_dtoa_r+0x758>
 8005fec:	9b01      	ldr	r3, [sp, #4]
 8005fee:	1e5e      	subs	r6, r3, #1
 8005ff0:	9b06      	ldr	r3, [sp, #24]
 8005ff2:	42b3      	cmp	r3, r6
 8005ff4:	bfbf      	itttt	lt
 8005ff6:	9b06      	ldrlt	r3, [sp, #24]
 8005ff8:	9606      	strlt	r6, [sp, #24]
 8005ffa:	1af2      	sublt	r2, r6, r3
 8005ffc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005ffe:	bfb6      	itet	lt
 8006000:	189b      	addlt	r3, r3, r2
 8006002:	1b9e      	subge	r6, r3, r6
 8006004:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006006:	9b01      	ldr	r3, [sp, #4]
 8006008:	bfb8      	it	lt
 800600a:	2600      	movlt	r6, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfb5      	itete	lt
 8006010:	eba8 0503 	sublt.w	r5, r8, r3
 8006014:	9b01      	ldrge	r3, [sp, #4]
 8006016:	2300      	movlt	r3, #0
 8006018:	4645      	movge	r5, r8
 800601a:	e747      	b.n	8005eac <_dtoa_r+0x75c>
 800601c:	9e06      	ldr	r6, [sp, #24]
 800601e:	9f08      	ldr	r7, [sp, #32]
 8006020:	4645      	mov	r5, r8
 8006022:	e74c      	b.n	8005ebe <_dtoa_r+0x76e>
 8006024:	9a06      	ldr	r2, [sp, #24]
 8006026:	e775      	b.n	8005f14 <_dtoa_r+0x7c4>
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	2b01      	cmp	r3, #1
 800602c:	dc18      	bgt.n	8006060 <_dtoa_r+0x910>
 800602e:	9b02      	ldr	r3, [sp, #8]
 8006030:	b9b3      	cbnz	r3, 8006060 <_dtoa_r+0x910>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006038:	b9a3      	cbnz	r3, 8006064 <_dtoa_r+0x914>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006040:	0d1b      	lsrs	r3, r3, #20
 8006042:	051b      	lsls	r3, r3, #20
 8006044:	b12b      	cbz	r3, 8006052 <_dtoa_r+0x902>
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	3301      	adds	r3, #1
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	f108 0801 	add.w	r8, r8, #1
 8006050:	2301      	movs	r3, #1
 8006052:	9306      	str	r3, [sp, #24]
 8006054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	f47f af74 	bne.w	8005f44 <_dtoa_r+0x7f4>
 800605c:	2001      	movs	r0, #1
 800605e:	e779      	b.n	8005f54 <_dtoa_r+0x804>
 8006060:	2300      	movs	r3, #0
 8006062:	e7f6      	b.n	8006052 <_dtoa_r+0x902>
 8006064:	9b02      	ldr	r3, [sp, #8]
 8006066:	e7f4      	b.n	8006052 <_dtoa_r+0x902>
 8006068:	d085      	beq.n	8005f76 <_dtoa_r+0x826>
 800606a:	4618      	mov	r0, r3
 800606c:	301c      	adds	r0, #28
 800606e:	e77d      	b.n	8005f6c <_dtoa_r+0x81c>
 8006070:	40240000 	.word	0x40240000
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc38      	bgt.n	80060ec <_dtoa_r+0x99c>
 800607a:	9b05      	ldr	r3, [sp, #20]
 800607c:	2b02      	cmp	r3, #2
 800607e:	dd35      	ble.n	80060ec <_dtoa_r+0x99c>
 8006080:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006084:	f1b9 0f00 	cmp.w	r9, #0
 8006088:	d10d      	bne.n	80060a6 <_dtoa_r+0x956>
 800608a:	4631      	mov	r1, r6
 800608c:	464b      	mov	r3, r9
 800608e:	2205      	movs	r2, #5
 8006090:	4620      	mov	r0, r4
 8006092:	f000 f9c5 	bl	8006420 <__multadd>
 8006096:	4601      	mov	r1, r0
 8006098:	4606      	mov	r6, r0
 800609a:	4658      	mov	r0, fp
 800609c:	f000 fbdc 	bl	8006858 <__mcmp>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f73f adbd 	bgt.w	8005c20 <_dtoa_r+0x4d0>
 80060a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a8:	9d00      	ldr	r5, [sp, #0]
 80060aa:	ea6f 0a03 	mvn.w	sl, r3
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	4631      	mov	r1, r6
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 f991 	bl	80063dc <_Bfree>
 80060ba:	2f00      	cmp	r7, #0
 80060bc:	f43f aeb4 	beq.w	8005e28 <_dtoa_r+0x6d8>
 80060c0:	f1b8 0f00 	cmp.w	r8, #0
 80060c4:	d005      	beq.n	80060d2 <_dtoa_r+0x982>
 80060c6:	45b8      	cmp	r8, r7
 80060c8:	d003      	beq.n	80060d2 <_dtoa_r+0x982>
 80060ca:	4641      	mov	r1, r8
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 f985 	bl	80063dc <_Bfree>
 80060d2:	4639      	mov	r1, r7
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 f981 	bl	80063dc <_Bfree>
 80060da:	e6a5      	b.n	8005e28 <_dtoa_r+0x6d8>
 80060dc:	2600      	movs	r6, #0
 80060de:	4637      	mov	r7, r6
 80060e0:	e7e1      	b.n	80060a6 <_dtoa_r+0x956>
 80060e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80060e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060e8:	4637      	mov	r7, r6
 80060ea:	e599      	b.n	8005c20 <_dtoa_r+0x4d0>
 80060ec:	9b08      	ldr	r3, [sp, #32]
 80060ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 80fd 	beq.w	80062f2 <_dtoa_r+0xba2>
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	dd05      	ble.n	8006108 <_dtoa_r+0x9b8>
 80060fc:	4639      	mov	r1, r7
 80060fe:	462a      	mov	r2, r5
 8006100:	4620      	mov	r0, r4
 8006102:	f000 fb3d 	bl	8006780 <__lshift>
 8006106:	4607      	mov	r7, r0
 8006108:	9b06      	ldr	r3, [sp, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d05c      	beq.n	80061c8 <_dtoa_r+0xa78>
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4620      	mov	r0, r4
 8006112:	f000 f923 	bl	800635c <_Balloc>
 8006116:	4605      	mov	r5, r0
 8006118:	b928      	cbnz	r0, 8006126 <_dtoa_r+0x9d6>
 800611a:	4b80      	ldr	r3, [pc, #512]	; (800631c <_dtoa_r+0xbcc>)
 800611c:	4602      	mov	r2, r0
 800611e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006122:	f7ff bb2e 	b.w	8005782 <_dtoa_r+0x32>
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	3202      	adds	r2, #2
 800612a:	0092      	lsls	r2, r2, #2
 800612c:	f107 010c 	add.w	r1, r7, #12
 8006130:	300c      	adds	r0, #12
 8006132:	f000 f905 	bl	8006340 <memcpy>
 8006136:	2201      	movs	r2, #1
 8006138:	4629      	mov	r1, r5
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fb20 	bl	8006780 <__lshift>
 8006140:	9b00      	ldr	r3, [sp, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	444b      	add	r3, r9
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	9b02      	ldr	r3, [sp, #8]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	46b8      	mov	r8, r7
 8006154:	9306      	str	r3, [sp, #24]
 8006156:	4607      	mov	r7, r0
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	4631      	mov	r1, r6
 800615c:	3b01      	subs	r3, #1
 800615e:	4658      	mov	r0, fp
 8006160:	9302      	str	r3, [sp, #8]
 8006162:	f7ff fa67 	bl	8005634 <quorem>
 8006166:	4603      	mov	r3, r0
 8006168:	3330      	adds	r3, #48	; 0x30
 800616a:	9004      	str	r0, [sp, #16]
 800616c:	4641      	mov	r1, r8
 800616e:	4658      	mov	r0, fp
 8006170:	9308      	str	r3, [sp, #32]
 8006172:	f000 fb71 	bl	8006858 <__mcmp>
 8006176:	463a      	mov	r2, r7
 8006178:	4681      	mov	r9, r0
 800617a:	4631      	mov	r1, r6
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fb87 	bl	8006890 <__mdiff>
 8006182:	68c2      	ldr	r2, [r0, #12]
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	4605      	mov	r5, r0
 8006188:	bb02      	cbnz	r2, 80061cc <_dtoa_r+0xa7c>
 800618a:	4601      	mov	r1, r0
 800618c:	4658      	mov	r0, fp
 800618e:	f000 fb63 	bl	8006858 <__mcmp>
 8006192:	9b08      	ldr	r3, [sp, #32]
 8006194:	4602      	mov	r2, r0
 8006196:	4629      	mov	r1, r5
 8006198:	4620      	mov	r0, r4
 800619a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800619e:	f000 f91d 	bl	80063dc <_Bfree>
 80061a2:	9b05      	ldr	r3, [sp, #20]
 80061a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a6:	9d01      	ldr	r5, [sp, #4]
 80061a8:	ea43 0102 	orr.w	r1, r3, r2
 80061ac:	9b06      	ldr	r3, [sp, #24]
 80061ae:	430b      	orrs	r3, r1
 80061b0:	9b08      	ldr	r3, [sp, #32]
 80061b2:	d10d      	bne.n	80061d0 <_dtoa_r+0xa80>
 80061b4:	2b39      	cmp	r3, #57	; 0x39
 80061b6:	d029      	beq.n	800620c <_dtoa_r+0xabc>
 80061b8:	f1b9 0f00 	cmp.w	r9, #0
 80061bc:	dd01      	ble.n	80061c2 <_dtoa_r+0xa72>
 80061be:	9b04      	ldr	r3, [sp, #16]
 80061c0:	3331      	adds	r3, #49	; 0x31
 80061c2:	9a02      	ldr	r2, [sp, #8]
 80061c4:	7013      	strb	r3, [r2, #0]
 80061c6:	e774      	b.n	80060b2 <_dtoa_r+0x962>
 80061c8:	4638      	mov	r0, r7
 80061ca:	e7b9      	b.n	8006140 <_dtoa_r+0x9f0>
 80061cc:	2201      	movs	r2, #1
 80061ce:	e7e2      	b.n	8006196 <_dtoa_r+0xa46>
 80061d0:	f1b9 0f00 	cmp.w	r9, #0
 80061d4:	db06      	blt.n	80061e4 <_dtoa_r+0xa94>
 80061d6:	9905      	ldr	r1, [sp, #20]
 80061d8:	ea41 0909 	orr.w	r9, r1, r9
 80061dc:	9906      	ldr	r1, [sp, #24]
 80061de:	ea59 0101 	orrs.w	r1, r9, r1
 80061e2:	d120      	bne.n	8006226 <_dtoa_r+0xad6>
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	ddec      	ble.n	80061c2 <_dtoa_r+0xa72>
 80061e8:	4659      	mov	r1, fp
 80061ea:	2201      	movs	r2, #1
 80061ec:	4620      	mov	r0, r4
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	f000 fac6 	bl	8006780 <__lshift>
 80061f4:	4631      	mov	r1, r6
 80061f6:	4683      	mov	fp, r0
 80061f8:	f000 fb2e 	bl	8006858 <__mcmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	dc02      	bgt.n	8006208 <_dtoa_r+0xab8>
 8006202:	d1de      	bne.n	80061c2 <_dtoa_r+0xa72>
 8006204:	07da      	lsls	r2, r3, #31
 8006206:	d5dc      	bpl.n	80061c2 <_dtoa_r+0xa72>
 8006208:	2b39      	cmp	r3, #57	; 0x39
 800620a:	d1d8      	bne.n	80061be <_dtoa_r+0xa6e>
 800620c:	9a02      	ldr	r2, [sp, #8]
 800620e:	2339      	movs	r3, #57	; 0x39
 8006210:	7013      	strb	r3, [r2, #0]
 8006212:	462b      	mov	r3, r5
 8006214:	461d      	mov	r5, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800621c:	2a39      	cmp	r2, #57	; 0x39
 800621e:	d050      	beq.n	80062c2 <_dtoa_r+0xb72>
 8006220:	3201      	adds	r2, #1
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	e745      	b.n	80060b2 <_dtoa_r+0x962>
 8006226:	2a00      	cmp	r2, #0
 8006228:	dd03      	ble.n	8006232 <_dtoa_r+0xae2>
 800622a:	2b39      	cmp	r3, #57	; 0x39
 800622c:	d0ee      	beq.n	800620c <_dtoa_r+0xabc>
 800622e:	3301      	adds	r3, #1
 8006230:	e7c7      	b.n	80061c2 <_dtoa_r+0xa72>
 8006232:	9a01      	ldr	r2, [sp, #4]
 8006234:	9907      	ldr	r1, [sp, #28]
 8006236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800623a:	428a      	cmp	r2, r1
 800623c:	d02a      	beq.n	8006294 <_dtoa_r+0xb44>
 800623e:	4659      	mov	r1, fp
 8006240:	2300      	movs	r3, #0
 8006242:	220a      	movs	r2, #10
 8006244:	4620      	mov	r0, r4
 8006246:	f000 f8eb 	bl	8006420 <__multadd>
 800624a:	45b8      	cmp	r8, r7
 800624c:	4683      	mov	fp, r0
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	f04f 020a 	mov.w	r2, #10
 8006256:	4641      	mov	r1, r8
 8006258:	4620      	mov	r0, r4
 800625a:	d107      	bne.n	800626c <_dtoa_r+0xb1c>
 800625c:	f000 f8e0 	bl	8006420 <__multadd>
 8006260:	4680      	mov	r8, r0
 8006262:	4607      	mov	r7, r0
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	e775      	b.n	8006158 <_dtoa_r+0xa08>
 800626c:	f000 f8d8 	bl	8006420 <__multadd>
 8006270:	4639      	mov	r1, r7
 8006272:	4680      	mov	r8, r0
 8006274:	2300      	movs	r3, #0
 8006276:	220a      	movs	r2, #10
 8006278:	4620      	mov	r0, r4
 800627a:	f000 f8d1 	bl	8006420 <__multadd>
 800627e:	4607      	mov	r7, r0
 8006280:	e7f0      	b.n	8006264 <_dtoa_r+0xb14>
 8006282:	f1b9 0f00 	cmp.w	r9, #0
 8006286:	9a00      	ldr	r2, [sp, #0]
 8006288:	bfcc      	ite	gt
 800628a:	464d      	movgt	r5, r9
 800628c:	2501      	movle	r5, #1
 800628e:	4415      	add	r5, r2
 8006290:	f04f 0800 	mov.w	r8, #0
 8006294:	4659      	mov	r1, fp
 8006296:	2201      	movs	r2, #1
 8006298:	4620      	mov	r0, r4
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	f000 fa70 	bl	8006780 <__lshift>
 80062a0:	4631      	mov	r1, r6
 80062a2:	4683      	mov	fp, r0
 80062a4:	f000 fad8 	bl	8006858 <__mcmp>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	dcb2      	bgt.n	8006212 <_dtoa_r+0xac2>
 80062ac:	d102      	bne.n	80062b4 <_dtoa_r+0xb64>
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	07db      	lsls	r3, r3, #31
 80062b2:	d4ae      	bmi.n	8006212 <_dtoa_r+0xac2>
 80062b4:	462b      	mov	r3, r5
 80062b6:	461d      	mov	r5, r3
 80062b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062bc:	2a30      	cmp	r2, #48	; 0x30
 80062be:	d0fa      	beq.n	80062b6 <_dtoa_r+0xb66>
 80062c0:	e6f7      	b.n	80060b2 <_dtoa_r+0x962>
 80062c2:	9a00      	ldr	r2, [sp, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d1a5      	bne.n	8006214 <_dtoa_r+0xac4>
 80062c8:	f10a 0a01 	add.w	sl, sl, #1
 80062cc:	2331      	movs	r3, #49	; 0x31
 80062ce:	e779      	b.n	80061c4 <_dtoa_r+0xa74>
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <_dtoa_r+0xbd0>)
 80062d2:	f7ff baaf 	b.w	8005834 <_dtoa_r+0xe4>
 80062d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f47f aa86 	bne.w	80057ea <_dtoa_r+0x9a>
 80062de:	4b11      	ldr	r3, [pc, #68]	; (8006324 <_dtoa_r+0xbd4>)
 80062e0:	f7ff baa8 	b.w	8005834 <_dtoa_r+0xe4>
 80062e4:	f1b9 0f00 	cmp.w	r9, #0
 80062e8:	dc03      	bgt.n	80062f2 <_dtoa_r+0xba2>
 80062ea:	9b05      	ldr	r3, [sp, #20]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	f73f aec9 	bgt.w	8006084 <_dtoa_r+0x934>
 80062f2:	9d00      	ldr	r5, [sp, #0]
 80062f4:	4631      	mov	r1, r6
 80062f6:	4658      	mov	r0, fp
 80062f8:	f7ff f99c 	bl	8005634 <quorem>
 80062fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006300:	f805 3b01 	strb.w	r3, [r5], #1
 8006304:	9a00      	ldr	r2, [sp, #0]
 8006306:	1aaa      	subs	r2, r5, r2
 8006308:	4591      	cmp	r9, r2
 800630a:	ddba      	ble.n	8006282 <_dtoa_r+0xb32>
 800630c:	4659      	mov	r1, fp
 800630e:	2300      	movs	r3, #0
 8006310:	220a      	movs	r2, #10
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f884 	bl	8006420 <__multadd>
 8006318:	4683      	mov	fp, r0
 800631a:	e7eb      	b.n	80062f4 <_dtoa_r+0xba4>
 800631c:	080083ef 	.word	0x080083ef
 8006320:	08008348 	.word	0x08008348
 8006324:	0800836c 	.word	0x0800836c

08006328 <_localeconv_r>:
 8006328:	4800      	ldr	r0, [pc, #0]	; (800632c <_localeconv_r+0x4>)
 800632a:	4770      	bx	lr
 800632c:	20000160 	.word	0x20000160

08006330 <malloc>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <malloc+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 bbef 	b.w	8006b18 <_malloc_r>
 800633a:	bf00      	nop
 800633c:	2000000c 	.word	0x2000000c

08006340 <memcpy>:
 8006340:	440a      	add	r2, r1
 8006342:	4291      	cmp	r1, r2
 8006344:	f100 33ff 	add.w	r3, r0, #4294967295
 8006348:	d100      	bne.n	800634c <memcpy+0xc>
 800634a:	4770      	bx	lr
 800634c:	b510      	push	{r4, lr}
 800634e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006356:	4291      	cmp	r1, r2
 8006358:	d1f9      	bne.n	800634e <memcpy+0xe>
 800635a:	bd10      	pop	{r4, pc}

0800635c <_Balloc>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006360:	4604      	mov	r4, r0
 8006362:	460d      	mov	r5, r1
 8006364:	b976      	cbnz	r6, 8006384 <_Balloc+0x28>
 8006366:	2010      	movs	r0, #16
 8006368:	f7ff ffe2 	bl	8006330 <malloc>
 800636c:	4602      	mov	r2, r0
 800636e:	6260      	str	r0, [r4, #36]	; 0x24
 8006370:	b920      	cbnz	r0, 800637c <_Balloc+0x20>
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <_Balloc+0x78>)
 8006374:	4818      	ldr	r0, [pc, #96]	; (80063d8 <_Balloc+0x7c>)
 8006376:	2166      	movs	r1, #102	; 0x66
 8006378:	f000 fd94 	bl	8006ea4 <__assert_func>
 800637c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006380:	6006      	str	r6, [r0, #0]
 8006382:	60c6      	str	r6, [r0, #12]
 8006384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006386:	68f3      	ldr	r3, [r6, #12]
 8006388:	b183      	cbz	r3, 80063ac <_Balloc+0x50>
 800638a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006392:	b9b8      	cbnz	r0, 80063c4 <_Balloc+0x68>
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f605 	lsl.w	r6, r1, r5
 800639a:	1d72      	adds	r2, r6, #5
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fb5a 	bl	8006a58 <_calloc_r>
 80063a4:	b160      	cbz	r0, 80063c0 <_Balloc+0x64>
 80063a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063aa:	e00e      	b.n	80063ca <_Balloc+0x6e>
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	2104      	movs	r1, #4
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fb51 	bl	8006a58 <_calloc_r>
 80063b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b8:	60f0      	str	r0, [r6, #12]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e4      	bne.n	800638a <_Balloc+0x2e>
 80063c0:	2000      	movs	r0, #0
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	6802      	ldr	r2, [r0, #0]
 80063c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ca:	2300      	movs	r3, #0
 80063cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063d0:	e7f7      	b.n	80063c2 <_Balloc+0x66>
 80063d2:	bf00      	nop
 80063d4:	08008379 	.word	0x08008379
 80063d8:	08008400 	.word	0x08008400

080063dc <_Bfree>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b976      	cbnz	r6, 8006404 <_Bfree+0x28>
 80063e6:	2010      	movs	r0, #16
 80063e8:	f7ff ffa2 	bl	8006330 <malloc>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6268      	str	r0, [r5, #36]	; 0x24
 80063f0:	b920      	cbnz	r0, 80063fc <_Bfree+0x20>
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <_Bfree+0x3c>)
 80063f4:	4809      	ldr	r0, [pc, #36]	; (800641c <_Bfree+0x40>)
 80063f6:	218a      	movs	r1, #138	; 0x8a
 80063f8:	f000 fd54 	bl	8006ea4 <__assert_func>
 80063fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006400:	6006      	str	r6, [r0, #0]
 8006402:	60c6      	str	r6, [r0, #12]
 8006404:	b13c      	cbz	r4, 8006416 <_Bfree+0x3a>
 8006406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006408:	6862      	ldr	r2, [r4, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006410:	6021      	str	r1, [r4, #0]
 8006412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	08008379 	.word	0x08008379
 800641c:	08008400 	.word	0x08008400

08006420 <__multadd>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	690e      	ldr	r6, [r1, #16]
 8006426:	4607      	mov	r7, r0
 8006428:	4698      	mov	r8, r3
 800642a:	460c      	mov	r4, r1
 800642c:	f101 0014 	add.w	r0, r1, #20
 8006430:	2300      	movs	r3, #0
 8006432:	6805      	ldr	r5, [r0, #0]
 8006434:	b2a9      	uxth	r1, r5
 8006436:	fb02 8101 	mla	r1, r2, r1, r8
 800643a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800643e:	0c2d      	lsrs	r5, r5, #16
 8006440:	fb02 c505 	mla	r5, r2, r5, ip
 8006444:	b289      	uxth	r1, r1
 8006446:	3301      	adds	r3, #1
 8006448:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800644c:	429e      	cmp	r6, r3
 800644e:	f840 1b04 	str.w	r1, [r0], #4
 8006452:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006456:	dcec      	bgt.n	8006432 <__multadd+0x12>
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d022      	beq.n	80064a4 <__multadd+0x84>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	42b3      	cmp	r3, r6
 8006462:	dc19      	bgt.n	8006498 <__multadd+0x78>
 8006464:	6861      	ldr	r1, [r4, #4]
 8006466:	4638      	mov	r0, r7
 8006468:	3101      	adds	r1, #1
 800646a:	f7ff ff77 	bl	800635c <_Balloc>
 800646e:	4605      	mov	r5, r0
 8006470:	b928      	cbnz	r0, 800647e <__multadd+0x5e>
 8006472:	4602      	mov	r2, r0
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <__multadd+0x8c>)
 8006476:	480e      	ldr	r0, [pc, #56]	; (80064b0 <__multadd+0x90>)
 8006478:	21b5      	movs	r1, #181	; 0xb5
 800647a:	f000 fd13 	bl	8006ea4 <__assert_func>
 800647e:	6922      	ldr	r2, [r4, #16]
 8006480:	3202      	adds	r2, #2
 8006482:	f104 010c 	add.w	r1, r4, #12
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	300c      	adds	r0, #12
 800648a:	f7ff ff59 	bl	8006340 <memcpy>
 800648e:	4621      	mov	r1, r4
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ffa3 	bl	80063dc <_Bfree>
 8006496:	462c      	mov	r4, r5
 8006498:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800649c:	3601      	adds	r6, #1
 800649e:	f8c3 8014 	str.w	r8, [r3, #20]
 80064a2:	6126      	str	r6, [r4, #16]
 80064a4:	4620      	mov	r0, r4
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064aa:	bf00      	nop
 80064ac:	080083ef 	.word	0x080083ef
 80064b0:	08008400 	.word	0x08008400

080064b4 <__hi0bits>:
 80064b4:	0c03      	lsrs	r3, r0, #16
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	b9d3      	cbnz	r3, 80064f0 <__hi0bits+0x3c>
 80064ba:	0400      	lsls	r0, r0, #16
 80064bc:	2310      	movs	r3, #16
 80064be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064c2:	bf04      	itt	eq
 80064c4:	0200      	lsleq	r0, r0, #8
 80064c6:	3308      	addeq	r3, #8
 80064c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80064cc:	bf04      	itt	eq
 80064ce:	0100      	lsleq	r0, r0, #4
 80064d0:	3304      	addeq	r3, #4
 80064d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064d6:	bf04      	itt	eq
 80064d8:	0080      	lsleq	r0, r0, #2
 80064da:	3302      	addeq	r3, #2
 80064dc:	2800      	cmp	r0, #0
 80064de:	db05      	blt.n	80064ec <__hi0bits+0x38>
 80064e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80064e4:	f103 0301 	add.w	r3, r3, #1
 80064e8:	bf08      	it	eq
 80064ea:	2320      	moveq	r3, #32
 80064ec:	4618      	mov	r0, r3
 80064ee:	4770      	bx	lr
 80064f0:	2300      	movs	r3, #0
 80064f2:	e7e4      	b.n	80064be <__hi0bits+0xa>

080064f4 <__lo0bits>:
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	f013 0207 	ands.w	r2, r3, #7
 80064fa:	4601      	mov	r1, r0
 80064fc:	d00b      	beq.n	8006516 <__lo0bits+0x22>
 80064fe:	07da      	lsls	r2, r3, #31
 8006500:	d424      	bmi.n	800654c <__lo0bits+0x58>
 8006502:	0798      	lsls	r0, r3, #30
 8006504:	bf49      	itett	mi
 8006506:	085b      	lsrmi	r3, r3, #1
 8006508:	089b      	lsrpl	r3, r3, #2
 800650a:	2001      	movmi	r0, #1
 800650c:	600b      	strmi	r3, [r1, #0]
 800650e:	bf5c      	itt	pl
 8006510:	600b      	strpl	r3, [r1, #0]
 8006512:	2002      	movpl	r0, #2
 8006514:	4770      	bx	lr
 8006516:	b298      	uxth	r0, r3
 8006518:	b9b0      	cbnz	r0, 8006548 <__lo0bits+0x54>
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	2010      	movs	r0, #16
 800651e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006522:	bf04      	itt	eq
 8006524:	0a1b      	lsreq	r3, r3, #8
 8006526:	3008      	addeq	r0, #8
 8006528:	071a      	lsls	r2, r3, #28
 800652a:	bf04      	itt	eq
 800652c:	091b      	lsreq	r3, r3, #4
 800652e:	3004      	addeq	r0, #4
 8006530:	079a      	lsls	r2, r3, #30
 8006532:	bf04      	itt	eq
 8006534:	089b      	lsreq	r3, r3, #2
 8006536:	3002      	addeq	r0, #2
 8006538:	07da      	lsls	r2, r3, #31
 800653a:	d403      	bmi.n	8006544 <__lo0bits+0x50>
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	f100 0001 	add.w	r0, r0, #1
 8006542:	d005      	beq.n	8006550 <__lo0bits+0x5c>
 8006544:	600b      	str	r3, [r1, #0]
 8006546:	4770      	bx	lr
 8006548:	4610      	mov	r0, r2
 800654a:	e7e8      	b.n	800651e <__lo0bits+0x2a>
 800654c:	2000      	movs	r0, #0
 800654e:	4770      	bx	lr
 8006550:	2020      	movs	r0, #32
 8006552:	4770      	bx	lr

08006554 <__i2b>:
 8006554:	b510      	push	{r4, lr}
 8006556:	460c      	mov	r4, r1
 8006558:	2101      	movs	r1, #1
 800655a:	f7ff feff 	bl	800635c <_Balloc>
 800655e:	4602      	mov	r2, r0
 8006560:	b928      	cbnz	r0, 800656e <__i2b+0x1a>
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <__i2b+0x24>)
 8006564:	4805      	ldr	r0, [pc, #20]	; (800657c <__i2b+0x28>)
 8006566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800656a:	f000 fc9b 	bl	8006ea4 <__assert_func>
 800656e:	2301      	movs	r3, #1
 8006570:	6144      	str	r4, [r0, #20]
 8006572:	6103      	str	r3, [r0, #16]
 8006574:	bd10      	pop	{r4, pc}
 8006576:	bf00      	nop
 8006578:	080083ef 	.word	0x080083ef
 800657c:	08008400 	.word	0x08008400

08006580 <__multiply>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	4614      	mov	r4, r2
 8006586:	690a      	ldr	r2, [r1, #16]
 8006588:	6923      	ldr	r3, [r4, #16]
 800658a:	429a      	cmp	r2, r3
 800658c:	bfb8      	it	lt
 800658e:	460b      	movlt	r3, r1
 8006590:	460d      	mov	r5, r1
 8006592:	bfbc      	itt	lt
 8006594:	4625      	movlt	r5, r4
 8006596:	461c      	movlt	r4, r3
 8006598:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800659c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065a0:	68ab      	ldr	r3, [r5, #8]
 80065a2:	6869      	ldr	r1, [r5, #4]
 80065a4:	eb0a 0709 	add.w	r7, sl, r9
 80065a8:	42bb      	cmp	r3, r7
 80065aa:	b085      	sub	sp, #20
 80065ac:	bfb8      	it	lt
 80065ae:	3101      	addlt	r1, #1
 80065b0:	f7ff fed4 	bl	800635c <_Balloc>
 80065b4:	b930      	cbnz	r0, 80065c4 <__multiply+0x44>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b42      	ldr	r3, [pc, #264]	; (80066c4 <__multiply+0x144>)
 80065ba:	4843      	ldr	r0, [pc, #268]	; (80066c8 <__multiply+0x148>)
 80065bc:	f240 115d 	movw	r1, #349	; 0x15d
 80065c0:	f000 fc70 	bl	8006ea4 <__assert_func>
 80065c4:	f100 0614 	add.w	r6, r0, #20
 80065c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80065cc:	4633      	mov	r3, r6
 80065ce:	2200      	movs	r2, #0
 80065d0:	4543      	cmp	r3, r8
 80065d2:	d31e      	bcc.n	8006612 <__multiply+0x92>
 80065d4:	f105 0c14 	add.w	ip, r5, #20
 80065d8:	f104 0314 	add.w	r3, r4, #20
 80065dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80065e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80065e4:	9202      	str	r2, [sp, #8]
 80065e6:	ebac 0205 	sub.w	r2, ip, r5
 80065ea:	3a15      	subs	r2, #21
 80065ec:	f022 0203 	bic.w	r2, r2, #3
 80065f0:	3204      	adds	r2, #4
 80065f2:	f105 0115 	add.w	r1, r5, #21
 80065f6:	458c      	cmp	ip, r1
 80065f8:	bf38      	it	cc
 80065fa:	2204      	movcc	r2, #4
 80065fc:	9201      	str	r2, [sp, #4]
 80065fe:	9a02      	ldr	r2, [sp, #8]
 8006600:	9303      	str	r3, [sp, #12]
 8006602:	429a      	cmp	r2, r3
 8006604:	d808      	bhi.n	8006618 <__multiply+0x98>
 8006606:	2f00      	cmp	r7, #0
 8006608:	dc55      	bgt.n	80066b6 <__multiply+0x136>
 800660a:	6107      	str	r7, [r0, #16]
 800660c:	b005      	add	sp, #20
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	f843 2b04 	str.w	r2, [r3], #4
 8006616:	e7db      	b.n	80065d0 <__multiply+0x50>
 8006618:	f8b3 a000 	ldrh.w	sl, [r3]
 800661c:	f1ba 0f00 	cmp.w	sl, #0
 8006620:	d020      	beq.n	8006664 <__multiply+0xe4>
 8006622:	f105 0e14 	add.w	lr, r5, #20
 8006626:	46b1      	mov	r9, r6
 8006628:	2200      	movs	r2, #0
 800662a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800662e:	f8d9 b000 	ldr.w	fp, [r9]
 8006632:	b2a1      	uxth	r1, r4
 8006634:	fa1f fb8b 	uxth.w	fp, fp
 8006638:	fb0a b101 	mla	r1, sl, r1, fp
 800663c:	4411      	add	r1, r2
 800663e:	f8d9 2000 	ldr.w	r2, [r9]
 8006642:	0c24      	lsrs	r4, r4, #16
 8006644:	0c12      	lsrs	r2, r2, #16
 8006646:	fb0a 2404 	mla	r4, sl, r4, r2
 800664a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800664e:	b289      	uxth	r1, r1
 8006650:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006654:	45f4      	cmp	ip, lr
 8006656:	f849 1b04 	str.w	r1, [r9], #4
 800665a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800665e:	d8e4      	bhi.n	800662a <__multiply+0xaa>
 8006660:	9901      	ldr	r1, [sp, #4]
 8006662:	5072      	str	r2, [r6, r1]
 8006664:	9a03      	ldr	r2, [sp, #12]
 8006666:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800666a:	3304      	adds	r3, #4
 800666c:	f1b9 0f00 	cmp.w	r9, #0
 8006670:	d01f      	beq.n	80066b2 <__multiply+0x132>
 8006672:	6834      	ldr	r4, [r6, #0]
 8006674:	f105 0114 	add.w	r1, r5, #20
 8006678:	46b6      	mov	lr, r6
 800667a:	f04f 0a00 	mov.w	sl, #0
 800667e:	880a      	ldrh	r2, [r1, #0]
 8006680:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006684:	fb09 b202 	mla	r2, r9, r2, fp
 8006688:	4492      	add	sl, r2
 800668a:	b2a4      	uxth	r4, r4
 800668c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006690:	f84e 4b04 	str.w	r4, [lr], #4
 8006694:	f851 4b04 	ldr.w	r4, [r1], #4
 8006698:	f8be 2000 	ldrh.w	r2, [lr]
 800669c:	0c24      	lsrs	r4, r4, #16
 800669e:	fb09 2404 	mla	r4, r9, r4, r2
 80066a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066a6:	458c      	cmp	ip, r1
 80066a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066ac:	d8e7      	bhi.n	800667e <__multiply+0xfe>
 80066ae:	9a01      	ldr	r2, [sp, #4]
 80066b0:	50b4      	str	r4, [r6, r2]
 80066b2:	3604      	adds	r6, #4
 80066b4:	e7a3      	b.n	80065fe <__multiply+0x7e>
 80066b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1a5      	bne.n	800660a <__multiply+0x8a>
 80066be:	3f01      	subs	r7, #1
 80066c0:	e7a1      	b.n	8006606 <__multiply+0x86>
 80066c2:	bf00      	nop
 80066c4:	080083ef 	.word	0x080083ef
 80066c8:	08008400 	.word	0x08008400

080066cc <__pow5mult>:
 80066cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d0:	4615      	mov	r5, r2
 80066d2:	f012 0203 	ands.w	r2, r2, #3
 80066d6:	4606      	mov	r6, r0
 80066d8:	460f      	mov	r7, r1
 80066da:	d007      	beq.n	80066ec <__pow5mult+0x20>
 80066dc:	4c25      	ldr	r4, [pc, #148]	; (8006774 <__pow5mult+0xa8>)
 80066de:	3a01      	subs	r2, #1
 80066e0:	2300      	movs	r3, #0
 80066e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066e6:	f7ff fe9b 	bl	8006420 <__multadd>
 80066ea:	4607      	mov	r7, r0
 80066ec:	10ad      	asrs	r5, r5, #2
 80066ee:	d03d      	beq.n	800676c <__pow5mult+0xa0>
 80066f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066f2:	b97c      	cbnz	r4, 8006714 <__pow5mult+0x48>
 80066f4:	2010      	movs	r0, #16
 80066f6:	f7ff fe1b 	bl	8006330 <malloc>
 80066fa:	4602      	mov	r2, r0
 80066fc:	6270      	str	r0, [r6, #36]	; 0x24
 80066fe:	b928      	cbnz	r0, 800670c <__pow5mult+0x40>
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <__pow5mult+0xac>)
 8006702:	481e      	ldr	r0, [pc, #120]	; (800677c <__pow5mult+0xb0>)
 8006704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006708:	f000 fbcc 	bl	8006ea4 <__assert_func>
 800670c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006710:	6004      	str	r4, [r0, #0]
 8006712:	60c4      	str	r4, [r0, #12]
 8006714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800671c:	b94c      	cbnz	r4, 8006732 <__pow5mult+0x66>
 800671e:	f240 2171 	movw	r1, #625	; 0x271
 8006722:	4630      	mov	r0, r6
 8006724:	f7ff ff16 	bl	8006554 <__i2b>
 8006728:	2300      	movs	r3, #0
 800672a:	f8c8 0008 	str.w	r0, [r8, #8]
 800672e:	4604      	mov	r4, r0
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	07eb      	lsls	r3, r5, #31
 8006738:	d50a      	bpl.n	8006750 <__pow5mult+0x84>
 800673a:	4639      	mov	r1, r7
 800673c:	4622      	mov	r2, r4
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ff1e 	bl	8006580 <__multiply>
 8006744:	4639      	mov	r1, r7
 8006746:	4680      	mov	r8, r0
 8006748:	4630      	mov	r0, r6
 800674a:	f7ff fe47 	bl	80063dc <_Bfree>
 800674e:	4647      	mov	r7, r8
 8006750:	106d      	asrs	r5, r5, #1
 8006752:	d00b      	beq.n	800676c <__pow5mult+0xa0>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	b938      	cbnz	r0, 8006768 <__pow5mult+0x9c>
 8006758:	4622      	mov	r2, r4
 800675a:	4621      	mov	r1, r4
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff ff0f 	bl	8006580 <__multiply>
 8006762:	6020      	str	r0, [r4, #0]
 8006764:	f8c0 9000 	str.w	r9, [r0]
 8006768:	4604      	mov	r4, r0
 800676a:	e7e4      	b.n	8006736 <__pow5mult+0x6a>
 800676c:	4638      	mov	r0, r7
 800676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006772:	bf00      	nop
 8006774:	08008550 	.word	0x08008550
 8006778:	08008379 	.word	0x08008379
 800677c:	08008400 	.word	0x08008400

08006780 <__lshift>:
 8006780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	460c      	mov	r4, r1
 8006786:	6849      	ldr	r1, [r1, #4]
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	4607      	mov	r7, r0
 8006792:	4691      	mov	r9, r2
 8006794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006798:	f108 0601 	add.w	r6, r8, #1
 800679c:	42b3      	cmp	r3, r6
 800679e:	db0b      	blt.n	80067b8 <__lshift+0x38>
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff fddb 	bl	800635c <_Balloc>
 80067a6:	4605      	mov	r5, r0
 80067a8:	b948      	cbnz	r0, 80067be <__lshift+0x3e>
 80067aa:	4602      	mov	r2, r0
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <__lshift+0xd0>)
 80067ae:	4829      	ldr	r0, [pc, #164]	; (8006854 <__lshift+0xd4>)
 80067b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067b4:	f000 fb76 	bl	8006ea4 <__assert_func>
 80067b8:	3101      	adds	r1, #1
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	e7ee      	b.n	800679c <__lshift+0x1c>
 80067be:	2300      	movs	r3, #0
 80067c0:	f100 0114 	add.w	r1, r0, #20
 80067c4:	f100 0210 	add.w	r2, r0, #16
 80067c8:	4618      	mov	r0, r3
 80067ca:	4553      	cmp	r3, sl
 80067cc:	db33      	blt.n	8006836 <__lshift+0xb6>
 80067ce:	6920      	ldr	r0, [r4, #16]
 80067d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067d4:	f104 0314 	add.w	r3, r4, #20
 80067d8:	f019 091f 	ands.w	r9, r9, #31
 80067dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067e4:	d02b      	beq.n	800683e <__lshift+0xbe>
 80067e6:	f1c9 0e20 	rsb	lr, r9, #32
 80067ea:	468a      	mov	sl, r1
 80067ec:	2200      	movs	r2, #0
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	fa00 f009 	lsl.w	r0, r0, r9
 80067f4:	4302      	orrs	r2, r0
 80067f6:	f84a 2b04 	str.w	r2, [sl], #4
 80067fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fe:	459c      	cmp	ip, r3
 8006800:	fa22 f20e 	lsr.w	r2, r2, lr
 8006804:	d8f3      	bhi.n	80067ee <__lshift+0x6e>
 8006806:	ebac 0304 	sub.w	r3, ip, r4
 800680a:	3b15      	subs	r3, #21
 800680c:	f023 0303 	bic.w	r3, r3, #3
 8006810:	3304      	adds	r3, #4
 8006812:	f104 0015 	add.w	r0, r4, #21
 8006816:	4584      	cmp	ip, r0
 8006818:	bf38      	it	cc
 800681a:	2304      	movcc	r3, #4
 800681c:	50ca      	str	r2, [r1, r3]
 800681e:	b10a      	cbz	r2, 8006824 <__lshift+0xa4>
 8006820:	f108 0602 	add.w	r6, r8, #2
 8006824:	3e01      	subs	r6, #1
 8006826:	4638      	mov	r0, r7
 8006828:	612e      	str	r6, [r5, #16]
 800682a:	4621      	mov	r1, r4
 800682c:	f7ff fdd6 	bl	80063dc <_Bfree>
 8006830:	4628      	mov	r0, r5
 8006832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006836:	f842 0f04 	str.w	r0, [r2, #4]!
 800683a:	3301      	adds	r3, #1
 800683c:	e7c5      	b.n	80067ca <__lshift+0x4a>
 800683e:	3904      	subs	r1, #4
 8006840:	f853 2b04 	ldr.w	r2, [r3], #4
 8006844:	f841 2f04 	str.w	r2, [r1, #4]!
 8006848:	459c      	cmp	ip, r3
 800684a:	d8f9      	bhi.n	8006840 <__lshift+0xc0>
 800684c:	e7ea      	b.n	8006824 <__lshift+0xa4>
 800684e:	bf00      	nop
 8006850:	080083ef 	.word	0x080083ef
 8006854:	08008400 	.word	0x08008400

08006858 <__mcmp>:
 8006858:	b530      	push	{r4, r5, lr}
 800685a:	6902      	ldr	r2, [r0, #16]
 800685c:	690c      	ldr	r4, [r1, #16]
 800685e:	1b12      	subs	r2, r2, r4
 8006860:	d10e      	bne.n	8006880 <__mcmp+0x28>
 8006862:	f100 0314 	add.w	r3, r0, #20
 8006866:	3114      	adds	r1, #20
 8006868:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800686c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006870:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006874:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006878:	42a5      	cmp	r5, r4
 800687a:	d003      	beq.n	8006884 <__mcmp+0x2c>
 800687c:	d305      	bcc.n	800688a <__mcmp+0x32>
 800687e:	2201      	movs	r2, #1
 8006880:	4610      	mov	r0, r2
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	4283      	cmp	r3, r0
 8006886:	d3f3      	bcc.n	8006870 <__mcmp+0x18>
 8006888:	e7fa      	b.n	8006880 <__mcmp+0x28>
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	e7f7      	b.n	8006880 <__mcmp+0x28>

08006890 <__mdiff>:
 8006890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	460c      	mov	r4, r1
 8006896:	4606      	mov	r6, r0
 8006898:	4611      	mov	r1, r2
 800689a:	4620      	mov	r0, r4
 800689c:	4617      	mov	r7, r2
 800689e:	f7ff ffdb 	bl	8006858 <__mcmp>
 80068a2:	1e05      	subs	r5, r0, #0
 80068a4:	d110      	bne.n	80068c8 <__mdiff+0x38>
 80068a6:	4629      	mov	r1, r5
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff fd57 	bl	800635c <_Balloc>
 80068ae:	b930      	cbnz	r0, 80068be <__mdiff+0x2e>
 80068b0:	4b39      	ldr	r3, [pc, #228]	; (8006998 <__mdiff+0x108>)
 80068b2:	4602      	mov	r2, r0
 80068b4:	f240 2132 	movw	r1, #562	; 0x232
 80068b8:	4838      	ldr	r0, [pc, #224]	; (800699c <__mdiff+0x10c>)
 80068ba:	f000 faf3 	bl	8006ea4 <__assert_func>
 80068be:	2301      	movs	r3, #1
 80068c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	bfa4      	itt	ge
 80068ca:	463b      	movge	r3, r7
 80068cc:	4627      	movge	r7, r4
 80068ce:	4630      	mov	r0, r6
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	bfa6      	itte	ge
 80068d4:	461c      	movge	r4, r3
 80068d6:	2500      	movge	r5, #0
 80068d8:	2501      	movlt	r5, #1
 80068da:	f7ff fd3f 	bl	800635c <_Balloc>
 80068de:	b920      	cbnz	r0, 80068ea <__mdiff+0x5a>
 80068e0:	4b2d      	ldr	r3, [pc, #180]	; (8006998 <__mdiff+0x108>)
 80068e2:	4602      	mov	r2, r0
 80068e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068e8:	e7e6      	b.n	80068b8 <__mdiff+0x28>
 80068ea:	693e      	ldr	r6, [r7, #16]
 80068ec:	60c5      	str	r5, [r0, #12]
 80068ee:	6925      	ldr	r5, [r4, #16]
 80068f0:	f107 0114 	add.w	r1, r7, #20
 80068f4:	f104 0914 	add.w	r9, r4, #20
 80068f8:	f100 0e14 	add.w	lr, r0, #20
 80068fc:	f107 0210 	add.w	r2, r7, #16
 8006900:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006904:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006908:	46f2      	mov	sl, lr
 800690a:	2700      	movs	r7, #0
 800690c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006910:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006914:	fa1f f883 	uxth.w	r8, r3
 8006918:	fa17 f78b 	uxtah	r7, r7, fp
 800691c:	0c1b      	lsrs	r3, r3, #16
 800691e:	eba7 0808 	sub.w	r8, r7, r8
 8006922:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006926:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800692a:	fa1f f888 	uxth.w	r8, r8
 800692e:	141f      	asrs	r7, r3, #16
 8006930:	454d      	cmp	r5, r9
 8006932:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006936:	f84a 3b04 	str.w	r3, [sl], #4
 800693a:	d8e7      	bhi.n	800690c <__mdiff+0x7c>
 800693c:	1b2b      	subs	r3, r5, r4
 800693e:	3b15      	subs	r3, #21
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	3304      	adds	r3, #4
 8006946:	3415      	adds	r4, #21
 8006948:	42a5      	cmp	r5, r4
 800694a:	bf38      	it	cc
 800694c:	2304      	movcc	r3, #4
 800694e:	4419      	add	r1, r3
 8006950:	4473      	add	r3, lr
 8006952:	469e      	mov	lr, r3
 8006954:	460d      	mov	r5, r1
 8006956:	4565      	cmp	r5, ip
 8006958:	d30e      	bcc.n	8006978 <__mdiff+0xe8>
 800695a:	f10c 0203 	add.w	r2, ip, #3
 800695e:	1a52      	subs	r2, r2, r1
 8006960:	f022 0203 	bic.w	r2, r2, #3
 8006964:	3903      	subs	r1, #3
 8006966:	458c      	cmp	ip, r1
 8006968:	bf38      	it	cc
 800696a:	2200      	movcc	r2, #0
 800696c:	441a      	add	r2, r3
 800696e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006972:	b17b      	cbz	r3, 8006994 <__mdiff+0x104>
 8006974:	6106      	str	r6, [r0, #16]
 8006976:	e7a5      	b.n	80068c4 <__mdiff+0x34>
 8006978:	f855 8b04 	ldr.w	r8, [r5], #4
 800697c:	fa17 f488 	uxtah	r4, r7, r8
 8006980:	1422      	asrs	r2, r4, #16
 8006982:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006986:	b2a4      	uxth	r4, r4
 8006988:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800698c:	f84e 4b04 	str.w	r4, [lr], #4
 8006990:	1417      	asrs	r7, r2, #16
 8006992:	e7e0      	b.n	8006956 <__mdiff+0xc6>
 8006994:	3e01      	subs	r6, #1
 8006996:	e7ea      	b.n	800696e <__mdiff+0xde>
 8006998:	080083ef 	.word	0x080083ef
 800699c:	08008400 	.word	0x08008400

080069a0 <__d2b>:
 80069a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069a4:	4689      	mov	r9, r1
 80069a6:	2101      	movs	r1, #1
 80069a8:	ec57 6b10 	vmov	r6, r7, d0
 80069ac:	4690      	mov	r8, r2
 80069ae:	f7ff fcd5 	bl	800635c <_Balloc>
 80069b2:	4604      	mov	r4, r0
 80069b4:	b930      	cbnz	r0, 80069c4 <__d2b+0x24>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b25      	ldr	r3, [pc, #148]	; (8006a50 <__d2b+0xb0>)
 80069ba:	4826      	ldr	r0, [pc, #152]	; (8006a54 <__d2b+0xb4>)
 80069bc:	f240 310a 	movw	r1, #778	; 0x30a
 80069c0:	f000 fa70 	bl	8006ea4 <__assert_func>
 80069c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80069c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069cc:	bb35      	cbnz	r5, 8006a1c <__d2b+0x7c>
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	d028      	beq.n	8006a26 <__d2b+0x86>
 80069d4:	4668      	mov	r0, sp
 80069d6:	9600      	str	r6, [sp, #0]
 80069d8:	f7ff fd8c 	bl	80064f4 <__lo0bits>
 80069dc:	9900      	ldr	r1, [sp, #0]
 80069de:	b300      	cbz	r0, 8006a22 <__d2b+0x82>
 80069e0:	9a01      	ldr	r2, [sp, #4]
 80069e2:	f1c0 0320 	rsb	r3, r0, #32
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	430b      	orrs	r3, r1
 80069ec:	40c2      	lsrs	r2, r0
 80069ee:	6163      	str	r3, [r4, #20]
 80069f0:	9201      	str	r2, [sp, #4]
 80069f2:	9b01      	ldr	r3, [sp, #4]
 80069f4:	61a3      	str	r3, [r4, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf14      	ite	ne
 80069fa:	2202      	movne	r2, #2
 80069fc:	2201      	moveq	r2, #1
 80069fe:	6122      	str	r2, [r4, #16]
 8006a00:	b1d5      	cbz	r5, 8006a38 <__d2b+0x98>
 8006a02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a06:	4405      	add	r5, r0
 8006a08:	f8c9 5000 	str.w	r5, [r9]
 8006a0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a10:	f8c8 0000 	str.w	r0, [r8]
 8006a14:	4620      	mov	r0, r4
 8006a16:	b003      	add	sp, #12
 8006a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a20:	e7d5      	b.n	80069ce <__d2b+0x2e>
 8006a22:	6161      	str	r1, [r4, #20]
 8006a24:	e7e5      	b.n	80069f2 <__d2b+0x52>
 8006a26:	a801      	add	r0, sp, #4
 8006a28:	f7ff fd64 	bl	80064f4 <__lo0bits>
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	6163      	str	r3, [r4, #20]
 8006a30:	2201      	movs	r2, #1
 8006a32:	6122      	str	r2, [r4, #16]
 8006a34:	3020      	adds	r0, #32
 8006a36:	e7e3      	b.n	8006a00 <__d2b+0x60>
 8006a38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a40:	f8c9 0000 	str.w	r0, [r9]
 8006a44:	6918      	ldr	r0, [r3, #16]
 8006a46:	f7ff fd35 	bl	80064b4 <__hi0bits>
 8006a4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a4e:	e7df      	b.n	8006a10 <__d2b+0x70>
 8006a50:	080083ef 	.word	0x080083ef
 8006a54:	08008400 	.word	0x08008400

08006a58 <_calloc_r>:
 8006a58:	b513      	push	{r0, r1, r4, lr}
 8006a5a:	434a      	muls	r2, r1
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	9201      	str	r2, [sp, #4]
 8006a60:	f000 f85a 	bl	8006b18 <_malloc_r>
 8006a64:	4604      	mov	r4, r0
 8006a66:	b118      	cbz	r0, 8006a70 <_calloc_r+0x18>
 8006a68:	9a01      	ldr	r2, [sp, #4]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f7fe f93c 	bl	8004ce8 <memset>
 8006a70:	4620      	mov	r0, r4
 8006a72:	b002      	add	sp, #8
 8006a74:	bd10      	pop	{r4, pc}
	...

08006a78 <_free_r>:
 8006a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a7a:	2900      	cmp	r1, #0
 8006a7c:	d048      	beq.n	8006b10 <_free_r+0x98>
 8006a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a82:	9001      	str	r0, [sp, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f1a1 0404 	sub.w	r4, r1, #4
 8006a8a:	bfb8      	it	lt
 8006a8c:	18e4      	addlt	r4, r4, r3
 8006a8e:	f000 fa65 	bl	8006f5c <__malloc_lock>
 8006a92:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <_free_r+0x9c>)
 8006a94:	9801      	ldr	r0, [sp, #4]
 8006a96:	6813      	ldr	r3, [r2, #0]
 8006a98:	4615      	mov	r5, r2
 8006a9a:	b933      	cbnz	r3, 8006aaa <_free_r+0x32>
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	6014      	str	r4, [r2, #0]
 8006aa0:	b003      	add	sp, #12
 8006aa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aa6:	f000 ba5f 	b.w	8006f68 <__malloc_unlock>
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	d90b      	bls.n	8006ac6 <_free_r+0x4e>
 8006aae:	6821      	ldr	r1, [r4, #0]
 8006ab0:	1862      	adds	r2, r4, r1
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bf04      	itt	eq
 8006ab6:	681a      	ldreq	r2, [r3, #0]
 8006ab8:	685b      	ldreq	r3, [r3, #4]
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	bf04      	itt	eq
 8006abe:	1852      	addeq	r2, r2, r1
 8006ac0:	6022      	streq	r2, [r4, #0]
 8006ac2:	602c      	str	r4, [r5, #0]
 8006ac4:	e7ec      	b.n	8006aa0 <_free_r+0x28>
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	b10b      	cbz	r3, 8006ad0 <_free_r+0x58>
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	d9fa      	bls.n	8006ac6 <_free_r+0x4e>
 8006ad0:	6811      	ldr	r1, [r2, #0]
 8006ad2:	1855      	adds	r5, r2, r1
 8006ad4:	42a5      	cmp	r5, r4
 8006ad6:	d10b      	bne.n	8006af0 <_free_r+0x78>
 8006ad8:	6824      	ldr	r4, [r4, #0]
 8006ada:	4421      	add	r1, r4
 8006adc:	1854      	adds	r4, r2, r1
 8006ade:	42a3      	cmp	r3, r4
 8006ae0:	6011      	str	r1, [r2, #0]
 8006ae2:	d1dd      	bne.n	8006aa0 <_free_r+0x28>
 8006ae4:	681c      	ldr	r4, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	6053      	str	r3, [r2, #4]
 8006aea:	4421      	add	r1, r4
 8006aec:	6011      	str	r1, [r2, #0]
 8006aee:	e7d7      	b.n	8006aa0 <_free_r+0x28>
 8006af0:	d902      	bls.n	8006af8 <_free_r+0x80>
 8006af2:	230c      	movs	r3, #12
 8006af4:	6003      	str	r3, [r0, #0]
 8006af6:	e7d3      	b.n	8006aa0 <_free_r+0x28>
 8006af8:	6825      	ldr	r5, [r4, #0]
 8006afa:	1961      	adds	r1, r4, r5
 8006afc:	428b      	cmp	r3, r1
 8006afe:	bf04      	itt	eq
 8006b00:	6819      	ldreq	r1, [r3, #0]
 8006b02:	685b      	ldreq	r3, [r3, #4]
 8006b04:	6063      	str	r3, [r4, #4]
 8006b06:	bf04      	itt	eq
 8006b08:	1949      	addeq	r1, r1, r5
 8006b0a:	6021      	streq	r1, [r4, #0]
 8006b0c:	6054      	str	r4, [r2, #4]
 8006b0e:	e7c7      	b.n	8006aa0 <_free_r+0x28>
 8006b10:	b003      	add	sp, #12
 8006b12:	bd30      	pop	{r4, r5, pc}
 8006b14:	20000244 	.word	0x20000244

08006b18 <_malloc_r>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	1ccd      	adds	r5, r1, #3
 8006b1c:	f025 0503 	bic.w	r5, r5, #3
 8006b20:	3508      	adds	r5, #8
 8006b22:	2d0c      	cmp	r5, #12
 8006b24:	bf38      	it	cc
 8006b26:	250c      	movcc	r5, #12
 8006b28:	2d00      	cmp	r5, #0
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	db01      	blt.n	8006b32 <_malloc_r+0x1a>
 8006b2e:	42a9      	cmp	r1, r5
 8006b30:	d903      	bls.n	8006b3a <_malloc_r+0x22>
 8006b32:	230c      	movs	r3, #12
 8006b34:	6033      	str	r3, [r6, #0]
 8006b36:	2000      	movs	r0, #0
 8006b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3a:	f000 fa0f 	bl	8006f5c <__malloc_lock>
 8006b3e:	4921      	ldr	r1, [pc, #132]	; (8006bc4 <_malloc_r+0xac>)
 8006b40:	680a      	ldr	r2, [r1, #0]
 8006b42:	4614      	mov	r4, r2
 8006b44:	b99c      	cbnz	r4, 8006b6e <_malloc_r+0x56>
 8006b46:	4f20      	ldr	r7, [pc, #128]	; (8006bc8 <_malloc_r+0xb0>)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	b923      	cbnz	r3, 8006b56 <_malloc_r+0x3e>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f000 f998 	bl	8006e84 <_sbrk_r>
 8006b54:	6038      	str	r0, [r7, #0]
 8006b56:	4629      	mov	r1, r5
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 f993 	bl	8006e84 <_sbrk_r>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d123      	bne.n	8006baa <_malloc_r+0x92>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6033      	str	r3, [r6, #0]
 8006b66:	4630      	mov	r0, r6
 8006b68:	f000 f9fe 	bl	8006f68 <__malloc_unlock>
 8006b6c:	e7e3      	b.n	8006b36 <_malloc_r+0x1e>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	1b5b      	subs	r3, r3, r5
 8006b72:	d417      	bmi.n	8006ba4 <_malloc_r+0x8c>
 8006b74:	2b0b      	cmp	r3, #11
 8006b76:	d903      	bls.n	8006b80 <_malloc_r+0x68>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	441c      	add	r4, r3
 8006b7c:	6025      	str	r5, [r4, #0]
 8006b7e:	e004      	b.n	8006b8a <_malloc_r+0x72>
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	42a2      	cmp	r2, r4
 8006b84:	bf0c      	ite	eq
 8006b86:	600b      	streq	r3, [r1, #0]
 8006b88:	6053      	strne	r3, [r2, #4]
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 f9ec 	bl	8006f68 <__malloc_unlock>
 8006b90:	f104 000b 	add.w	r0, r4, #11
 8006b94:	1d23      	adds	r3, r4, #4
 8006b96:	f020 0007 	bic.w	r0, r0, #7
 8006b9a:	1ac2      	subs	r2, r0, r3
 8006b9c:	d0cc      	beq.n	8006b38 <_malloc_r+0x20>
 8006b9e:	1a1b      	subs	r3, r3, r0
 8006ba0:	50a3      	str	r3, [r4, r2]
 8006ba2:	e7c9      	b.n	8006b38 <_malloc_r+0x20>
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	6864      	ldr	r4, [r4, #4]
 8006ba8:	e7cc      	b.n	8006b44 <_malloc_r+0x2c>
 8006baa:	1cc4      	adds	r4, r0, #3
 8006bac:	f024 0403 	bic.w	r4, r4, #3
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d0e3      	beq.n	8006b7c <_malloc_r+0x64>
 8006bb4:	1a21      	subs	r1, r4, r0
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f000 f964 	bl	8006e84 <_sbrk_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1dd      	bne.n	8006b7c <_malloc_r+0x64>
 8006bc0:	e7cf      	b.n	8006b62 <_malloc_r+0x4a>
 8006bc2:	bf00      	nop
 8006bc4:	20000244 	.word	0x20000244
 8006bc8:	20000248 	.word	0x20000248

08006bcc <__ssputs_r>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	688e      	ldr	r6, [r1, #8]
 8006bd2:	429e      	cmp	r6, r3
 8006bd4:	4682      	mov	sl, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4690      	mov	r8, r2
 8006bda:	461f      	mov	r7, r3
 8006bdc:	d838      	bhi.n	8006c50 <__ssputs_r+0x84>
 8006bde:	898a      	ldrh	r2, [r1, #12]
 8006be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006be4:	d032      	beq.n	8006c4c <__ssputs_r+0x80>
 8006be6:	6825      	ldr	r5, [r4, #0]
 8006be8:	6909      	ldr	r1, [r1, #16]
 8006bea:	eba5 0901 	sub.w	r9, r5, r1
 8006bee:	6965      	ldr	r5, [r4, #20]
 8006bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	444b      	add	r3, r9
 8006bfc:	106d      	asrs	r5, r5, #1
 8006bfe:	429d      	cmp	r5, r3
 8006c00:	bf38      	it	cc
 8006c02:	461d      	movcc	r5, r3
 8006c04:	0553      	lsls	r3, r2, #21
 8006c06:	d531      	bpl.n	8006c6c <__ssputs_r+0xa0>
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7ff ff85 	bl	8006b18 <_malloc_r>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	b950      	cbnz	r0, 8006c28 <__ssputs_r+0x5c>
 8006c12:	230c      	movs	r3, #12
 8006c14:	f8ca 3000 	str.w	r3, [sl]
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c28:	6921      	ldr	r1, [r4, #16]
 8006c2a:	464a      	mov	r2, r9
 8006c2c:	f7ff fb88 	bl	8006340 <memcpy>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	6126      	str	r6, [r4, #16]
 8006c3e:	6165      	str	r5, [r4, #20]
 8006c40:	444e      	add	r6, r9
 8006c42:	eba5 0509 	sub.w	r5, r5, r9
 8006c46:	6026      	str	r6, [r4, #0]
 8006c48:	60a5      	str	r5, [r4, #8]
 8006c4a:	463e      	mov	r6, r7
 8006c4c:	42be      	cmp	r6, r7
 8006c4e:	d900      	bls.n	8006c52 <__ssputs_r+0x86>
 8006c50:	463e      	mov	r6, r7
 8006c52:	4632      	mov	r2, r6
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	4641      	mov	r1, r8
 8006c58:	f000 f966 	bl	8006f28 <memmove>
 8006c5c:	68a3      	ldr	r3, [r4, #8]
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	1b9b      	subs	r3, r3, r6
 8006c62:	4432      	add	r2, r6
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e7db      	b.n	8006c24 <__ssputs_r+0x58>
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	f000 f981 	bl	8006f74 <_realloc_r>
 8006c72:	4606      	mov	r6, r0
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d1e1      	bne.n	8006c3c <__ssputs_r+0x70>
 8006c78:	6921      	ldr	r1, [r4, #16]
 8006c7a:	4650      	mov	r0, sl
 8006c7c:	f7ff fefc 	bl	8006a78 <_free_r>
 8006c80:	e7c7      	b.n	8006c12 <__ssputs_r+0x46>
	...

08006c84 <_svfiprintf_r>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	4698      	mov	r8, r3
 8006c8a:	898b      	ldrh	r3, [r1, #12]
 8006c8c:	061b      	lsls	r3, r3, #24
 8006c8e:	b09d      	sub	sp, #116	; 0x74
 8006c90:	4607      	mov	r7, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	4614      	mov	r4, r2
 8006c96:	d50e      	bpl.n	8006cb6 <_svfiprintf_r+0x32>
 8006c98:	690b      	ldr	r3, [r1, #16]
 8006c9a:	b963      	cbnz	r3, 8006cb6 <_svfiprintf_r+0x32>
 8006c9c:	2140      	movs	r1, #64	; 0x40
 8006c9e:	f7ff ff3b 	bl	8006b18 <_malloc_r>
 8006ca2:	6028      	str	r0, [r5, #0]
 8006ca4:	6128      	str	r0, [r5, #16]
 8006ca6:	b920      	cbnz	r0, 8006cb2 <_svfiprintf_r+0x2e>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	e0d1      	b.n	8006e56 <_svfiprintf_r+0x1d2>
 8006cb2:	2340      	movs	r3, #64	; 0x40
 8006cb4:	616b      	str	r3, [r5, #20]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	2320      	movs	r3, #32
 8006cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cc4:	2330      	movs	r3, #48	; 0x30
 8006cc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e70 <_svfiprintf_r+0x1ec>
 8006cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cce:	f04f 0901 	mov.w	r9, #1
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	469a      	mov	sl, r3
 8006cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cda:	b10a      	cbz	r2, 8006ce0 <_svfiprintf_r+0x5c>
 8006cdc:	2a25      	cmp	r2, #37	; 0x25
 8006cde:	d1f9      	bne.n	8006cd4 <_svfiprintf_r+0x50>
 8006ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ce4:	d00b      	beq.n	8006cfe <_svfiprintf_r+0x7a>
 8006ce6:	465b      	mov	r3, fp
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	4638      	mov	r0, r7
 8006cee:	f7ff ff6d 	bl	8006bcc <__ssputs_r>
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f000 80aa 	beq.w	8006e4c <_svfiprintf_r+0x1c8>
 8006cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cfa:	445a      	add	r2, fp
 8006cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80a2 	beq.w	8006e4c <_svfiprintf_r+0x1c8>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d12:	f10a 0a01 	add.w	sl, sl, #1
 8006d16:	9304      	str	r3, [sp, #16]
 8006d18:	9307      	str	r3, [sp, #28]
 8006d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d20:	4654      	mov	r4, sl
 8006d22:	2205      	movs	r2, #5
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	4851      	ldr	r0, [pc, #324]	; (8006e70 <_svfiprintf_r+0x1ec>)
 8006d2a:	f7f9 fa59 	bl	80001e0 <memchr>
 8006d2e:	9a04      	ldr	r2, [sp, #16]
 8006d30:	b9d8      	cbnz	r0, 8006d6a <_svfiprintf_r+0xe6>
 8006d32:	06d0      	lsls	r0, r2, #27
 8006d34:	bf44      	itt	mi
 8006d36:	2320      	movmi	r3, #32
 8006d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d3c:	0711      	lsls	r1, r2, #28
 8006d3e:	bf44      	itt	mi
 8006d40:	232b      	movmi	r3, #43	; 0x2b
 8006d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d46:	f89a 3000 	ldrb.w	r3, [sl]
 8006d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4c:	d015      	beq.n	8006d7a <_svfiprintf_r+0xf6>
 8006d4e:	9a07      	ldr	r2, [sp, #28]
 8006d50:	4654      	mov	r4, sl
 8006d52:	2000      	movs	r0, #0
 8006d54:	f04f 0c0a 	mov.w	ip, #10
 8006d58:	4621      	mov	r1, r4
 8006d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d5e:	3b30      	subs	r3, #48	; 0x30
 8006d60:	2b09      	cmp	r3, #9
 8006d62:	d94e      	bls.n	8006e02 <_svfiprintf_r+0x17e>
 8006d64:	b1b0      	cbz	r0, 8006d94 <_svfiprintf_r+0x110>
 8006d66:	9207      	str	r2, [sp, #28]
 8006d68:	e014      	b.n	8006d94 <_svfiprintf_r+0x110>
 8006d6a:	eba0 0308 	sub.w	r3, r0, r8
 8006d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	46a2      	mov	sl, r4
 8006d78:	e7d2      	b.n	8006d20 <_svfiprintf_r+0x9c>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	1d19      	adds	r1, r3, #4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	9103      	str	r1, [sp, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfbb      	ittet	lt
 8006d86:	425b      	neglt	r3, r3
 8006d88:	f042 0202 	orrlt.w	r2, r2, #2
 8006d8c:	9307      	strge	r3, [sp, #28]
 8006d8e:	9307      	strlt	r3, [sp, #28]
 8006d90:	bfb8      	it	lt
 8006d92:	9204      	strlt	r2, [sp, #16]
 8006d94:	7823      	ldrb	r3, [r4, #0]
 8006d96:	2b2e      	cmp	r3, #46	; 0x2e
 8006d98:	d10c      	bne.n	8006db4 <_svfiprintf_r+0x130>
 8006d9a:	7863      	ldrb	r3, [r4, #1]
 8006d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9e:	d135      	bne.n	8006e0c <_svfiprintf_r+0x188>
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	9203      	str	r2, [sp, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bfb8      	it	lt
 8006dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8006db0:	3402      	adds	r4, #2
 8006db2:	9305      	str	r3, [sp, #20]
 8006db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e80 <_svfiprintf_r+0x1fc>
 8006db8:	7821      	ldrb	r1, [r4, #0]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	f7f9 fa0f 	bl	80001e0 <memchr>
 8006dc2:	b140      	cbz	r0, 8006dd6 <_svfiprintf_r+0x152>
 8006dc4:	2340      	movs	r3, #64	; 0x40
 8006dc6:	eba0 000a 	sub.w	r0, r0, sl
 8006dca:	fa03 f000 	lsl.w	r0, r3, r0
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	4303      	orrs	r3, r0
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dda:	4826      	ldr	r0, [pc, #152]	; (8006e74 <_svfiprintf_r+0x1f0>)
 8006ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006de0:	2206      	movs	r2, #6
 8006de2:	f7f9 f9fd 	bl	80001e0 <memchr>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d038      	beq.n	8006e5c <_svfiprintf_r+0x1d8>
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <_svfiprintf_r+0x1f4>)
 8006dec:	bb1b      	cbnz	r3, 8006e36 <_svfiprintf_r+0x1b2>
 8006dee:	9b03      	ldr	r3, [sp, #12]
 8006df0:	3307      	adds	r3, #7
 8006df2:	f023 0307 	bic.w	r3, r3, #7
 8006df6:	3308      	adds	r3, #8
 8006df8:	9303      	str	r3, [sp, #12]
 8006dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfc:	4433      	add	r3, r6
 8006dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006e00:	e767      	b.n	8006cd2 <_svfiprintf_r+0x4e>
 8006e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e06:	460c      	mov	r4, r1
 8006e08:	2001      	movs	r0, #1
 8006e0a:	e7a5      	b.n	8006d58 <_svfiprintf_r+0xd4>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	3401      	adds	r4, #1
 8006e10:	9305      	str	r3, [sp, #20]
 8006e12:	4619      	mov	r1, r3
 8006e14:	f04f 0c0a 	mov.w	ip, #10
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e1e:	3a30      	subs	r2, #48	; 0x30
 8006e20:	2a09      	cmp	r2, #9
 8006e22:	d903      	bls.n	8006e2c <_svfiprintf_r+0x1a8>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0c5      	beq.n	8006db4 <_svfiprintf_r+0x130>
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	e7c3      	b.n	8006db4 <_svfiprintf_r+0x130>
 8006e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e30:	4604      	mov	r4, r0
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7f0      	b.n	8006e18 <_svfiprintf_r+0x194>
 8006e36:	ab03      	add	r3, sp, #12
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <_svfiprintf_r+0x1f8>)
 8006e3e:	a904      	add	r1, sp, #16
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7fd fff9 	bl	8004e38 <_printf_float>
 8006e46:	1c42      	adds	r2, r0, #1
 8006e48:	4606      	mov	r6, r0
 8006e4a:	d1d6      	bne.n	8006dfa <_svfiprintf_r+0x176>
 8006e4c:	89ab      	ldrh	r3, [r5, #12]
 8006e4e:	065b      	lsls	r3, r3, #25
 8006e50:	f53f af2c 	bmi.w	8006cac <_svfiprintf_r+0x28>
 8006e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e56:	b01d      	add	sp, #116	; 0x74
 8006e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5c:	ab03      	add	r3, sp, #12
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	462a      	mov	r2, r5
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <_svfiprintf_r+0x1f8>)
 8006e64:	a904      	add	r1, sp, #16
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7fe fa8a 	bl	8005380 <_printf_i>
 8006e6c:	e7eb      	b.n	8006e46 <_svfiprintf_r+0x1c2>
 8006e6e:	bf00      	nop
 8006e70:	0800855c 	.word	0x0800855c
 8006e74:	08008566 	.word	0x08008566
 8006e78:	08004e39 	.word	0x08004e39
 8006e7c:	08006bcd 	.word	0x08006bcd
 8006e80:	08008562 	.word	0x08008562

08006e84 <_sbrk_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d06      	ldr	r5, [pc, #24]	; (8006ea0 <_sbrk_r+0x1c>)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	f7fd f960 	bl	8004154 <_sbrk>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_sbrk_r+0x1a>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_sbrk_r+0x1a>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	20000274 	.word	0x20000274

08006ea4 <__assert_func>:
 8006ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ea6:	4614      	mov	r4, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <__assert_func+0x2c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4605      	mov	r5, r0
 8006eb0:	68d8      	ldr	r0, [r3, #12]
 8006eb2:	b14c      	cbz	r4, 8006ec8 <__assert_func+0x24>
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <__assert_func+0x30>)
 8006eb6:	9100      	str	r1, [sp, #0]
 8006eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ebc:	4906      	ldr	r1, [pc, #24]	; (8006ed8 <__assert_func+0x34>)
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	f000 f80e 	bl	8006ee0 <fiprintf>
 8006ec4:	f000 faa4 	bl	8007410 <abort>
 8006ec8:	4b04      	ldr	r3, [pc, #16]	; (8006edc <__assert_func+0x38>)
 8006eca:	461c      	mov	r4, r3
 8006ecc:	e7f3      	b.n	8006eb6 <__assert_func+0x12>
 8006ece:	bf00      	nop
 8006ed0:	2000000c 	.word	0x2000000c
 8006ed4:	0800856d 	.word	0x0800856d
 8006ed8:	0800857a 	.word	0x0800857a
 8006edc:	080085a8 	.word	0x080085a8

08006ee0 <fiprintf>:
 8006ee0:	b40e      	push	{r1, r2, r3}
 8006ee2:	b503      	push	{r0, r1, lr}
 8006ee4:	4601      	mov	r1, r0
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	4805      	ldr	r0, [pc, #20]	; (8006f00 <fiprintf+0x20>)
 8006eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eee:	6800      	ldr	r0, [r0, #0]
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	f000 f88f 	bl	8007014 <_vfiprintf_r>
 8006ef6:	b002      	add	sp, #8
 8006ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006efc:	b003      	add	sp, #12
 8006efe:	4770      	bx	lr
 8006f00:	2000000c 	.word	0x2000000c

08006f04 <__ascii_mbtowc>:
 8006f04:	b082      	sub	sp, #8
 8006f06:	b901      	cbnz	r1, 8006f0a <__ascii_mbtowc+0x6>
 8006f08:	a901      	add	r1, sp, #4
 8006f0a:	b142      	cbz	r2, 8006f1e <__ascii_mbtowc+0x1a>
 8006f0c:	b14b      	cbz	r3, 8006f22 <__ascii_mbtowc+0x1e>
 8006f0e:	7813      	ldrb	r3, [r2, #0]
 8006f10:	600b      	str	r3, [r1, #0]
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	1e10      	subs	r0, r2, #0
 8006f16:	bf18      	it	ne
 8006f18:	2001      	movne	r0, #1
 8006f1a:	b002      	add	sp, #8
 8006f1c:	4770      	bx	lr
 8006f1e:	4610      	mov	r0, r2
 8006f20:	e7fb      	b.n	8006f1a <__ascii_mbtowc+0x16>
 8006f22:	f06f 0001 	mvn.w	r0, #1
 8006f26:	e7f8      	b.n	8006f1a <__ascii_mbtowc+0x16>

08006f28 <memmove>:
 8006f28:	4288      	cmp	r0, r1
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	eb01 0402 	add.w	r4, r1, r2
 8006f30:	d902      	bls.n	8006f38 <memmove+0x10>
 8006f32:	4284      	cmp	r4, r0
 8006f34:	4623      	mov	r3, r4
 8006f36:	d807      	bhi.n	8006f48 <memmove+0x20>
 8006f38:	1e43      	subs	r3, r0, #1
 8006f3a:	42a1      	cmp	r1, r4
 8006f3c:	d008      	beq.n	8006f50 <memmove+0x28>
 8006f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f46:	e7f8      	b.n	8006f3a <memmove+0x12>
 8006f48:	4402      	add	r2, r0
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	428a      	cmp	r2, r1
 8006f4e:	d100      	bne.n	8006f52 <memmove+0x2a>
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f5a:	e7f7      	b.n	8006f4c <memmove+0x24>

08006f5c <__malloc_lock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_lock+0x8>)
 8006f5e:	f000 bc17 	b.w	8007790 <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	2000027c 	.word	0x2000027c

08006f68 <__malloc_unlock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_unlock+0x8>)
 8006f6a:	f000 bc12 	b.w	8007792 <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	2000027c 	.word	0x2000027c

08006f74 <_realloc_r>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	4607      	mov	r7, r0
 8006f78:	4614      	mov	r4, r2
 8006f7a:	460e      	mov	r6, r1
 8006f7c:	b921      	cbnz	r1, 8006f88 <_realloc_r+0x14>
 8006f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f82:	4611      	mov	r1, r2
 8006f84:	f7ff bdc8 	b.w	8006b18 <_malloc_r>
 8006f88:	b922      	cbnz	r2, 8006f94 <_realloc_r+0x20>
 8006f8a:	f7ff fd75 	bl	8006a78 <_free_r>
 8006f8e:	4625      	mov	r5, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	f000 fc62 	bl	800785c <_malloc_usable_size_r>
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d20f      	bcs.n	8006fbc <_realloc_r+0x48>
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7ff fdba 	bl	8006b18 <_malloc_r>
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d0f2      	beq.n	8006f90 <_realloc_r+0x1c>
 8006faa:	4631      	mov	r1, r6
 8006fac:	4622      	mov	r2, r4
 8006fae:	f7ff f9c7 	bl	8006340 <memcpy>
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff fd5f 	bl	8006a78 <_free_r>
 8006fba:	e7e9      	b.n	8006f90 <_realloc_r+0x1c>
 8006fbc:	4635      	mov	r5, r6
 8006fbe:	e7e7      	b.n	8006f90 <_realloc_r+0x1c>

08006fc0 <__sfputc_r>:
 8006fc0:	6893      	ldr	r3, [r2, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	b410      	push	{r4}
 8006fc8:	6093      	str	r3, [r2, #8]
 8006fca:	da08      	bge.n	8006fde <__sfputc_r+0x1e>
 8006fcc:	6994      	ldr	r4, [r2, #24]
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	db01      	blt.n	8006fd6 <__sfputc_r+0x16>
 8006fd2:	290a      	cmp	r1, #10
 8006fd4:	d103      	bne.n	8006fde <__sfputc_r+0x1e>
 8006fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fda:	f000 b94b 	b.w	8007274 <__swbuf_r>
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	1c58      	adds	r0, r3, #1
 8006fe2:	6010      	str	r0, [r2, #0]
 8006fe4:	7019      	strb	r1, [r3, #0]
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <__sfputs_r>:
 8006fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	460f      	mov	r7, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	18d5      	adds	r5, r2, r3
 8006ff8:	42ac      	cmp	r4, r5
 8006ffa:	d101      	bne.n	8007000 <__sfputs_r+0x12>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e007      	b.n	8007010 <__sfputs_r+0x22>
 8007000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007004:	463a      	mov	r2, r7
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ffda 	bl	8006fc0 <__sfputc_r>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d1f3      	bne.n	8006ff8 <__sfputs_r+0xa>
 8007010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007014 <_vfiprintf_r>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	460d      	mov	r5, r1
 800701a:	b09d      	sub	sp, #116	; 0x74
 800701c:	4614      	mov	r4, r2
 800701e:	4698      	mov	r8, r3
 8007020:	4606      	mov	r6, r0
 8007022:	b118      	cbz	r0, 800702c <_vfiprintf_r+0x18>
 8007024:	6983      	ldr	r3, [r0, #24]
 8007026:	b90b      	cbnz	r3, 800702c <_vfiprintf_r+0x18>
 8007028:	f000 fb14 	bl	8007654 <__sinit>
 800702c:	4b89      	ldr	r3, [pc, #548]	; (8007254 <_vfiprintf_r+0x240>)
 800702e:	429d      	cmp	r5, r3
 8007030:	d11b      	bne.n	800706a <_vfiprintf_r+0x56>
 8007032:	6875      	ldr	r5, [r6, #4]
 8007034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007036:	07d9      	lsls	r1, r3, #31
 8007038:	d405      	bmi.n	8007046 <_vfiprintf_r+0x32>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	059a      	lsls	r2, r3, #22
 800703e:	d402      	bmi.n	8007046 <_vfiprintf_r+0x32>
 8007040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007042:	f000 fba5 	bl	8007790 <__retarget_lock_acquire_recursive>
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	071b      	lsls	r3, r3, #28
 800704a:	d501      	bpl.n	8007050 <_vfiprintf_r+0x3c>
 800704c:	692b      	ldr	r3, [r5, #16]
 800704e:	b9eb      	cbnz	r3, 800708c <_vfiprintf_r+0x78>
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f000 f96e 	bl	8007334 <__swsetup_r>
 8007058:	b1c0      	cbz	r0, 800708c <_vfiprintf_r+0x78>
 800705a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705c:	07dc      	lsls	r4, r3, #31
 800705e:	d50e      	bpl.n	800707e <_vfiprintf_r+0x6a>
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	b01d      	add	sp, #116	; 0x74
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	4b7b      	ldr	r3, [pc, #492]	; (8007258 <_vfiprintf_r+0x244>)
 800706c:	429d      	cmp	r5, r3
 800706e:	d101      	bne.n	8007074 <_vfiprintf_r+0x60>
 8007070:	68b5      	ldr	r5, [r6, #8]
 8007072:	e7df      	b.n	8007034 <_vfiprintf_r+0x20>
 8007074:	4b79      	ldr	r3, [pc, #484]	; (800725c <_vfiprintf_r+0x248>)
 8007076:	429d      	cmp	r5, r3
 8007078:	bf08      	it	eq
 800707a:	68f5      	ldreq	r5, [r6, #12]
 800707c:	e7da      	b.n	8007034 <_vfiprintf_r+0x20>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	0598      	lsls	r0, r3, #22
 8007082:	d4ed      	bmi.n	8007060 <_vfiprintf_r+0x4c>
 8007084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007086:	f000 fb84 	bl	8007792 <__retarget_lock_release_recursive>
 800708a:	e7e9      	b.n	8007060 <_vfiprintf_r+0x4c>
 800708c:	2300      	movs	r3, #0
 800708e:	9309      	str	r3, [sp, #36]	; 0x24
 8007090:	2320      	movs	r3, #32
 8007092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007096:	f8cd 800c 	str.w	r8, [sp, #12]
 800709a:	2330      	movs	r3, #48	; 0x30
 800709c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007260 <_vfiprintf_r+0x24c>
 80070a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070a4:	f04f 0901 	mov.w	r9, #1
 80070a8:	4623      	mov	r3, r4
 80070aa:	469a      	mov	sl, r3
 80070ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b0:	b10a      	cbz	r2, 80070b6 <_vfiprintf_r+0xa2>
 80070b2:	2a25      	cmp	r2, #37	; 0x25
 80070b4:	d1f9      	bne.n	80070aa <_vfiprintf_r+0x96>
 80070b6:	ebba 0b04 	subs.w	fp, sl, r4
 80070ba:	d00b      	beq.n	80070d4 <_vfiprintf_r+0xc0>
 80070bc:	465b      	mov	r3, fp
 80070be:	4622      	mov	r2, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ff93 	bl	8006fee <__sfputs_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	f000 80aa 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d0:	445a      	add	r2, fp
 80070d2:	9209      	str	r2, [sp, #36]	; 0x24
 80070d4:	f89a 3000 	ldrb.w	r3, [sl]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80a2 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070de:	2300      	movs	r3, #0
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e8:	f10a 0a01 	add.w	sl, sl, #1
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070f4:	931a      	str	r3, [sp, #104]	; 0x68
 80070f6:	4654      	mov	r4, sl
 80070f8:	2205      	movs	r2, #5
 80070fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fe:	4858      	ldr	r0, [pc, #352]	; (8007260 <_vfiprintf_r+0x24c>)
 8007100:	f7f9 f86e 	bl	80001e0 <memchr>
 8007104:	9a04      	ldr	r2, [sp, #16]
 8007106:	b9d8      	cbnz	r0, 8007140 <_vfiprintf_r+0x12c>
 8007108:	06d1      	lsls	r1, r2, #27
 800710a:	bf44      	itt	mi
 800710c:	2320      	movmi	r3, #32
 800710e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007112:	0713      	lsls	r3, r2, #28
 8007114:	bf44      	itt	mi
 8007116:	232b      	movmi	r3, #43	; 0x2b
 8007118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800711c:	f89a 3000 	ldrb.w	r3, [sl]
 8007120:	2b2a      	cmp	r3, #42	; 0x2a
 8007122:	d015      	beq.n	8007150 <_vfiprintf_r+0x13c>
 8007124:	9a07      	ldr	r2, [sp, #28]
 8007126:	4654      	mov	r4, sl
 8007128:	2000      	movs	r0, #0
 800712a:	f04f 0c0a 	mov.w	ip, #10
 800712e:	4621      	mov	r1, r4
 8007130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007134:	3b30      	subs	r3, #48	; 0x30
 8007136:	2b09      	cmp	r3, #9
 8007138:	d94e      	bls.n	80071d8 <_vfiprintf_r+0x1c4>
 800713a:	b1b0      	cbz	r0, 800716a <_vfiprintf_r+0x156>
 800713c:	9207      	str	r2, [sp, #28]
 800713e:	e014      	b.n	800716a <_vfiprintf_r+0x156>
 8007140:	eba0 0308 	sub.w	r3, r0, r8
 8007144:	fa09 f303 	lsl.w	r3, r9, r3
 8007148:	4313      	orrs	r3, r2
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	46a2      	mov	sl, r4
 800714e:	e7d2      	b.n	80070f6 <_vfiprintf_r+0xe2>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	1d19      	adds	r1, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9103      	str	r1, [sp, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfbb      	ittet	lt
 800715c:	425b      	neglt	r3, r3
 800715e:	f042 0202 	orrlt.w	r2, r2, #2
 8007162:	9307      	strge	r3, [sp, #28]
 8007164:	9307      	strlt	r3, [sp, #28]
 8007166:	bfb8      	it	lt
 8007168:	9204      	strlt	r2, [sp, #16]
 800716a:	7823      	ldrb	r3, [r4, #0]
 800716c:	2b2e      	cmp	r3, #46	; 0x2e
 800716e:	d10c      	bne.n	800718a <_vfiprintf_r+0x176>
 8007170:	7863      	ldrb	r3, [r4, #1]
 8007172:	2b2a      	cmp	r3, #42	; 0x2a
 8007174:	d135      	bne.n	80071e2 <_vfiprintf_r+0x1ce>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	1d1a      	adds	r2, r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	9203      	str	r2, [sp, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfb8      	it	lt
 8007182:	f04f 33ff 	movlt.w	r3, #4294967295
 8007186:	3402      	adds	r4, #2
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007270 <_vfiprintf_r+0x25c>
 800718e:	7821      	ldrb	r1, [r4, #0]
 8007190:	2203      	movs	r2, #3
 8007192:	4650      	mov	r0, sl
 8007194:	f7f9 f824 	bl	80001e0 <memchr>
 8007198:	b140      	cbz	r0, 80071ac <_vfiprintf_r+0x198>
 800719a:	2340      	movs	r3, #64	; 0x40
 800719c:	eba0 000a 	sub.w	r0, r0, sl
 80071a0:	fa03 f000 	lsl.w	r0, r3, r0
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	4303      	orrs	r3, r0
 80071a8:	3401      	adds	r4, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	482c      	ldr	r0, [pc, #176]	; (8007264 <_vfiprintf_r+0x250>)
 80071b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b6:	2206      	movs	r2, #6
 80071b8:	f7f9 f812 	bl	80001e0 <memchr>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d03f      	beq.n	8007240 <_vfiprintf_r+0x22c>
 80071c0:	4b29      	ldr	r3, [pc, #164]	; (8007268 <_vfiprintf_r+0x254>)
 80071c2:	bb1b      	cbnz	r3, 800720c <_vfiprintf_r+0x1f8>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	3307      	adds	r3, #7
 80071c8:	f023 0307 	bic.w	r3, r3, #7
 80071cc:	3308      	adds	r3, #8
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d2:	443b      	add	r3, r7
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	e767      	b.n	80070a8 <_vfiprintf_r+0x94>
 80071d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071dc:	460c      	mov	r4, r1
 80071de:	2001      	movs	r0, #1
 80071e0:	e7a5      	b.n	800712e <_vfiprintf_r+0x11a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	3401      	adds	r4, #1
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	4619      	mov	r1, r3
 80071ea:	f04f 0c0a 	mov.w	ip, #10
 80071ee:	4620      	mov	r0, r4
 80071f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f4:	3a30      	subs	r2, #48	; 0x30
 80071f6:	2a09      	cmp	r2, #9
 80071f8:	d903      	bls.n	8007202 <_vfiprintf_r+0x1ee>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c5      	beq.n	800718a <_vfiprintf_r+0x176>
 80071fe:	9105      	str	r1, [sp, #20]
 8007200:	e7c3      	b.n	800718a <_vfiprintf_r+0x176>
 8007202:	fb0c 2101 	mla	r1, ip, r1, r2
 8007206:	4604      	mov	r4, r0
 8007208:	2301      	movs	r3, #1
 800720a:	e7f0      	b.n	80071ee <_vfiprintf_r+0x1da>
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <_vfiprintf_r+0x258>)
 8007214:	a904      	add	r1, sp, #16
 8007216:	4630      	mov	r0, r6
 8007218:	f7fd fe0e 	bl	8004e38 <_printf_float>
 800721c:	4607      	mov	r7, r0
 800721e:	1c78      	adds	r0, r7, #1
 8007220:	d1d6      	bne.n	80071d0 <_vfiprintf_r+0x1bc>
 8007222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007224:	07d9      	lsls	r1, r3, #31
 8007226:	d405      	bmi.n	8007234 <_vfiprintf_r+0x220>
 8007228:	89ab      	ldrh	r3, [r5, #12]
 800722a:	059a      	lsls	r2, r3, #22
 800722c:	d402      	bmi.n	8007234 <_vfiprintf_r+0x220>
 800722e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007230:	f000 faaf 	bl	8007792 <__retarget_lock_release_recursive>
 8007234:	89ab      	ldrh	r3, [r5, #12]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	f53f af12 	bmi.w	8007060 <_vfiprintf_r+0x4c>
 800723c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723e:	e711      	b.n	8007064 <_vfiprintf_r+0x50>
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <_vfiprintf_r+0x258>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	4630      	mov	r0, r6
 800724c:	f7fe f898 	bl	8005380 <_printf_i>
 8007250:	e7e4      	b.n	800721c <_vfiprintf_r+0x208>
 8007252:	bf00      	nop
 8007254:	080086d4 	.word	0x080086d4
 8007258:	080086f4 	.word	0x080086f4
 800725c:	080086b4 	.word	0x080086b4
 8007260:	0800855c 	.word	0x0800855c
 8007264:	08008566 	.word	0x08008566
 8007268:	08004e39 	.word	0x08004e39
 800726c:	08006fef 	.word	0x08006fef
 8007270:	08008562 	.word	0x08008562

08007274 <__swbuf_r>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	460e      	mov	r6, r1
 8007278:	4614      	mov	r4, r2
 800727a:	4605      	mov	r5, r0
 800727c:	b118      	cbz	r0, 8007286 <__swbuf_r+0x12>
 800727e:	6983      	ldr	r3, [r0, #24]
 8007280:	b90b      	cbnz	r3, 8007286 <__swbuf_r+0x12>
 8007282:	f000 f9e7 	bl	8007654 <__sinit>
 8007286:	4b21      	ldr	r3, [pc, #132]	; (800730c <__swbuf_r+0x98>)
 8007288:	429c      	cmp	r4, r3
 800728a:	d12b      	bne.n	80072e4 <__swbuf_r+0x70>
 800728c:	686c      	ldr	r4, [r5, #4]
 800728e:	69a3      	ldr	r3, [r4, #24]
 8007290:	60a3      	str	r3, [r4, #8]
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	071a      	lsls	r2, r3, #28
 8007296:	d52f      	bpl.n	80072f8 <__swbuf_r+0x84>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	b36b      	cbz	r3, 80072f8 <__swbuf_r+0x84>
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	6820      	ldr	r0, [r4, #0]
 80072a0:	1ac0      	subs	r0, r0, r3
 80072a2:	6963      	ldr	r3, [r4, #20]
 80072a4:	b2f6      	uxtb	r6, r6
 80072a6:	4283      	cmp	r3, r0
 80072a8:	4637      	mov	r7, r6
 80072aa:	dc04      	bgt.n	80072b6 <__swbuf_r+0x42>
 80072ac:	4621      	mov	r1, r4
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 f93c 	bl	800752c <_fflush_r>
 80072b4:	bb30      	cbnz	r0, 8007304 <__swbuf_r+0x90>
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	60a3      	str	r3, [r4, #8]
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	6022      	str	r2, [r4, #0]
 80072c2:	701e      	strb	r6, [r3, #0]
 80072c4:	6963      	ldr	r3, [r4, #20]
 80072c6:	3001      	adds	r0, #1
 80072c8:	4283      	cmp	r3, r0
 80072ca:	d004      	beq.n	80072d6 <__swbuf_r+0x62>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	07db      	lsls	r3, r3, #31
 80072d0:	d506      	bpl.n	80072e0 <__swbuf_r+0x6c>
 80072d2:	2e0a      	cmp	r6, #10
 80072d4:	d104      	bne.n	80072e0 <__swbuf_r+0x6c>
 80072d6:	4621      	mov	r1, r4
 80072d8:	4628      	mov	r0, r5
 80072da:	f000 f927 	bl	800752c <_fflush_r>
 80072de:	b988      	cbnz	r0, 8007304 <__swbuf_r+0x90>
 80072e0:	4638      	mov	r0, r7
 80072e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <__swbuf_r+0x9c>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d101      	bne.n	80072ee <__swbuf_r+0x7a>
 80072ea:	68ac      	ldr	r4, [r5, #8]
 80072ec:	e7cf      	b.n	800728e <__swbuf_r+0x1a>
 80072ee:	4b09      	ldr	r3, [pc, #36]	; (8007314 <__swbuf_r+0xa0>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	bf08      	it	eq
 80072f4:	68ec      	ldreq	r4, [r5, #12]
 80072f6:	e7ca      	b.n	800728e <__swbuf_r+0x1a>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4628      	mov	r0, r5
 80072fc:	f000 f81a 	bl	8007334 <__swsetup_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	d0cb      	beq.n	800729c <__swbuf_r+0x28>
 8007304:	f04f 37ff 	mov.w	r7, #4294967295
 8007308:	e7ea      	b.n	80072e0 <__swbuf_r+0x6c>
 800730a:	bf00      	nop
 800730c:	080086d4 	.word	0x080086d4
 8007310:	080086f4 	.word	0x080086f4
 8007314:	080086b4 	.word	0x080086b4

08007318 <__ascii_wctomb>:
 8007318:	b149      	cbz	r1, 800732e <__ascii_wctomb+0x16>
 800731a:	2aff      	cmp	r2, #255	; 0xff
 800731c:	bf85      	ittet	hi
 800731e:	238a      	movhi	r3, #138	; 0x8a
 8007320:	6003      	strhi	r3, [r0, #0]
 8007322:	700a      	strbls	r2, [r1, #0]
 8007324:	f04f 30ff 	movhi.w	r0, #4294967295
 8007328:	bf98      	it	ls
 800732a:	2001      	movls	r0, #1
 800732c:	4770      	bx	lr
 800732e:	4608      	mov	r0, r1
 8007330:	4770      	bx	lr
	...

08007334 <__swsetup_r>:
 8007334:	4b32      	ldr	r3, [pc, #200]	; (8007400 <__swsetup_r+0xcc>)
 8007336:	b570      	push	{r4, r5, r6, lr}
 8007338:	681d      	ldr	r5, [r3, #0]
 800733a:	4606      	mov	r6, r0
 800733c:	460c      	mov	r4, r1
 800733e:	b125      	cbz	r5, 800734a <__swsetup_r+0x16>
 8007340:	69ab      	ldr	r3, [r5, #24]
 8007342:	b913      	cbnz	r3, 800734a <__swsetup_r+0x16>
 8007344:	4628      	mov	r0, r5
 8007346:	f000 f985 	bl	8007654 <__sinit>
 800734a:	4b2e      	ldr	r3, [pc, #184]	; (8007404 <__swsetup_r+0xd0>)
 800734c:	429c      	cmp	r4, r3
 800734e:	d10f      	bne.n	8007370 <__swsetup_r+0x3c>
 8007350:	686c      	ldr	r4, [r5, #4]
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007358:	0719      	lsls	r1, r3, #28
 800735a:	d42c      	bmi.n	80073b6 <__swsetup_r+0x82>
 800735c:	06dd      	lsls	r5, r3, #27
 800735e:	d411      	bmi.n	8007384 <__swsetup_r+0x50>
 8007360:	2309      	movs	r3, #9
 8007362:	6033      	str	r3, [r6, #0]
 8007364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	f04f 30ff 	mov.w	r0, #4294967295
 800736e:	e03e      	b.n	80073ee <__swsetup_r+0xba>
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <__swsetup_r+0xd4>)
 8007372:	429c      	cmp	r4, r3
 8007374:	d101      	bne.n	800737a <__swsetup_r+0x46>
 8007376:	68ac      	ldr	r4, [r5, #8]
 8007378:	e7eb      	b.n	8007352 <__swsetup_r+0x1e>
 800737a:	4b24      	ldr	r3, [pc, #144]	; (800740c <__swsetup_r+0xd8>)
 800737c:	429c      	cmp	r4, r3
 800737e:	bf08      	it	eq
 8007380:	68ec      	ldreq	r4, [r5, #12]
 8007382:	e7e6      	b.n	8007352 <__swsetup_r+0x1e>
 8007384:	0758      	lsls	r0, r3, #29
 8007386:	d512      	bpl.n	80073ae <__swsetup_r+0x7a>
 8007388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738a:	b141      	cbz	r1, 800739e <__swsetup_r+0x6a>
 800738c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007390:	4299      	cmp	r1, r3
 8007392:	d002      	beq.n	800739a <__swsetup_r+0x66>
 8007394:	4630      	mov	r0, r6
 8007396:	f7ff fb6f 	bl	8006a78 <_free_r>
 800739a:	2300      	movs	r3, #0
 800739c:	6363      	str	r3, [r4, #52]	; 0x34
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	2300      	movs	r3, #0
 80073a8:	6063      	str	r3, [r4, #4]
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f043 0308 	orr.w	r3, r3, #8
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	b94b      	cbnz	r3, 80073ce <__swsetup_r+0x9a>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c4:	d003      	beq.n	80073ce <__swsetup_r+0x9a>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 fa07 	bl	80077dc <__smakebuf_r>
 80073ce:	89a0      	ldrh	r0, [r4, #12]
 80073d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d4:	f010 0301 	ands.w	r3, r0, #1
 80073d8:	d00a      	beq.n	80073f0 <__swsetup_r+0xbc>
 80073da:	2300      	movs	r3, #0
 80073dc:	60a3      	str	r3, [r4, #8]
 80073de:	6963      	ldr	r3, [r4, #20]
 80073e0:	425b      	negs	r3, r3
 80073e2:	61a3      	str	r3, [r4, #24]
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	b943      	cbnz	r3, 80073fa <__swsetup_r+0xc6>
 80073e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073ec:	d1ba      	bne.n	8007364 <__swsetup_r+0x30>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	0781      	lsls	r1, r0, #30
 80073f2:	bf58      	it	pl
 80073f4:	6963      	ldrpl	r3, [r4, #20]
 80073f6:	60a3      	str	r3, [r4, #8]
 80073f8:	e7f4      	b.n	80073e4 <__swsetup_r+0xb0>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e7f7      	b.n	80073ee <__swsetup_r+0xba>
 80073fe:	bf00      	nop
 8007400:	2000000c 	.word	0x2000000c
 8007404:	080086d4 	.word	0x080086d4
 8007408:	080086f4 	.word	0x080086f4
 800740c:	080086b4 	.word	0x080086b4

08007410 <abort>:
 8007410:	b508      	push	{r3, lr}
 8007412:	2006      	movs	r0, #6
 8007414:	f000 fa52 	bl	80078bc <raise>
 8007418:	2001      	movs	r0, #1
 800741a:	f7fc fe24 	bl	8004066 <_exit>
	...

08007420 <__sflush_r>:
 8007420:	898a      	ldrh	r2, [r1, #12]
 8007422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	4605      	mov	r5, r0
 8007428:	0710      	lsls	r0, r2, #28
 800742a:	460c      	mov	r4, r1
 800742c:	d458      	bmi.n	80074e0 <__sflush_r+0xc0>
 800742e:	684b      	ldr	r3, [r1, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	dc05      	bgt.n	8007440 <__sflush_r+0x20>
 8007434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	dc02      	bgt.n	8007440 <__sflush_r+0x20>
 800743a:	2000      	movs	r0, #0
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007442:	2e00      	cmp	r6, #0
 8007444:	d0f9      	beq.n	800743a <__sflush_r+0x1a>
 8007446:	2300      	movs	r3, #0
 8007448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800744c:	682f      	ldr	r7, [r5, #0]
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	d032      	beq.n	80074b8 <__sflush_r+0x98>
 8007452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	075a      	lsls	r2, r3, #29
 8007458:	d505      	bpl.n	8007466 <__sflush_r+0x46>
 800745a:	6863      	ldr	r3, [r4, #4]
 800745c:	1ac0      	subs	r0, r0, r3
 800745e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007460:	b10b      	cbz	r3, 8007466 <__sflush_r+0x46>
 8007462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007464:	1ac0      	subs	r0, r0, r3
 8007466:	2300      	movs	r3, #0
 8007468:	4602      	mov	r2, r0
 800746a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800746c:	6a21      	ldr	r1, [r4, #32]
 800746e:	4628      	mov	r0, r5
 8007470:	47b0      	blx	r6
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	d106      	bne.n	8007486 <__sflush_r+0x66>
 8007478:	6829      	ldr	r1, [r5, #0]
 800747a:	291d      	cmp	r1, #29
 800747c:	d82c      	bhi.n	80074d8 <__sflush_r+0xb8>
 800747e:	4a2a      	ldr	r2, [pc, #168]	; (8007528 <__sflush_r+0x108>)
 8007480:	40ca      	lsrs	r2, r1
 8007482:	07d6      	lsls	r6, r2, #31
 8007484:	d528      	bpl.n	80074d8 <__sflush_r+0xb8>
 8007486:	2200      	movs	r2, #0
 8007488:	6062      	str	r2, [r4, #4]
 800748a:	04d9      	lsls	r1, r3, #19
 800748c:	6922      	ldr	r2, [r4, #16]
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	d504      	bpl.n	800749c <__sflush_r+0x7c>
 8007492:	1c42      	adds	r2, r0, #1
 8007494:	d101      	bne.n	800749a <__sflush_r+0x7a>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	b903      	cbnz	r3, 800749c <__sflush_r+0x7c>
 800749a:	6560      	str	r0, [r4, #84]	; 0x54
 800749c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800749e:	602f      	str	r7, [r5, #0]
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d0ca      	beq.n	800743a <__sflush_r+0x1a>
 80074a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <__sflush_r+0x92>
 80074ac:	4628      	mov	r0, r5
 80074ae:	f7ff fae3 	bl	8006a78 <_free_r>
 80074b2:	2000      	movs	r0, #0
 80074b4:	6360      	str	r0, [r4, #52]	; 0x34
 80074b6:	e7c1      	b.n	800743c <__sflush_r+0x1c>
 80074b8:	6a21      	ldr	r1, [r4, #32]
 80074ba:	2301      	movs	r3, #1
 80074bc:	4628      	mov	r0, r5
 80074be:	47b0      	blx	r6
 80074c0:	1c41      	adds	r1, r0, #1
 80074c2:	d1c7      	bne.n	8007454 <__sflush_r+0x34>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0c4      	beq.n	8007454 <__sflush_r+0x34>
 80074ca:	2b1d      	cmp	r3, #29
 80074cc:	d001      	beq.n	80074d2 <__sflush_r+0xb2>
 80074ce:	2b16      	cmp	r3, #22
 80074d0:	d101      	bne.n	80074d6 <__sflush_r+0xb6>
 80074d2:	602f      	str	r7, [r5, #0]
 80074d4:	e7b1      	b.n	800743a <__sflush_r+0x1a>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	e7ad      	b.n	800743c <__sflush_r+0x1c>
 80074e0:	690f      	ldr	r7, [r1, #16]
 80074e2:	2f00      	cmp	r7, #0
 80074e4:	d0a9      	beq.n	800743a <__sflush_r+0x1a>
 80074e6:	0793      	lsls	r3, r2, #30
 80074e8:	680e      	ldr	r6, [r1, #0]
 80074ea:	bf08      	it	eq
 80074ec:	694b      	ldreq	r3, [r1, #20]
 80074ee:	600f      	str	r7, [r1, #0]
 80074f0:	bf18      	it	ne
 80074f2:	2300      	movne	r3, #0
 80074f4:	eba6 0807 	sub.w	r8, r6, r7
 80074f8:	608b      	str	r3, [r1, #8]
 80074fa:	f1b8 0f00 	cmp.w	r8, #0
 80074fe:	dd9c      	ble.n	800743a <__sflush_r+0x1a>
 8007500:	6a21      	ldr	r1, [r4, #32]
 8007502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007504:	4643      	mov	r3, r8
 8007506:	463a      	mov	r2, r7
 8007508:	4628      	mov	r0, r5
 800750a:	47b0      	blx	r6
 800750c:	2800      	cmp	r0, #0
 800750e:	dc06      	bgt.n	800751e <__sflush_r+0xfe>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e78e      	b.n	800743c <__sflush_r+0x1c>
 800751e:	4407      	add	r7, r0
 8007520:	eba8 0800 	sub.w	r8, r8, r0
 8007524:	e7e9      	b.n	80074fa <__sflush_r+0xda>
 8007526:	bf00      	nop
 8007528:	20400001 	.word	0x20400001

0800752c <_fflush_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	4605      	mov	r5, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b913      	cbnz	r3, 800753c <_fflush_r+0x10>
 8007536:	2500      	movs	r5, #0
 8007538:	4628      	mov	r0, r5
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	b118      	cbz	r0, 8007546 <_fflush_r+0x1a>
 800753e:	6983      	ldr	r3, [r0, #24]
 8007540:	b90b      	cbnz	r3, 8007546 <_fflush_r+0x1a>
 8007542:	f000 f887 	bl	8007654 <__sinit>
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <_fflush_r+0x6c>)
 8007548:	429c      	cmp	r4, r3
 800754a:	d11b      	bne.n	8007584 <_fflush_r+0x58>
 800754c:	686c      	ldr	r4, [r5, #4]
 800754e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0ef      	beq.n	8007536 <_fflush_r+0xa>
 8007556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007558:	07d0      	lsls	r0, r2, #31
 800755a:	d404      	bmi.n	8007566 <_fflush_r+0x3a>
 800755c:	0599      	lsls	r1, r3, #22
 800755e:	d402      	bmi.n	8007566 <_fflush_r+0x3a>
 8007560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007562:	f000 f915 	bl	8007790 <__retarget_lock_acquire_recursive>
 8007566:	4628      	mov	r0, r5
 8007568:	4621      	mov	r1, r4
 800756a:	f7ff ff59 	bl	8007420 <__sflush_r>
 800756e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007570:	07da      	lsls	r2, r3, #31
 8007572:	4605      	mov	r5, r0
 8007574:	d4e0      	bmi.n	8007538 <_fflush_r+0xc>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	059b      	lsls	r3, r3, #22
 800757a:	d4dd      	bmi.n	8007538 <_fflush_r+0xc>
 800757c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757e:	f000 f908 	bl	8007792 <__retarget_lock_release_recursive>
 8007582:	e7d9      	b.n	8007538 <_fflush_r+0xc>
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <_fflush_r+0x70>)
 8007586:	429c      	cmp	r4, r3
 8007588:	d101      	bne.n	800758e <_fflush_r+0x62>
 800758a:	68ac      	ldr	r4, [r5, #8]
 800758c:	e7df      	b.n	800754e <_fflush_r+0x22>
 800758e:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <_fflush_r+0x74>)
 8007590:	429c      	cmp	r4, r3
 8007592:	bf08      	it	eq
 8007594:	68ec      	ldreq	r4, [r5, #12]
 8007596:	e7da      	b.n	800754e <_fflush_r+0x22>
 8007598:	080086d4 	.word	0x080086d4
 800759c:	080086f4 	.word	0x080086f4
 80075a0:	080086b4 	.word	0x080086b4

080075a4 <std>:
 80075a4:	2300      	movs	r3, #0
 80075a6:	b510      	push	{r4, lr}
 80075a8:	4604      	mov	r4, r0
 80075aa:	e9c0 3300 	strd	r3, r3, [r0]
 80075ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075b2:	6083      	str	r3, [r0, #8]
 80075b4:	8181      	strh	r1, [r0, #12]
 80075b6:	6643      	str	r3, [r0, #100]	; 0x64
 80075b8:	81c2      	strh	r2, [r0, #14]
 80075ba:	6183      	str	r3, [r0, #24]
 80075bc:	4619      	mov	r1, r3
 80075be:	2208      	movs	r2, #8
 80075c0:	305c      	adds	r0, #92	; 0x5c
 80075c2:	f7fd fb91 	bl	8004ce8 <memset>
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <std+0x38>)
 80075c8:	6263      	str	r3, [r4, #36]	; 0x24
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <std+0x3c>)
 80075cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <std+0x40>)
 80075d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <std+0x44>)
 80075d4:	6224      	str	r4, [r4, #32]
 80075d6:	6323      	str	r3, [r4, #48]	; 0x30
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	080078f5 	.word	0x080078f5
 80075e0:	08007917 	.word	0x08007917
 80075e4:	0800794f 	.word	0x0800794f
 80075e8:	08007973 	.word	0x08007973

080075ec <_cleanup_r>:
 80075ec:	4901      	ldr	r1, [pc, #4]	; (80075f4 <_cleanup_r+0x8>)
 80075ee:	f000 b8af 	b.w	8007750 <_fwalk_reent>
 80075f2:	bf00      	nop
 80075f4:	0800752d 	.word	0x0800752d

080075f8 <__sfmoreglue>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	1e4a      	subs	r2, r1, #1
 80075fc:	2568      	movs	r5, #104	; 0x68
 80075fe:	4355      	muls	r5, r2
 8007600:	460e      	mov	r6, r1
 8007602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007606:	f7ff fa87 	bl	8006b18 <_malloc_r>
 800760a:	4604      	mov	r4, r0
 800760c:	b140      	cbz	r0, 8007620 <__sfmoreglue+0x28>
 800760e:	2100      	movs	r1, #0
 8007610:	e9c0 1600 	strd	r1, r6, [r0]
 8007614:	300c      	adds	r0, #12
 8007616:	60a0      	str	r0, [r4, #8]
 8007618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800761c:	f7fd fb64 	bl	8004ce8 <memset>
 8007620:	4620      	mov	r0, r4
 8007622:	bd70      	pop	{r4, r5, r6, pc}

08007624 <__sfp_lock_acquire>:
 8007624:	4801      	ldr	r0, [pc, #4]	; (800762c <__sfp_lock_acquire+0x8>)
 8007626:	f000 b8b3 	b.w	8007790 <__retarget_lock_acquire_recursive>
 800762a:	bf00      	nop
 800762c:	20000280 	.word	0x20000280

08007630 <__sfp_lock_release>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_release+0x8>)
 8007632:	f000 b8ae 	b.w	8007792 <__retarget_lock_release_recursive>
 8007636:	bf00      	nop
 8007638:	20000280 	.word	0x20000280

0800763c <__sinit_lock_acquire>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sinit_lock_acquire+0x8>)
 800763e:	f000 b8a7 	b.w	8007790 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	2000027b 	.word	0x2000027b

08007648 <__sinit_lock_release>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sinit_lock_release+0x8>)
 800764a:	f000 b8a2 	b.w	8007792 <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	2000027b 	.word	0x2000027b

08007654 <__sinit>:
 8007654:	b510      	push	{r4, lr}
 8007656:	4604      	mov	r4, r0
 8007658:	f7ff fff0 	bl	800763c <__sinit_lock_acquire>
 800765c:	69a3      	ldr	r3, [r4, #24]
 800765e:	b11b      	cbz	r3, 8007668 <__sinit+0x14>
 8007660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007664:	f7ff bff0 	b.w	8007648 <__sinit_lock_release>
 8007668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800766c:	6523      	str	r3, [r4, #80]	; 0x50
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <__sinit+0x68>)
 8007670:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <__sinit+0x6c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	62a2      	str	r2, [r4, #40]	; 0x28
 8007676:	42a3      	cmp	r3, r4
 8007678:	bf04      	itt	eq
 800767a:	2301      	moveq	r3, #1
 800767c:	61a3      	streq	r3, [r4, #24]
 800767e:	4620      	mov	r0, r4
 8007680:	f000 f820 	bl	80076c4 <__sfp>
 8007684:	6060      	str	r0, [r4, #4]
 8007686:	4620      	mov	r0, r4
 8007688:	f000 f81c 	bl	80076c4 <__sfp>
 800768c:	60a0      	str	r0, [r4, #8]
 800768e:	4620      	mov	r0, r4
 8007690:	f000 f818 	bl	80076c4 <__sfp>
 8007694:	2200      	movs	r2, #0
 8007696:	60e0      	str	r0, [r4, #12]
 8007698:	2104      	movs	r1, #4
 800769a:	6860      	ldr	r0, [r4, #4]
 800769c:	f7ff ff82 	bl	80075a4 <std>
 80076a0:	68a0      	ldr	r0, [r4, #8]
 80076a2:	2201      	movs	r2, #1
 80076a4:	2109      	movs	r1, #9
 80076a6:	f7ff ff7d 	bl	80075a4 <std>
 80076aa:	68e0      	ldr	r0, [r4, #12]
 80076ac:	2202      	movs	r2, #2
 80076ae:	2112      	movs	r1, #18
 80076b0:	f7ff ff78 	bl	80075a4 <std>
 80076b4:	2301      	movs	r3, #1
 80076b6:	61a3      	str	r3, [r4, #24]
 80076b8:	e7d2      	b.n	8007660 <__sinit+0xc>
 80076ba:	bf00      	nop
 80076bc:	08008334 	.word	0x08008334
 80076c0:	080075ed 	.word	0x080075ed

080076c4 <__sfp>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	4607      	mov	r7, r0
 80076c8:	f7ff ffac 	bl	8007624 <__sfp_lock_acquire>
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <__sfp+0x84>)
 80076ce:	681e      	ldr	r6, [r3, #0]
 80076d0:	69b3      	ldr	r3, [r6, #24]
 80076d2:	b913      	cbnz	r3, 80076da <__sfp+0x16>
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7ff ffbd 	bl	8007654 <__sinit>
 80076da:	3648      	adds	r6, #72	; 0x48
 80076dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	d503      	bpl.n	80076ec <__sfp+0x28>
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	b30b      	cbz	r3, 800772c <__sfp+0x68>
 80076e8:	6836      	ldr	r6, [r6, #0]
 80076ea:	e7f7      	b.n	80076dc <__sfp+0x18>
 80076ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076f0:	b9d5      	cbnz	r5, 8007728 <__sfp+0x64>
 80076f2:	4b16      	ldr	r3, [pc, #88]	; (800774c <__sfp+0x88>)
 80076f4:	60e3      	str	r3, [r4, #12]
 80076f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076fa:	6665      	str	r5, [r4, #100]	; 0x64
 80076fc:	f000 f847 	bl	800778e <__retarget_lock_init_recursive>
 8007700:	f7ff ff96 	bl	8007630 <__sfp_lock_release>
 8007704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800770c:	6025      	str	r5, [r4, #0]
 800770e:	61a5      	str	r5, [r4, #24]
 8007710:	2208      	movs	r2, #8
 8007712:	4629      	mov	r1, r5
 8007714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007718:	f7fd fae6 	bl	8004ce8 <memset>
 800771c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007724:	4620      	mov	r0, r4
 8007726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007728:	3468      	adds	r4, #104	; 0x68
 800772a:	e7d9      	b.n	80076e0 <__sfp+0x1c>
 800772c:	2104      	movs	r1, #4
 800772e:	4638      	mov	r0, r7
 8007730:	f7ff ff62 	bl	80075f8 <__sfmoreglue>
 8007734:	4604      	mov	r4, r0
 8007736:	6030      	str	r0, [r6, #0]
 8007738:	2800      	cmp	r0, #0
 800773a:	d1d5      	bne.n	80076e8 <__sfp+0x24>
 800773c:	f7ff ff78 	bl	8007630 <__sfp_lock_release>
 8007740:	230c      	movs	r3, #12
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	e7ee      	b.n	8007724 <__sfp+0x60>
 8007746:	bf00      	nop
 8007748:	08008334 	.word	0x08008334
 800774c:	ffff0001 	.word	0xffff0001

08007750 <_fwalk_reent>:
 8007750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007754:	4606      	mov	r6, r0
 8007756:	4688      	mov	r8, r1
 8007758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800775c:	2700      	movs	r7, #0
 800775e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007762:	f1b9 0901 	subs.w	r9, r9, #1
 8007766:	d505      	bpl.n	8007774 <_fwalk_reent+0x24>
 8007768:	6824      	ldr	r4, [r4, #0]
 800776a:	2c00      	cmp	r4, #0
 800776c:	d1f7      	bne.n	800775e <_fwalk_reent+0xe>
 800776e:	4638      	mov	r0, r7
 8007770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007774:	89ab      	ldrh	r3, [r5, #12]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d907      	bls.n	800778a <_fwalk_reent+0x3a>
 800777a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800777e:	3301      	adds	r3, #1
 8007780:	d003      	beq.n	800778a <_fwalk_reent+0x3a>
 8007782:	4629      	mov	r1, r5
 8007784:	4630      	mov	r0, r6
 8007786:	47c0      	blx	r8
 8007788:	4307      	orrs	r7, r0
 800778a:	3568      	adds	r5, #104	; 0x68
 800778c:	e7e9      	b.n	8007762 <_fwalk_reent+0x12>

0800778e <__retarget_lock_init_recursive>:
 800778e:	4770      	bx	lr

08007790 <__retarget_lock_acquire_recursive>:
 8007790:	4770      	bx	lr

08007792 <__retarget_lock_release_recursive>:
 8007792:	4770      	bx	lr

08007794 <__swhatbuf_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	460e      	mov	r6, r1
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	2900      	cmp	r1, #0
 800779e:	b096      	sub	sp, #88	; 0x58
 80077a0:	4614      	mov	r4, r2
 80077a2:	461d      	mov	r5, r3
 80077a4:	da07      	bge.n	80077b6 <__swhatbuf_r+0x22>
 80077a6:	2300      	movs	r3, #0
 80077a8:	602b      	str	r3, [r5, #0]
 80077aa:	89b3      	ldrh	r3, [r6, #12]
 80077ac:	061a      	lsls	r2, r3, #24
 80077ae:	d410      	bmi.n	80077d2 <__swhatbuf_r+0x3e>
 80077b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b4:	e00e      	b.n	80077d4 <__swhatbuf_r+0x40>
 80077b6:	466a      	mov	r2, sp
 80077b8:	f000 f902 	bl	80079c0 <_fstat_r>
 80077bc:	2800      	cmp	r0, #0
 80077be:	dbf2      	blt.n	80077a6 <__swhatbuf_r+0x12>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ca:	425a      	negs	r2, r3
 80077cc:	415a      	adcs	r2, r3
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	e7ee      	b.n	80077b0 <__swhatbuf_r+0x1c>
 80077d2:	2340      	movs	r3, #64	; 0x40
 80077d4:	2000      	movs	r0, #0
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	b016      	add	sp, #88	; 0x58
 80077da:	bd70      	pop	{r4, r5, r6, pc}

080077dc <__smakebuf_r>:
 80077dc:	898b      	ldrh	r3, [r1, #12]
 80077de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077e0:	079d      	lsls	r5, r3, #30
 80077e2:	4606      	mov	r6, r0
 80077e4:	460c      	mov	r4, r1
 80077e6:	d507      	bpl.n	80077f8 <__smakebuf_r+0x1c>
 80077e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	6123      	str	r3, [r4, #16]
 80077f0:	2301      	movs	r3, #1
 80077f2:	6163      	str	r3, [r4, #20]
 80077f4:	b002      	add	sp, #8
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	ab01      	add	r3, sp, #4
 80077fa:	466a      	mov	r2, sp
 80077fc:	f7ff ffca 	bl	8007794 <__swhatbuf_r>
 8007800:	9900      	ldr	r1, [sp, #0]
 8007802:	4605      	mov	r5, r0
 8007804:	4630      	mov	r0, r6
 8007806:	f7ff f987 	bl	8006b18 <_malloc_r>
 800780a:	b948      	cbnz	r0, 8007820 <__smakebuf_r+0x44>
 800780c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007810:	059a      	lsls	r2, r3, #22
 8007812:	d4ef      	bmi.n	80077f4 <__smakebuf_r+0x18>
 8007814:	f023 0303 	bic.w	r3, r3, #3
 8007818:	f043 0302 	orr.w	r3, r3, #2
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	e7e3      	b.n	80077e8 <__smakebuf_r+0xc>
 8007820:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <__smakebuf_r+0x7c>)
 8007822:	62b3      	str	r3, [r6, #40]	; 0x28
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	6163      	str	r3, [r4, #20]
 8007832:	9b01      	ldr	r3, [sp, #4]
 8007834:	6120      	str	r0, [r4, #16]
 8007836:	b15b      	cbz	r3, 8007850 <__smakebuf_r+0x74>
 8007838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800783c:	4630      	mov	r0, r6
 800783e:	f000 f8d1 	bl	80079e4 <_isatty_r>
 8007842:	b128      	cbz	r0, 8007850 <__smakebuf_r+0x74>
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	f043 0301 	orr.w	r3, r3, #1
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	89a0      	ldrh	r0, [r4, #12]
 8007852:	4305      	orrs	r5, r0
 8007854:	81a5      	strh	r5, [r4, #12]
 8007856:	e7cd      	b.n	80077f4 <__smakebuf_r+0x18>
 8007858:	080075ed 	.word	0x080075ed

0800785c <_malloc_usable_size_r>:
 800785c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007860:	1f18      	subs	r0, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	bfbc      	itt	lt
 8007866:	580b      	ldrlt	r3, [r1, r0]
 8007868:	18c0      	addlt	r0, r0, r3
 800786a:	4770      	bx	lr

0800786c <_raise_r>:
 800786c:	291f      	cmp	r1, #31
 800786e:	b538      	push	{r3, r4, r5, lr}
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	d904      	bls.n	8007880 <_raise_r+0x14>
 8007876:	2316      	movs	r3, #22
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007882:	b112      	cbz	r2, 800788a <_raise_r+0x1e>
 8007884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007888:	b94b      	cbnz	r3, 800789e <_raise_r+0x32>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f830 	bl	80078f0 <_getpid_r>
 8007890:	462a      	mov	r2, r5
 8007892:	4601      	mov	r1, r0
 8007894:	4620      	mov	r0, r4
 8007896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789a:	f000 b817 	b.w	80078cc <_kill_r>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d00a      	beq.n	80078b8 <_raise_r+0x4c>
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	d103      	bne.n	80078ae <_raise_r+0x42>
 80078a6:	2316      	movs	r3, #22
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	2001      	movs	r0, #1
 80078ac:	e7e7      	b.n	800787e <_raise_r+0x12>
 80078ae:	2400      	movs	r4, #0
 80078b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b4:	4628      	mov	r0, r5
 80078b6:	4798      	blx	r3
 80078b8:	2000      	movs	r0, #0
 80078ba:	e7e0      	b.n	800787e <_raise_r+0x12>

080078bc <raise>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <raise+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f7ff bfd3 	b.w	800786c <_raise_r>
 80078c6:	bf00      	nop
 80078c8:	2000000c 	.word	0x2000000c

080078cc <_kill_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d07      	ldr	r5, [pc, #28]	; (80078ec <_kill_r+0x20>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f7fc fbb4 	bl	8004046 <_kill>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d102      	bne.n	80078e8 <_kill_r+0x1c>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	b103      	cbz	r3, 80078e8 <_kill_r+0x1c>
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	bf00      	nop
 80078ec:	20000274 	.word	0x20000274

080078f0 <_getpid_r>:
 80078f0:	f7fc bba1 	b.w	8004036 <_getpid>

080078f4 <__sread>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	f000 f894 	bl	8007a28 <_read_r>
 8007900:	2800      	cmp	r0, #0
 8007902:	bfab      	itete	ge
 8007904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007906:	89a3      	ldrhlt	r3, [r4, #12]
 8007908:	181b      	addge	r3, r3, r0
 800790a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800790e:	bfac      	ite	ge
 8007910:	6563      	strge	r3, [r4, #84]	; 0x54
 8007912:	81a3      	strhlt	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__swrite>:
 8007916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791a:	461f      	mov	r7, r3
 800791c:	898b      	ldrh	r3, [r1, #12]
 800791e:	05db      	lsls	r3, r3, #23
 8007920:	4605      	mov	r5, r0
 8007922:	460c      	mov	r4, r1
 8007924:	4616      	mov	r6, r2
 8007926:	d505      	bpl.n	8007934 <__swrite+0x1e>
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	2302      	movs	r3, #2
 800792e:	2200      	movs	r2, #0
 8007930:	f000 f868 	bl	8007a04 <_lseek_r>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	4632      	mov	r2, r6
 8007942:	463b      	mov	r3, r7
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	f000 b817 	b.w	800797c <_write_r>

0800794e <__sseek>:
 800794e:	b510      	push	{r4, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007956:	f000 f855 	bl	8007a04 <_lseek_r>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	bf15      	itete	ne
 8007960:	6560      	strne	r0, [r4, #84]	; 0x54
 8007962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800796a:	81a3      	strheq	r3, [r4, #12]
 800796c:	bf18      	it	ne
 800796e:	81a3      	strhne	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__sclose>:
 8007972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007976:	f000 b813 	b.w	80079a0 <_close_r>
	...

0800797c <_write_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	; (800799c <_write_r+0x20>)
 8007980:	4604      	mov	r4, r0
 8007982:	4608      	mov	r0, r1
 8007984:	4611      	mov	r1, r2
 8007986:	2200      	movs	r2, #0
 8007988:	602a      	str	r2, [r5, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f7fc fb92 	bl	80040b4 <_write>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_write_r+0x1e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_write_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	20000274 	.word	0x20000274

080079a0 <_close_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d06      	ldr	r5, [pc, #24]	; (80079bc <_close_r+0x1c>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	f7fc fb9e 	bl	80040ec <_close>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_close_r+0x1a>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_close_r+0x1a>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	20000274 	.word	0x20000274

080079c0 <_fstat_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d07      	ldr	r5, [pc, #28]	; (80079e0 <_fstat_r+0x20>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f7fc fb99 	bl	8004104 <_fstat>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d102      	bne.n	80079dc <_fstat_r+0x1c>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	b103      	cbz	r3, 80079dc <_fstat_r+0x1c>
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
 80079de:	bf00      	nop
 80079e0:	20000274 	.word	0x20000274

080079e4 <_isatty_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d06      	ldr	r5, [pc, #24]	; (8007a00 <_isatty_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7fc fb98 	bl	8004124 <_isatty>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_isatty_r+0x1a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_isatty_r+0x1a>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	20000274 	.word	0x20000274

08007a04 <_lseek_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	; (8007a24 <_lseek_r+0x20>)
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	602a      	str	r2, [r5, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f7fc fb91 	bl	800413a <_lseek>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_lseek_r+0x1e>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_lseek_r+0x1e>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000274 	.word	0x20000274

08007a28 <_read_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	; (8007a48 <_read_r+0x20>)
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	f7fc fb1f 	bl	800407a <_read>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_read_r+0x1e>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_read_r+0x1e>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20000274 	.word	0x20000274

08007a4c <powf>:
 8007a4c:	b508      	push	{r3, lr}
 8007a4e:	ed2d 8b04 	vpush	{d8-d9}
 8007a52:	eeb0 9a40 	vmov.f32	s18, s0
 8007a56:	eef0 8a60 	vmov.f32	s17, s1
 8007a5a:	f000 f88f 	bl	8007b7c <__ieee754_powf>
 8007a5e:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <powf+0x120>)
 8007a60:	f993 3000 	ldrsb.w	r3, [r3]
 8007a64:	3301      	adds	r3, #1
 8007a66:	eeb0 8a40 	vmov.f32	s16, s0
 8007a6a:	d012      	beq.n	8007a92 <powf+0x46>
 8007a6c:	eef4 8a68 	vcmp.f32	s17, s17
 8007a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a74:	d60d      	bvs.n	8007a92 <powf+0x46>
 8007a76:	eeb4 9a49 	vcmp.f32	s18, s18
 8007a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7e:	d70d      	bvc.n	8007a9c <powf+0x50>
 8007a80:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007a8c:	bf08      	it	eq
 8007a8e:	eeb0 8a67 	vmoveq.f32	s16, s15
 8007a92:	eeb0 0a48 	vmov.f32	s0, s16
 8007a96:	ecbd 8b04 	vpop	{d8-d9}
 8007a9a:	bd08      	pop	{r3, pc}
 8007a9c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8007b70 <powf+0x124>
 8007aa0:	eeb4 9a69 	vcmp.f32	s18, s19
 8007aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa8:	d116      	bne.n	8007ad8 <powf+0x8c>
 8007aaa:	eef4 8a69 	vcmp.f32	s17, s19
 8007aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab2:	d057      	beq.n	8007b64 <powf+0x118>
 8007ab4:	eeb0 0a68 	vmov.f32	s0, s17
 8007ab8:	f000 fb2a 	bl	8008110 <finitef>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d0e8      	beq.n	8007a92 <powf+0x46>
 8007ac0:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac8:	d5e3      	bpl.n	8007a92 <powf+0x46>
 8007aca:	f7fd f8e3 	bl	8004c94 <__errno>
 8007ace:	2321      	movs	r3, #33	; 0x21
 8007ad0:	6003      	str	r3, [r0, #0]
 8007ad2:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8007b74 <powf+0x128>
 8007ad6:	e7dc      	b.n	8007a92 <powf+0x46>
 8007ad8:	f000 fb1a 	bl	8008110 <finitef>
 8007adc:	bb50      	cbnz	r0, 8007b34 <powf+0xe8>
 8007ade:	eeb0 0a49 	vmov.f32	s0, s18
 8007ae2:	f000 fb15 	bl	8008110 <finitef>
 8007ae6:	b328      	cbz	r0, 8007b34 <powf+0xe8>
 8007ae8:	eeb0 0a68 	vmov.f32	s0, s17
 8007aec:	f000 fb10 	bl	8008110 <finitef>
 8007af0:	b300      	cbz	r0, 8007b34 <powf+0xe8>
 8007af2:	eeb4 8a48 	vcmp.f32	s16, s16
 8007af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afa:	d706      	bvc.n	8007b0a <powf+0xbe>
 8007afc:	f7fd f8ca 	bl	8004c94 <__errno>
 8007b00:	2321      	movs	r3, #33	; 0x21
 8007b02:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8007b06:	6003      	str	r3, [r0, #0]
 8007b08:	e7c3      	b.n	8007a92 <powf+0x46>
 8007b0a:	f7fd f8c3 	bl	8004c94 <__errno>
 8007b0e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8007b12:	2322      	movs	r3, #34	; 0x22
 8007b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	d508      	bpl.n	8007b2e <powf+0xe2>
 8007b1c:	eeb0 0a68 	vmov.f32	s0, s17
 8007b20:	f000 fb0a 	bl	8008138 <rintf>
 8007b24:	eeb4 0a68 	vcmp.f32	s0, s17
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	d1d1      	bne.n	8007ad2 <powf+0x86>
 8007b2e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8007b78 <powf+0x12c>
 8007b32:	e7ae      	b.n	8007a92 <powf+0x46>
 8007b34:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b3c:	d1a9      	bne.n	8007a92 <powf+0x46>
 8007b3e:	eeb0 0a49 	vmov.f32	s0, s18
 8007b42:	f000 fae5 	bl	8008110 <finitef>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d0a3      	beq.n	8007a92 <powf+0x46>
 8007b4a:	eeb0 0a68 	vmov.f32	s0, s17
 8007b4e:	f000 fadf 	bl	8008110 <finitef>
 8007b52:	2800      	cmp	r0, #0
 8007b54:	d09d      	beq.n	8007a92 <powf+0x46>
 8007b56:	f7fd f89d 	bl	8004c94 <__errno>
 8007b5a:	2322      	movs	r3, #34	; 0x22
 8007b5c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007b70 <powf+0x124>
 8007b60:	6003      	str	r3, [r0, #0]
 8007b62:	e796      	b.n	8007a92 <powf+0x46>
 8007b64:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007b68:	e793      	b.n	8007a92 <powf+0x46>
 8007b6a:	bf00      	nop
 8007b6c:	200001dc 	.word	0x200001dc
 8007b70:	00000000 	.word	0x00000000
 8007b74:	ff800000 	.word	0xff800000
 8007b78:	7f800000 	.word	0x7f800000

08007b7c <__ieee754_powf>:
 8007b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b80:	ee10 5a90 	vmov	r5, s1
 8007b84:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007b88:	ed2d 8b02 	vpush	{d8}
 8007b8c:	eeb0 8a40 	vmov.f32	s16, s0
 8007b90:	eef0 8a60 	vmov.f32	s17, s1
 8007b94:	f000 8291 	beq.w	80080ba <__ieee754_powf+0x53e>
 8007b98:	ee10 8a10 	vmov	r8, s0
 8007b9c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007ba0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007ba4:	dc06      	bgt.n	8007bb4 <__ieee754_powf+0x38>
 8007ba6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007baa:	dd0a      	ble.n	8007bc2 <__ieee754_powf+0x46>
 8007bac:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007bb0:	f000 8283 	beq.w	80080ba <__ieee754_powf+0x53e>
 8007bb4:	ecbd 8b02 	vpop	{d8}
 8007bb8:	48d8      	ldr	r0, [pc, #864]	; (8007f1c <__ieee754_powf+0x3a0>)
 8007bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbe:	f000 bab5 	b.w	800812c <nanf>
 8007bc2:	f1b8 0f00 	cmp.w	r8, #0
 8007bc6:	da1f      	bge.n	8007c08 <__ieee754_powf+0x8c>
 8007bc8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007bcc:	da2e      	bge.n	8007c2c <__ieee754_powf+0xb0>
 8007bce:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007bd2:	f2c0 827b 	blt.w	80080cc <__ieee754_powf+0x550>
 8007bd6:	15fb      	asrs	r3, r7, #23
 8007bd8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007bdc:	fa47 f603 	asr.w	r6, r7, r3
 8007be0:	fa06 f303 	lsl.w	r3, r6, r3
 8007be4:	42bb      	cmp	r3, r7
 8007be6:	f040 8271 	bne.w	80080cc <__ieee754_powf+0x550>
 8007bea:	f006 0601 	and.w	r6, r6, #1
 8007bee:	f1c6 0602 	rsb	r6, r6, #2
 8007bf2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007bf6:	d120      	bne.n	8007c3a <__ieee754_powf+0xbe>
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	f280 8264 	bge.w	80080c6 <__ieee754_powf+0x54a>
 8007bfe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007c02:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007c06:	e00d      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007c08:	2600      	movs	r6, #0
 8007c0a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007c0e:	d1f0      	bne.n	8007bf2 <__ieee754_powf+0x76>
 8007c10:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007c14:	f000 8251 	beq.w	80080ba <__ieee754_powf+0x53e>
 8007c18:	dd0a      	ble.n	8007c30 <__ieee754_powf+0xb4>
 8007c1a:	2d00      	cmp	r5, #0
 8007c1c:	f280 8250 	bge.w	80080c0 <__ieee754_powf+0x544>
 8007c20:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8007f20 <__ieee754_powf+0x3a4>
 8007c24:	ecbd 8b02 	vpop	{d8}
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	2602      	movs	r6, #2
 8007c2e:	e7ec      	b.n	8007c0a <__ieee754_powf+0x8e>
 8007c30:	2d00      	cmp	r5, #0
 8007c32:	daf5      	bge.n	8007c20 <__ieee754_powf+0xa4>
 8007c34:	eeb1 0a68 	vneg.f32	s0, s17
 8007c38:	e7f4      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007c3a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007c3e:	d102      	bne.n	8007c46 <__ieee754_powf+0xca>
 8007c40:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007c44:	e7ee      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007c46:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007c4a:	eeb0 0a48 	vmov.f32	s0, s16
 8007c4e:	d108      	bne.n	8007c62 <__ieee754_powf+0xe6>
 8007c50:	f1b8 0f00 	cmp.w	r8, #0
 8007c54:	db05      	blt.n	8007c62 <__ieee754_powf+0xe6>
 8007c56:	ecbd 8b02 	vpop	{d8}
 8007c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5e:	f000 ba4d 	b.w	80080fc <__ieee754_sqrtf>
 8007c62:	f000 fa4e 	bl	8008102 <fabsf>
 8007c66:	b124      	cbz	r4, 8007c72 <__ieee754_powf+0xf6>
 8007c68:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007c6c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007c70:	d117      	bne.n	8007ca2 <__ieee754_powf+0x126>
 8007c72:	2d00      	cmp	r5, #0
 8007c74:	bfbc      	itt	lt
 8007c76:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007c7a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007c7e:	f1b8 0f00 	cmp.w	r8, #0
 8007c82:	dacf      	bge.n	8007c24 <__ieee754_powf+0xa8>
 8007c84:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007c88:	ea54 0306 	orrs.w	r3, r4, r6
 8007c8c:	d104      	bne.n	8007c98 <__ieee754_powf+0x11c>
 8007c8e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007c92:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007c96:	e7c5      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007c98:	2e01      	cmp	r6, #1
 8007c9a:	d1c3      	bne.n	8007c24 <__ieee754_powf+0xa8>
 8007c9c:	eeb1 0a40 	vneg.f32	s0, s0
 8007ca0:	e7c0      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007ca2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007ca6:	3801      	subs	r0, #1
 8007ca8:	ea56 0300 	orrs.w	r3, r6, r0
 8007cac:	d104      	bne.n	8007cb8 <__ieee754_powf+0x13c>
 8007cae:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007cb2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007cb6:	e7b5      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007cb8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007cbc:	dd6b      	ble.n	8007d96 <__ieee754_powf+0x21a>
 8007cbe:	4b99      	ldr	r3, [pc, #612]	; (8007f24 <__ieee754_powf+0x3a8>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	dc06      	bgt.n	8007cd2 <__ieee754_powf+0x156>
 8007cc4:	2d00      	cmp	r5, #0
 8007cc6:	daab      	bge.n	8007c20 <__ieee754_powf+0xa4>
 8007cc8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007f28 <__ieee754_powf+0x3ac>
 8007ccc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007cd0:	e7a8      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007cd2:	4b96      	ldr	r3, [pc, #600]	; (8007f2c <__ieee754_powf+0x3b0>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	dd02      	ble.n	8007cde <__ieee754_powf+0x162>
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	dcf5      	bgt.n	8007cc8 <__ieee754_powf+0x14c>
 8007cdc:	e7a0      	b.n	8007c20 <__ieee754_powf+0xa4>
 8007cde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ce2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007ce6:	eddf 6a92 	vldr	s13, [pc, #584]	; 8007f30 <__ieee754_powf+0x3b4>
 8007cea:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007cee:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007cf2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007cf6:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007cfa:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d02:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007f34 <__ieee754_powf+0x3b8>
 8007d06:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007d0a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007f38 <__ieee754_powf+0x3bc>
 8007d0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007d12:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007f3c <__ieee754_powf+0x3c0>
 8007d16:	eef0 6a67 	vmov.f32	s13, s15
 8007d1a:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007d1e:	ee16 3a90 	vmov	r3, s13
 8007d22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007d26:	f023 030f 	bic.w	r3, r3, #15
 8007d2a:	ee00 3a90 	vmov	s1, r3
 8007d2e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007d32:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007d36:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007d3a:	f025 050f 	bic.w	r5, r5, #15
 8007d3e:	ee07 5a10 	vmov	s14, r5
 8007d42:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007d46:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007d4a:	ee07 3a90 	vmov	s15, r3
 8007d4e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007d52:	3e01      	subs	r6, #1
 8007d54:	ea56 0200 	orrs.w	r2, r6, r0
 8007d58:	ee07 5a10 	vmov	s14, r5
 8007d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d60:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007d64:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007d68:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007d6c:	ee17 4a10 	vmov	r4, s14
 8007d70:	bf08      	it	eq
 8007d72:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007d76:	2c00      	cmp	r4, #0
 8007d78:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007d7c:	f340 8184 	ble.w	8008088 <__ieee754_powf+0x50c>
 8007d80:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007d84:	f340 80fc 	ble.w	8007f80 <__ieee754_powf+0x404>
 8007d88:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007f28 <__ieee754_powf+0x3ac>
 8007d8c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007d90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007d94:	e746      	b.n	8007c24 <__ieee754_powf+0xa8>
 8007d96:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8007d9a:	bf01      	itttt	eq
 8007d9c:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8007f40 <__ieee754_powf+0x3c4>
 8007da0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007da4:	f06f 0217 	mvneq.w	r2, #23
 8007da8:	ee17 4a90 	vmoveq	r4, s15
 8007dac:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007db0:	bf18      	it	ne
 8007db2:	2200      	movne	r2, #0
 8007db4:	3b7f      	subs	r3, #127	; 0x7f
 8007db6:	4413      	add	r3, r2
 8007db8:	4a62      	ldr	r2, [pc, #392]	; (8007f44 <__ieee754_powf+0x3c8>)
 8007dba:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007dbe:	4294      	cmp	r4, r2
 8007dc0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007dc4:	dd06      	ble.n	8007dd4 <__ieee754_powf+0x258>
 8007dc6:	4a60      	ldr	r2, [pc, #384]	; (8007f48 <__ieee754_powf+0x3cc>)
 8007dc8:	4294      	cmp	r4, r2
 8007dca:	f340 80a4 	ble.w	8007f16 <__ieee754_powf+0x39a>
 8007dce:	3301      	adds	r3, #1
 8007dd0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007dd4:	2400      	movs	r4, #0
 8007dd6:	4a5d      	ldr	r2, [pc, #372]	; (8007f4c <__ieee754_powf+0x3d0>)
 8007dd8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007ddc:	ee07 1a90 	vmov	s15, r1
 8007de0:	ed92 7a00 	vldr	s14, [r2]
 8007de4:	4a5a      	ldr	r2, [pc, #360]	; (8007f50 <__ieee754_powf+0x3d4>)
 8007de6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007dea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007dee:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007df2:	1049      	asrs	r1, r1, #1
 8007df4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007df8:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007dfc:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007e00:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007e04:	ee06 1a10 	vmov	s12, r1
 8007e08:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007e0c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007e10:	ee14 7a90 	vmov	r7, s9
 8007e14:	4017      	ands	r7, r2
 8007e16:	ee05 7a90 	vmov	s11, r7
 8007e1a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007e1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e22:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007f54 <__ieee754_powf+0x3d8>
 8007e26:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007e2a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007e2e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007e32:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007f58 <__ieee754_powf+0x3dc>
 8007e36:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007e3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007f5c <__ieee754_powf+0x3e0>
 8007e3e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e42:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8007f30 <__ieee754_powf+0x3b4>
 8007e46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e4a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8007f60 <__ieee754_powf+0x3e4>
 8007e4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007e52:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007f64 <__ieee754_powf+0x3e8>
 8007e56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e5a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007e5e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007e62:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007e66:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007e6a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007e6e:	eef0 7a45 	vmov.f32	s15, s10
 8007e72:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e7a:	ee17 1a90 	vmov	r1, s15
 8007e7e:	4011      	ands	r1, r2
 8007e80:	ee07 1a90 	vmov	s15, r1
 8007e84:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007e88:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007e8c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007e90:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007e94:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007e98:	eeb0 6a47 	vmov.f32	s12, s14
 8007e9c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007ea0:	ee16 1a10 	vmov	r1, s12
 8007ea4:	4011      	ands	r1, r2
 8007ea6:	ee06 1a90 	vmov	s13, r1
 8007eaa:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007eae:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007f68 <__ieee754_powf+0x3ec>
 8007eb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007f6c <__ieee754_powf+0x3f0>
 8007eb6:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007eba:	ee06 1a10 	vmov	s12, r1
 8007ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ec2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007f70 <__ieee754_powf+0x3f4>
 8007ec6:	492b      	ldr	r1, [pc, #172]	; (8007f74 <__ieee754_powf+0x3f8>)
 8007ec8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007ecc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ed0:	edd1 7a00 	vldr	s15, [r1]
 8007ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <__ieee754_powf+0x3fc>)
 8007ede:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007ee2:	eef0 7a47 	vmov.f32	s15, s14
 8007ee6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007eea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007eee:	edd4 0a00 	vldr	s1, [r4]
 8007ef2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efa:	ee17 3a90 	vmov	r3, s15
 8007efe:	4013      	ands	r3, r2
 8007f00:	ee07 3a90 	vmov	s15, r3
 8007f04:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007f08:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007f0c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8007f10:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007f14:	e70f      	b.n	8007d36 <__ieee754_powf+0x1ba>
 8007f16:	2401      	movs	r4, #1
 8007f18:	e75d      	b.n	8007dd6 <__ieee754_powf+0x25a>
 8007f1a:	bf00      	nop
 8007f1c:	080085a8 	.word	0x080085a8
 8007f20:	00000000 	.word	0x00000000
 8007f24:	3f7ffff7 	.word	0x3f7ffff7
 8007f28:	7149f2ca 	.word	0x7149f2ca
 8007f2c:	3f800007 	.word	0x3f800007
 8007f30:	3eaaaaab 	.word	0x3eaaaaab
 8007f34:	3fb8aa3b 	.word	0x3fb8aa3b
 8007f38:	36eca570 	.word	0x36eca570
 8007f3c:	3fb8aa00 	.word	0x3fb8aa00
 8007f40:	4b800000 	.word	0x4b800000
 8007f44:	001cc471 	.word	0x001cc471
 8007f48:	005db3d6 	.word	0x005db3d6
 8007f4c:	08008714 	.word	0x08008714
 8007f50:	fffff000 	.word	0xfffff000
 8007f54:	3e6c3255 	.word	0x3e6c3255
 8007f58:	3e53f142 	.word	0x3e53f142
 8007f5c:	3e8ba305 	.word	0x3e8ba305
 8007f60:	3edb6db7 	.word	0x3edb6db7
 8007f64:	3f19999a 	.word	0x3f19999a
 8007f68:	3f76384f 	.word	0x3f76384f
 8007f6c:	3f763800 	.word	0x3f763800
 8007f70:	369dc3a0 	.word	0x369dc3a0
 8007f74:	08008724 	.word	0x08008724
 8007f78:	0800871c 	.word	0x0800871c
 8007f7c:	3338aa3c 	.word	0x3338aa3c
 8007f80:	f040 8092 	bne.w	80080a8 <__ieee754_powf+0x52c>
 8007f84:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007f7c <__ieee754_powf+0x400>
 8007f88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007f8c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8007f90:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f98:	f73f aef6 	bgt.w	8007d88 <__ieee754_powf+0x20c>
 8007f9c:	15db      	asrs	r3, r3, #23
 8007f9e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8007fa2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007fa6:	4103      	asrs	r3, r0
 8007fa8:	4423      	add	r3, r4
 8007faa:	4949      	ldr	r1, [pc, #292]	; (80080d0 <__ieee754_powf+0x554>)
 8007fac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007fb0:	3a7f      	subs	r2, #127	; 0x7f
 8007fb2:	4111      	asrs	r1, r2
 8007fb4:	ea23 0101 	bic.w	r1, r3, r1
 8007fb8:	ee07 1a10 	vmov	s14, r1
 8007fbc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8007fc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007fc4:	f1c2 0217 	rsb	r2, r2, #23
 8007fc8:	4110      	asrs	r0, r2
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fd0:	bfb8      	it	lt
 8007fd2:	4240      	neglt	r0, r0
 8007fd4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007fd8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80080d4 <__ieee754_powf+0x558>
 8007fdc:	ee17 3a10 	vmov	r3, s14
 8007fe0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007fe4:	f023 030f 	bic.w	r3, r3, #15
 8007fe8:	ee07 3a10 	vmov	s14, r3
 8007fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ff0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007ff4:	eddf 7a38 	vldr	s15, [pc, #224]	; 80080d8 <__ieee754_powf+0x55c>
 8007ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffc:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008000:	eddf 6a36 	vldr	s13, [pc, #216]	; 80080dc <__ieee754_powf+0x560>
 8008004:	eeb0 0a67 	vmov.f32	s0, s15
 8008008:	eea7 0a26 	vfma.f32	s0, s14, s13
 800800c:	eeb0 6a40 	vmov.f32	s12, s0
 8008010:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008014:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008018:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800801c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80080e0 <__ieee754_powf+0x564>
 8008020:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80080e4 <__ieee754_powf+0x568>
 8008024:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008028:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80080e8 <__ieee754_powf+0x56c>
 800802c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008030:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80080ec <__ieee754_powf+0x570>
 8008034:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008038:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80080f0 <__ieee754_powf+0x574>
 800803c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008040:	eeb0 6a40 	vmov.f32	s12, s0
 8008044:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008048:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800804c:	eeb0 7a46 	vmov.f32	s14, s12
 8008050:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008054:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008058:	eee0 7a27 	vfma.f32	s15, s0, s15
 800805c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008064:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008068:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800806c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008070:	ee10 3a10 	vmov	r3, s0
 8008074:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008078:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800807c:	da1a      	bge.n	80080b4 <__ieee754_powf+0x538>
 800807e:	f000 f8b7 	bl	80081f0 <scalbnf>
 8008082:	ee20 0a08 	vmul.f32	s0, s0, s16
 8008086:	e5cd      	b.n	8007c24 <__ieee754_powf+0xa8>
 8008088:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <__ieee754_powf+0x578>)
 800808a:	4293      	cmp	r3, r2
 800808c:	dd02      	ble.n	8008094 <__ieee754_powf+0x518>
 800808e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80080f8 <__ieee754_powf+0x57c>
 8008092:	e67b      	b.n	8007d8c <__ieee754_powf+0x210>
 8008094:	d108      	bne.n	80080a8 <__ieee754_powf+0x52c>
 8008096:	ee37 7a67 	vsub.f32	s14, s14, s15
 800809a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800809e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a2:	f6ff af7b 	blt.w	8007f9c <__ieee754_powf+0x420>
 80080a6:	e7f2      	b.n	800808e <__ieee754_powf+0x512>
 80080a8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80080ac:	f73f af76 	bgt.w	8007f9c <__ieee754_powf+0x420>
 80080b0:	2000      	movs	r0, #0
 80080b2:	e78f      	b.n	8007fd4 <__ieee754_powf+0x458>
 80080b4:	ee00 3a10 	vmov	s0, r3
 80080b8:	e7e3      	b.n	8008082 <__ieee754_powf+0x506>
 80080ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80080be:	e5b1      	b.n	8007c24 <__ieee754_powf+0xa8>
 80080c0:	eeb0 0a68 	vmov.f32	s0, s17
 80080c4:	e5ae      	b.n	8007c24 <__ieee754_powf+0xa8>
 80080c6:	eeb0 0a48 	vmov.f32	s0, s16
 80080ca:	e5ab      	b.n	8007c24 <__ieee754_powf+0xa8>
 80080cc:	2600      	movs	r6, #0
 80080ce:	e590      	b.n	8007bf2 <__ieee754_powf+0x76>
 80080d0:	007fffff 	.word	0x007fffff
 80080d4:	3f317218 	.word	0x3f317218
 80080d8:	35bfbe8c 	.word	0x35bfbe8c
 80080dc:	3f317200 	.word	0x3f317200
 80080e0:	3331bb4c 	.word	0x3331bb4c
 80080e4:	b5ddea0e 	.word	0xb5ddea0e
 80080e8:	388ab355 	.word	0x388ab355
 80080ec:	bb360b61 	.word	0xbb360b61
 80080f0:	3e2aaaab 	.word	0x3e2aaaab
 80080f4:	43160000 	.word	0x43160000
 80080f8:	0da24260 	.word	0x0da24260

080080fc <__ieee754_sqrtf>:
 80080fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008100:	4770      	bx	lr

08008102 <fabsf>:
 8008102:	ee10 3a10 	vmov	r3, s0
 8008106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800810a:	ee00 3a10 	vmov	s0, r3
 800810e:	4770      	bx	lr

08008110 <finitef>:
 8008110:	b082      	sub	sp, #8
 8008112:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008116:	9801      	ldr	r0, [sp, #4]
 8008118:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800811c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008120:	bfac      	ite	ge
 8008122:	2000      	movge	r0, #0
 8008124:	2001      	movlt	r0, #1
 8008126:	b002      	add	sp, #8
 8008128:	4770      	bx	lr
	...

0800812c <nanf>:
 800812c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008134 <nanf+0x8>
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	7fc00000 	.word	0x7fc00000

08008138 <rintf>:
 8008138:	ee10 2a10 	vmov	r2, s0
 800813c:	b513      	push	{r0, r1, r4, lr}
 800813e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008142:	397f      	subs	r1, #127	; 0x7f
 8008144:	2916      	cmp	r1, #22
 8008146:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800814a:	dc47      	bgt.n	80081dc <rintf+0xa4>
 800814c:	b32b      	cbz	r3, 800819a <rintf+0x62>
 800814e:	2900      	cmp	r1, #0
 8008150:	ee10 3a10 	vmov	r3, s0
 8008154:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8008158:	da21      	bge.n	800819e <rintf+0x66>
 800815a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800815e:	425b      	negs	r3, r3
 8008160:	4921      	ldr	r1, [pc, #132]	; (80081e8 <rintf+0xb0>)
 8008162:	0a5b      	lsrs	r3, r3, #9
 8008164:	0d12      	lsrs	r2, r2, #20
 8008166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800816a:	0512      	lsls	r2, r2, #20
 800816c:	4313      	orrs	r3, r2
 800816e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	edd1 6a00 	vldr	s13, [r1]
 800817a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800817e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008182:	eddd 7a01 	vldr	s15, [sp, #4]
 8008186:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800818a:	ee17 3a90 	vmov	r3, s15
 800818e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008192:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8008196:	ee00 3a10 	vmov	s0, r3
 800819a:	b002      	add	sp, #8
 800819c:	bd10      	pop	{r4, pc}
 800819e:	4a13      	ldr	r2, [pc, #76]	; (80081ec <rintf+0xb4>)
 80081a0:	410a      	asrs	r2, r1
 80081a2:	4213      	tst	r3, r2
 80081a4:	d0f9      	beq.n	800819a <rintf+0x62>
 80081a6:	0854      	lsrs	r4, r2, #1
 80081a8:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80081ac:	d006      	beq.n	80081bc <rintf+0x84>
 80081ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80081b2:	ea23 0304 	bic.w	r3, r3, r4
 80081b6:	fa42 f101 	asr.w	r1, r2, r1
 80081ba:	430b      	orrs	r3, r1
 80081bc:	4a0a      	ldr	r2, [pc, #40]	; (80081e8 <rintf+0xb0>)
 80081be:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80081c2:	ed90 7a00 	vldr	s14, [r0]
 80081c6:	ee07 3a90 	vmov	s15, r3
 80081ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081ce:	edcd 7a01 	vstr	s15, [sp, #4]
 80081d2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80081d6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80081da:	e7de      	b.n	800819a <rintf+0x62>
 80081dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80081e0:	d3db      	bcc.n	800819a <rintf+0x62>
 80081e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80081e6:	e7d8      	b.n	800819a <rintf+0x62>
 80081e8:	0800872c 	.word	0x0800872c
 80081ec:	007fffff 	.word	0x007fffff

080081f0 <scalbnf>:
 80081f0:	ee10 3a10 	vmov	r3, s0
 80081f4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80081f8:	d025      	beq.n	8008246 <scalbnf+0x56>
 80081fa:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80081fe:	d302      	bcc.n	8008206 <scalbnf+0x16>
 8008200:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008204:	4770      	bx	lr
 8008206:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800820a:	d122      	bne.n	8008252 <scalbnf+0x62>
 800820c:	4b2a      	ldr	r3, [pc, #168]	; (80082b8 <scalbnf+0xc8>)
 800820e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80082bc <scalbnf+0xcc>
 8008212:	4298      	cmp	r0, r3
 8008214:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008218:	db16      	blt.n	8008248 <scalbnf+0x58>
 800821a:	ee10 3a10 	vmov	r3, s0
 800821e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008222:	3a19      	subs	r2, #25
 8008224:	4402      	add	r2, r0
 8008226:	2afe      	cmp	r2, #254	; 0xfe
 8008228:	dd15      	ble.n	8008256 <scalbnf+0x66>
 800822a:	ee10 3a10 	vmov	r3, s0
 800822e:	eddf 7a24 	vldr	s15, [pc, #144]	; 80082c0 <scalbnf+0xd0>
 8008232:	eddf 6a24 	vldr	s13, [pc, #144]	; 80082c4 <scalbnf+0xd4>
 8008236:	2b00      	cmp	r3, #0
 8008238:	eeb0 7a67 	vmov.f32	s14, s15
 800823c:	bfb8      	it	lt
 800823e:	eef0 7a66 	vmovlt.f32	s15, s13
 8008242:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008246:	4770      	bx	lr
 8008248:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80082c8 <scalbnf+0xd8>
 800824c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008250:	4770      	bx	lr
 8008252:	0dd2      	lsrs	r2, r2, #23
 8008254:	e7e6      	b.n	8008224 <scalbnf+0x34>
 8008256:	2a00      	cmp	r2, #0
 8008258:	dd06      	ble.n	8008268 <scalbnf+0x78>
 800825a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800825e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008262:	ee00 3a10 	vmov	s0, r3
 8008266:	4770      	bx	lr
 8008268:	f112 0f16 	cmn.w	r2, #22
 800826c:	da1a      	bge.n	80082a4 <scalbnf+0xb4>
 800826e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008272:	4298      	cmp	r0, r3
 8008274:	ee10 3a10 	vmov	r3, s0
 8008278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800827c:	dd0a      	ble.n	8008294 <scalbnf+0xa4>
 800827e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80082c0 <scalbnf+0xd0>
 8008282:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80082c4 <scalbnf+0xd4>
 8008286:	eef0 7a40 	vmov.f32	s15, s0
 800828a:	2b00      	cmp	r3, #0
 800828c:	bf18      	it	ne
 800828e:	eeb0 0a47 	vmovne.f32	s0, s14
 8008292:	e7db      	b.n	800824c <scalbnf+0x5c>
 8008294:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80082c8 <scalbnf+0xd8>
 8008298:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80082cc <scalbnf+0xdc>
 800829c:	eef0 7a40 	vmov.f32	s15, s0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	e7f3      	b.n	800828c <scalbnf+0x9c>
 80082a4:	3219      	adds	r2, #25
 80082a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082aa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80082ae:	eddf 7a08 	vldr	s15, [pc, #32]	; 80082d0 <scalbnf+0xe0>
 80082b2:	ee07 3a10 	vmov	s14, r3
 80082b6:	e7c4      	b.n	8008242 <scalbnf+0x52>
 80082b8:	ffff3cb0 	.word	0xffff3cb0
 80082bc:	4c000000 	.word	0x4c000000
 80082c0:	7149f2ca 	.word	0x7149f2ca
 80082c4:	f149f2ca 	.word	0xf149f2ca
 80082c8:	0da24260 	.word	0x0da24260
 80082cc:	8da24260 	.word	0x8da24260
 80082d0:	33000000 	.word	0x33000000

080082d4 <_init>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	bf00      	nop
 80082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082da:	bc08      	pop	{r3}
 80082dc:	469e      	mov	lr, r3
 80082de:	4770      	bx	lr

080082e0 <_fini>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	bf00      	nop
 80082e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e6:	bc08      	pop	{r3}
 80082e8:	469e      	mov	lr, r3
 80082ea:	4770      	bx	lr
